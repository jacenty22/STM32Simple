
hardwareF1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000339c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080034a8  080034a8  000134a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800351c  0800351c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800351c  0800351c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800351c  0800351c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002128  2000001c  08003540  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002144  08003540  00022144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134ec  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000287b  00000000  00000000  00033531  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c80f  00000000  00000000  00035dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f40  00000000  00000000  000425c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ef8  00000000  00000000  00043500  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00018d4d  00000000  00000000  000443f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d600  00000000  00000000  0005d145  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00090c39  00000000  00000000  0006a745  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000fb37e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d44  00000000  00000000  000fb3fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003490 	.word	0x08003490

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003490 	.word	0x08003490

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a44:	f1a2 0201 	sub.w	r2, r2, #1
 8000a48:	d1ed      	bne.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <DS18B20_Reset>:
static uint8_t DS18B20_Read(void);
static void DS18B20_Read_Scratchpad(void);
static void DS18B20_Convert_Temperature(void);

static uint8_t DS18B20_Reset(void)
{
 8000e44:	b510      	push	{r4, lr}
	uint8_t response = 0;
	DS18B20Service.Set_Pin_Output(DS18B20Service.pinNumber);
 8000e46:	4c10      	ldr	r4, [pc, #64]	; (8000e88 <DS18B20_Reset+0x44>)
 8000e48:	6863      	ldr	r3, [r4, #4]
 8000e4a:	7e60      	ldrb	r0, [r4, #25]
 8000e4c:	4798      	blx	r3
	DS18B20Service.Write_Pin(DS18B20Service.pinNumber, 0);
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	2100      	movs	r1, #0
 8000e52:	7e60      	ldrb	r0, [r4, #25]
 8000e54:	4798      	blx	r3
	DS18B20Service.Delays_us(480);   // delay according to datasheet
 8000e56:	68a3      	ldr	r3, [r4, #8]
 8000e58:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000e5c:	4798      	blx	r3
	DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);    // set the pin as input
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	7e60      	ldrb	r0, [r4, #25]
 8000e62:	4798      	blx	r3
	DS18B20Service.Delays_us(80);    // delay according to datasheet
 8000e64:	68a3      	ldr	r3, [r4, #8]
 8000e66:	2050      	movs	r0, #80	; 0x50
 8000e68:	4798      	blx	r3
	if (!(DS18B20Service.Read_Pin(DS18B20Service.pinNumber)))
 8000e6a:	6923      	ldr	r3, [r4, #16]
 8000e6c:	7e60      	ldrb	r0, [r4, #25]
 8000e6e:	4798      	blx	r3
 8000e70:	b938      	cbnz	r0, 8000e82 <DS18B20_Reset+0x3e>
		response = 1;    // if the pin is low i.e the presence pulse is detected
 8000e72:	2401      	movs	r4, #1

	DS18B20Service.Delays_us(400); // 480 us delay totally.
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <DS18B20_Reset+0x44>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e7c:	4798      	blx	r3

	return response;
}
 8000e7e:	4620      	mov	r0, r4
 8000e80:	bd10      	pop	{r4, pc}
	uint8_t response = 0;
 8000e82:	2400      	movs	r4, #0
 8000e84:	e7f6      	b.n	8000e74 <DS18B20_Reset+0x30>
 8000e86:	bf00      	nop
 8000e88:	20001f84 	.word	0x20001f84

08000e8c <DS18B20_Write>:
		DS18B20_Convert_Temperature();
	}
}

static void DS18B20_Write(uint8_t data)
{
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	4606      	mov	r6, r0
	DS18B20Service.Set_Pin_Output(DS18B20Service.pinNumber);  // set as output
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <DS18B20_Write+0x68>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	7e58      	ldrb	r0, [r3, #25]
 8000e96:	4790      	blx	r2

	for (int i = 0; i < 8; i++)
 8000e98:	2500      	movs	r5, #0
 8000e9a:	e011      	b.n	8000ec0 <DS18B20_Write+0x34>
			DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);  // set as input
			DS18B20Service.Delays_us(60);  // wait for 60 us
		}
		else  // if the bit is low
		{
			DS18B20Service.Set_Pin_Output(DS18B20Service.pinNumber);
 8000e9c:	4c15      	ldr	r4, [pc, #84]	; (8000ef4 <DS18B20_Write+0x68>)
 8000e9e:	6863      	ldr	r3, [r4, #4]
 8000ea0:	7e60      	ldrb	r0, [r4, #25]
 8000ea2:	4798      	blx	r3
			DS18B20Service.Write_Pin(DS18B20Service.pinNumber, 0);  // pull the pin LOW
 8000ea4:	68e3      	ldr	r3, [r4, #12]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	7e60      	ldrb	r0, [r4, #25]
 8000eaa:	4798      	blx	r3
			DS18B20Service.Delays_us(60);  // wait for 60 us
 8000eac:	68a3      	ldr	r3, [r4, #8]
 8000eae:	203c      	movs	r0, #60	; 0x3c
 8000eb0:	4798      	blx	r3
			DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	7e60      	ldrb	r0, [r4, #25]
 8000eb6:	4798      	blx	r3
			DS18B20Service.Delays_us(1);  // wait for 60 us
 8000eb8:	68a3      	ldr	r3, [r4, #8]
 8000eba:	2001      	movs	r0, #1
 8000ebc:	4798      	blx	r3
	for (int i = 0; i < 8; i++)
 8000ebe:	3501      	adds	r5, #1
 8000ec0:	2d07      	cmp	r5, #7
 8000ec2:	dc16      	bgt.n	8000ef2 <DS18B20_Write+0x66>
		if ((data & (1 << i)) != 0)  // if the bit is high
 8000ec4:	fa46 f305 	asr.w	r3, r6, r5
 8000ec8:	f013 0f01 	tst.w	r3, #1
 8000ecc:	d0e6      	beq.n	8000e9c <DS18B20_Write+0x10>
			DS18B20Service.Set_Pin_Output(DS18B20Service.pinNumber);  // set as output
 8000ece:	4c09      	ldr	r4, [pc, #36]	; (8000ef4 <DS18B20_Write+0x68>)
 8000ed0:	6863      	ldr	r3, [r4, #4]
 8000ed2:	7e60      	ldrb	r0, [r4, #25]
 8000ed4:	4798      	blx	r3
			DS18B20Service.Write_Pin(DS18B20Service.pinNumber, 0);  // pull the pin LOW
 8000ed6:	68e3      	ldr	r3, [r4, #12]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	7e60      	ldrb	r0, [r4, #25]
 8000edc:	4798      	blx	r3
			DS18B20Service.Delays_us(1);  // wait for 1 us
 8000ede:	68a3      	ldr	r3, [r4, #8]
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	4798      	blx	r3
			DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);  // set as input
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	7e60      	ldrb	r0, [r4, #25]
 8000ee8:	4798      	blx	r3
			DS18B20Service.Delays_us(60);  // wait for 60 us
 8000eea:	68a3      	ldr	r3, [r4, #8]
 8000eec:	203c      	movs	r0, #60	; 0x3c
 8000eee:	4798      	blx	r3
 8000ef0:	e7e5      	b.n	8000ebe <DS18B20_Write+0x32>
		}
	}
}
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	20001f84 	.word	0x20001f84

08000ef8 <DS18B20_Convert_Temperature>:
		}
	}
}

static void DS18B20_Convert_Temperature(void)
{
 8000ef8:	b510      	push	{r4, lr}
	DS18B20Service.isResponseFromDevice = DS18B20_Reset();
 8000efa:	f7ff ffa3 	bl	8000e44 <DS18B20_Reset>
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <DS18B20_Convert_Temperature+0x2c>)
 8000f00:	7618      	strb	r0, [r3, #24]
	if (DS18B20Service.isResponseFromDevice)
 8000f02:	b900      	cbnz	r0, 8000f06 <DS18B20_Convert_Temperature+0xe>
		DS18B20_Write(SKIP_ROM_CMD);
		DS18B20_Write(CONVERT_T_CMD);
		DS18B20Service.timeStamp = DS18B20Service.Get_Sys_Time();
		DS18B20Service.waitForReadScratchpad = 1;
	}
}
 8000f04:	bd10      	pop	{r4, pc}
		DS18B20_Write(SKIP_ROM_CMD);
 8000f06:	20cc      	movs	r0, #204	; 0xcc
 8000f08:	f7ff ffc0 	bl	8000e8c <DS18B20_Write>
		DS18B20_Write(CONVERT_T_CMD);
 8000f0c:	2044      	movs	r0, #68	; 0x44
 8000f0e:	f7ff ffbd 	bl	8000e8c <DS18B20_Write>
		DS18B20Service.timeStamp = DS18B20Service.Get_Sys_Time();
 8000f12:	4c04      	ldr	r4, [pc, #16]	; (8000f24 <DS18B20_Convert_Temperature+0x2c>)
 8000f14:	6963      	ldr	r3, [r4, #20]
 8000f16:	4798      	blx	r3
 8000f18:	61e0      	str	r0, [r4, #28]
		DS18B20Service.waitForReadScratchpad = 1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000f20:	e7f0      	b.n	8000f04 <DS18B20_Convert_Temperature+0xc>
 8000f22:	bf00      	nop
 8000f24:	20001f84 	.word	0x20001f84

08000f28 <DS18B20_Init>:
{
 8000f28:	b510      	push	{r4, lr}
	DS18B20Service.Set_Pin_Input = Set_Pin_Input;
 8000f2a:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <DS18B20_Init+0x2c>)
 8000f2c:	6020      	str	r0, [r4, #0]
	DS18B20Service.Set_Pin_Output = Set_Pin_Output;
 8000f2e:	6061      	str	r1, [r4, #4]
	DS18B20Service.Delays_us = Delays_us;
 8000f30:	60a2      	str	r2, [r4, #8]
	DS18B20Service.Write_Pin = Write_Pin;
 8000f32:	60e3      	str	r3, [r4, #12]
	DS18B20Service.Read_Pin = Read_Pin;
 8000f34:	9b02      	ldr	r3, [sp, #8]
 8000f36:	6123      	str	r3, [r4, #16]
	DS18B20Service.pinNumber = 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	7663      	strb	r3, [r4, #25]
	DS18B20Service.Get_Sys_Time = Get_Sys_Time;
 8000f3c:	9b03      	ldr	r3, [sp, #12]
 8000f3e:	6163      	str	r3, [r4, #20]
	DS18B20Service.currentTemperature = NAN;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <DS18B20_Init+0x30>)
 8000f42:	6223      	str	r3, [r4, #32]
	DS18B20Service.isResponseFromDevice = DS18B20_Reset();
 8000f44:	f7ff ff7e 	bl	8000e44 <DS18B20_Reset>
 8000f48:	7620      	strb	r0, [r4, #24]
	if (DS18B20Service.isResponseFromDevice)
 8000f4a:	b900      	cbnz	r0, 8000f4e <DS18B20_Init+0x26>
}
 8000f4c:	bd10      	pop	{r4, pc}
		DS18B20_Convert_Temperature();
 8000f4e:	f7ff ffd3 	bl	8000ef8 <DS18B20_Convert_Temperature>
}
 8000f52:	e7fb      	b.n	8000f4c <DS18B20_Init+0x24>
 8000f54:	20001f84 	.word	0x20001f84
 8000f58:	7fc00000 	.word	0x7fc00000

08000f5c <Hardware_Init>:
		{ (GPIO_TypeDef*) DS18b20_GPIO_Port, DS18b20_Pin },
		{ (GPIO_TypeDef*) DS18b20_GPIO_Port, DS18b20_Pin }
};

void Hardware_Init(void)
{
 8000f5c:	b508      	push	{r3, lr}
	microsecondTimerPtr = &MICROSECOND_TIMER;
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <Hardware_Init+0x20>)
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <Hardware_Init+0x24>)
 8000f62:	6018      	str	r0, [r3, #0]
	i2cForLCDPtr = &I2C_FOR_LCD;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <Hardware_Init+0x28>)
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <Hardware_Init+0x2c>)
 8000f68:	601a      	str	r2, [r3, #0]
#if defined(STM32F411xE)
	HAL_TIM_Base_Start_IT(&htim3);
	HAL_TIM_Base_Start_IT(&htim1);
	HAL_ADC_Start_IT(&hadc1);
#elif defined(STM32F103xB)
	HAL_TIM_Base_Start_IT(&htim2);
 8000f6a:	f002 f863 	bl	8003034 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <Hardware_Init+0x30>)
 8000f70:	f002 f860 	bl	8003034 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <Hardware_Init+0x34>)
 8000f76:	f000 fe77 	bl	8001c68 <HAL_ADC_Start_IT>
#endif
}
 8000f7a:	bd08      	pop	{r3, pc}
 8000f7c:	200020f8 	.word	0x200020f8
 8000f80:	20001fb4 	.word	0x20001fb4
 8000f84:	20001fb0 	.word	0x20001fb0
 8000f88:	2000202c 	.word	0x2000202c
 8000f8c:	20002080 	.word	0x20002080
 8000f90:	200020c8 	.word	0x200020c8

08000f94 <Timers_Callback_Service>:

void Timers_Callback_Service(TIM_HandleTypeDef *htim)
{
 8000f94:	b508      	push	{r3, lr}
	if (htim->Instance == MILISECOND_CALLBACK_TIMER)
 8000f96:	6802      	ldr	r2, [r0, #0]
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <Timers_Callback_Service+0x14>)
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d000      	beq.n	8000fa0 <Timers_Callback_Service+0xc>
	{
		Time_Service();
	}
}
 8000f9e:	bd08      	pop	{r3, pc}
		Time_Service();
 8000fa0:	f000 f9d8 	bl	8001354 <Time_Service>
}
 8000fa4:	e7fb      	b.n	8000f9e <Timers_Callback_Service+0xa>
 8000fa6:	bf00      	nop
 8000fa8:	40000400 	.word	0x40000400

08000fac <Transmit_For_LCD>:
		__NOP();
	}
}

uint8_t Transmit_For_LCD(uint16_t deviceAddress, uint8_t *data, size_t dataSize, uint32_t timeout)
{
 8000fac:	b510      	push	{r4, lr}
 8000fae:	b082      	sub	sp, #8
	return HAL_I2C_Master_Transmit(i2cForLCDPtr, deviceAddress, (uint8_t*) data, dataSize, timeout);
 8000fb0:	4c05      	ldr	r4, [pc, #20]	; (8000fc8 <Transmit_For_LCD+0x1c>)
 8000fb2:	6824      	ldr	r4, [r4, #0]
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	b293      	uxth	r3, r2
 8000fb8:	460a      	mov	r2, r1
 8000fba:	4601      	mov	r1, r0
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f001 fba7 	bl	8002710 <HAL_I2C_Master_Transmit>
}
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd10      	pop	{r4, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20001fb0 	.word	0x20001fb0

08000fcc <Delay_In_Milis>:

void Delay_In_Milis(uint32_t delay)
{
 8000fcc:	b508      	push	{r3, lr}
	HAL_Delay(delay);
 8000fce:	f000 fcd1 	bl	8001974 <HAL_Delay>
}
 8000fd2:	bd08      	pop	{r3, pc}

08000fd4 <I2C_Reinit_For_LCD>:

void I2C_Reinit_For_LCD(void)
{
 8000fd4:	b510      	push	{r4, lr}
	HAL_I2C_DeInit(i2cForLCDPtr);
 8000fd6:	4c05      	ldr	r4, [pc, #20]	; (8000fec <I2C_Reinit_For_LCD+0x18>)
 8000fd8:	6820      	ldr	r0, [r4, #0]
 8000fda:	f001 fb7f 	bl	80026dc <HAL_I2C_DeInit>
	HAL_Delay(200);
 8000fde:	20c8      	movs	r0, #200	; 0xc8
 8000fe0:	f000 fcc8 	bl	8001974 <HAL_Delay>
	HAL_I2C_Init(i2cForLCDPtr);
 8000fe4:	6820      	ldr	r0, [r4, #0]
 8000fe6:	f001 fa9f 	bl	8002528 <HAL_I2C_Init>
}
 8000fea:	bd10      	pop	{r4, pc}
 8000fec:	20001fb0 	.word	0x20001fb0

08000ff0 <Delays_us>:

void Delays_us(const uint16_t us_time)
{
	__HAL_TIM_SET_COUNTER(microsecondTimerPtr, 0);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <Delays_us+0x14>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	6813      	ldr	r3, [r2, #0]
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	6259      	str	r1, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(microsecondTimerPtr) < us_time)
 8000ffa:	6813      	ldr	r3, [r2, #0]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	4283      	cmp	r3, r0
 8001000:	d3fb      	bcc.n	8000ffa <Delays_us+0xa>
		;
}
 8001002:	4770      	bx	lr
 8001004:	20001fb4 	.word	0x20001fb4

08001008 <Set_Pin_Output>:

void Set_Pin_Output(uint8_t pinNumber)
{
	if (pinNumber >= sizeof(PinsConfiguration) / sizeof(PinsConfiguration[0]))
 8001008:	2801      	cmp	r0, #1
 800100a:	d900      	bls.n	800100e <Set_Pin_Output+0x6>
 800100c:	4770      	bx	lr
{
 800100e:	b500      	push	{lr}
 8001010:	b085      	sub	sp, #20
		return;
	GPIO_InitTypeDef GPIO_InitStruct =
 8001012:	2300      	movs	r3, #0
 8001014:	9302      	str	r3, [sp, #8]
	{ 0 };
	GPIO_InitStruct.Pin = PinsConfiguration[pinNumber].pin;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <Set_Pin_Output+0x30>)
 8001018:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800101c:	6852      	ldr	r2, [r2, #4]
 800101e:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2201      	movs	r2, #1
 8001022:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2202      	movs	r2, #2
 8001026:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(PinsConfiguration[pinNumber].port, &GPIO_InitStruct);
 8001028:	4669      	mov	r1, sp
 800102a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800102e:	f000 ffb1 	bl	8001f94 <HAL_GPIO_Init>
}
 8001032:	b005      	add	sp, #20
 8001034:	f85d fb04 	ldr.w	pc, [sp], #4
 8001038:	20000000 	.word	0x20000000

0800103c <Set_Pin_Input>:

void Set_Pin_Input(uint8_t pinNumber)
{
	if (pinNumber >= sizeof(PinsConfiguration) / sizeof(PinsConfiguration[0]))
 800103c:	2801      	cmp	r0, #1
 800103e:	d900      	bls.n	8001042 <Set_Pin_Input+0x6>
 8001040:	4770      	bx	lr
{
 8001042:	b500      	push	{lr}
 8001044:	b085      	sub	sp, #20
		return;
	GPIO_InitTypeDef GPIO_InitStruct =
 8001046:	2300      	movs	r3, #0
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	9303      	str	r3, [sp, #12]
	{ 0 };
	GPIO_InitStruct.Pin = PinsConfiguration[pinNumber].pin;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <Set_Pin_Input+0x30>)
 800104e:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8001052:	6852      	ldr	r2, [r2, #4]
 8001054:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	2201      	movs	r2, #1
 8001058:	9202      	str	r2, [sp, #8]
	HAL_GPIO_Init(PinsConfiguration[pinNumber].port, &GPIO_InitStruct);
 800105a:	4669      	mov	r1, sp
 800105c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8001060:	f000 ff98 	bl	8001f94 <HAL_GPIO_Init>
}
 8001064:	b005      	add	sp, #20
 8001066:	f85d fb04 	ldr.w	pc, [sp], #4
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000

08001070 <Write_Pin>:

void Write_Pin(uint8_t pinNumber, uint8_t pinState)
{
	if (pinNumber >= sizeof(PinsConfiguration) / sizeof(PinsConfiguration[0]))
 8001070:	2801      	cmp	r0, #1
 8001072:	d900      	bls.n	8001076 <Write_Pin+0x6>
 8001074:	4770      	bx	lr
{
 8001076:	b508      	push	{r3, lr}
 8001078:	460a      	mov	r2, r1
		return;
	HAL_GPIO_WritePin(PinsConfiguration[pinNumber].port, PinsConfiguration[pinNumber].pin, pinState);
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <Write_Pin+0x1c>)
 800107c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8001080:	8889      	ldrh	r1, [r1, #4]
 8001082:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8001086:	f001 f8f4 	bl	8002272 <HAL_GPIO_WritePin>
}
 800108a:	bd08      	pop	{r3, pc}
 800108c:	20000000 	.word	0x20000000

08001090 <Read_Pin>:

uint8_t Read_Pin(uint8_t pinNumber)
{
	if (pinNumber >= sizeof(PinsConfiguration) / sizeof(PinsConfiguration[0]))
 8001090:	2801      	cmp	r0, #1
 8001092:	d901      	bls.n	8001098 <Read_Pin+0x8>
		return 0;
 8001094:	2000      	movs	r0, #0
	return HAL_GPIO_ReadPin(PinsConfiguration[pinNumber].port, PinsConfiguration[pinNumber].pin);
}
 8001096:	4770      	bx	lr
{
 8001098:	b508      	push	{r3, lr}
	return HAL_GPIO_ReadPin(PinsConfiguration[pinNumber].port, PinsConfiguration[pinNumber].pin);
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <Read_Pin+0x1c>)
 800109c:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80010a0:	8891      	ldrh	r1, [r2, #4]
 80010a2:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80010a6:	f001 f8dd 	bl	8002264 <HAL_GPIO_ReadPin>
}
 80010aa:	bd08      	pop	{r3, pc}
 80010ac:	20000000 	.word	0x20000000

080010b0 <LCD_Send_Cmd>:
		Multi_Line_Service(0);
	}
}

static void LCD_Send_Cmd(uint8_t cmd)
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	4604      	mov	r4, r0
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80010b6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
	data_l = ((cmd << 4) & 0xf0);
 80010ba:	0103      	lsls	r3, r0, #4
 80010bc:	b2db      	uxtb	r3, r3
	data_t[0] = data_u | (DUMMY_BIT | ENABLE_BIT); //en=1, rs=0
 80010be:	f042 010c 	orr.w	r1, r2, #12
 80010c2:	f88d 1004 	strb.w	r1, [sp, #4]
	data_t[1] = data_u | DUMMY_BIT;				   //en=0, rs=0
 80010c6:	f042 0208 	orr.w	r2, r2, #8
 80010ca:	f88d 2005 	strb.w	r2, [sp, #5]
	data_t[2] = data_l | (DUMMY_BIT | ENABLE_BIT); //en=1, rs=0
 80010ce:	f043 020c 	orr.w	r2, r3, #12
 80010d2:	f88d 2006 	strb.w	r2, [sp, #6]
	data_t[3] = data_l | DUMMY_BIT;				   //en=0, rs=0
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	f88d 3007 	strb.w	r3, [sp, #7]
	LCDService.communicationStatus = LCDService.Transmit_For_LCD( SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 200);
 80010de:	4d0b      	ldr	r5, [pc, #44]	; (800110c <LCD_Send_Cmd+0x5c>)
 80010e0:	682e      	ldr	r6, [r5, #0]
 80010e2:	23c8      	movs	r3, #200	; 0xc8
 80010e4:	2204      	movs	r2, #4
 80010e6:	eb0d 0102 	add.w	r1, sp, r2
 80010ea:	207e      	movs	r0, #126	; 0x7e
 80010ec:	47b0      	blx	r6
 80010ee:	7328      	strb	r0, [r5, #12]
	if (cmd == CLEAR_DISPLAY_CMD || cmd == RETURN_HOME_CMD)
 80010f0:	3c01      	subs	r4, #1
 80010f2:	b2e4      	uxtb	r4, r4
 80010f4:	2c01      	cmp	r4, #1
 80010f6:	d905      	bls.n	8001104 <LCD_Send_Cmd+0x54>
		LCDService.Delay(6);
	else
		LCDService.Delay(1);
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <LCD_Send_Cmd+0x5c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2001      	movs	r0, #1
 80010fe:	4798      	blx	r3
}
 8001100:	b002      	add	sp, #8
 8001102:	bd70      	pop	{r4, r5, r6, pc}
		LCDService.Delay(6);
 8001104:	686b      	ldr	r3, [r5, #4]
 8001106:	2006      	movs	r0, #6
 8001108:	4798      	blx	r3
 800110a:	e7f9      	b.n	8001100 <LCD_Send_Cmd+0x50>
 800110c:	20001fb8 	.word	0x20001fb8

08001110 <LCD_Send_Data>:

static void LCD_Send_Data(char data)
{
 8001110:	b530      	push	{r4, r5, lr}
 8001112:	b083      	sub	sp, #12
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8001114:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data << 4) & 0xf0);
 8001118:	0100      	lsls	r0, r0, #4
 800111a:	b2c0      	uxtb	r0, r0
	data_t[0] = data_u | (DUMMY_BIT | ENABLE_BIT | RESET_BIT); //en=1, rs=1
 800111c:	f043 020d 	orr.w	r2, r3, #13
 8001120:	f88d 2004 	strb.w	r2, [sp, #4]
	data_t[1] = data_u | (DUMMY_BIT | RESET_BIT);			   //en=0, rs=1
 8001124:	f043 0309 	orr.w	r3, r3, #9
 8001128:	f88d 3005 	strb.w	r3, [sp, #5]
	data_t[2] = data_l | (DUMMY_BIT | ENABLE_BIT | RESET_BIT); //en=1, rs=1
 800112c:	f040 030d 	orr.w	r3, r0, #13
 8001130:	f88d 3006 	strb.w	r3, [sp, #6]
	data_t[3] = data_l | (DUMMY_BIT | RESET_BIT);			   //en=0, rs=1
 8001134:	f040 0009 	orr.w	r0, r0, #9
 8001138:	f88d 0007 	strb.w	r0, [sp, #7]
	LCDService.communicationStatus = LCDService.Transmit_For_LCD(SLAVE_ADDRESS_LCD, (uint8_t*) data_t, sizeof(data_t), 200);
 800113c:	4c05      	ldr	r4, [pc, #20]	; (8001154 <LCD_Send_Data+0x44>)
 800113e:	6825      	ldr	r5, [r4, #0]
 8001140:	23c8      	movs	r3, #200	; 0xc8
 8001142:	2204      	movs	r2, #4
 8001144:	eb0d 0102 	add.w	r1, sp, r2
 8001148:	207e      	movs	r0, #126	; 0x7e
 800114a:	47a8      	blx	r5
 800114c:	7320      	strb	r0, [r4, #12]
}
 800114e:	b003      	add	sp, #12
 8001150:	bd30      	pop	{r4, r5, pc}
 8001152:	bf00      	nop
 8001154:	20001fb8 	.word	0x20001fb8

08001158 <Set_Own_Characters>:
{
 8001158:	b538      	push	{r3, r4, r5, lr}
	LCD_Send_Cmd(SET_CGRAM_ADDRESS);
 800115a:	2040      	movs	r0, #64	; 0x40
 800115c:	f7ff ffa8 	bl	80010b0 <LCD_Send_Cmd>
	for (uint8_t j = 0; j < sizeof(ownCharacters) / sizeof(ownCharacters[0]) && j < MAX_COUNT_OF_CHARACTERS_IN_GCRAM; j++)
 8001160:	2500      	movs	r5, #0
 8001162:	e00b      	b.n	800117c <Set_Own_Characters+0x24>
			LCD_Send_Data(ownCharacters[j][i]);
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <Set_Own_Characters+0x30>)
 8001166:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800116a:	5d18      	ldrb	r0, [r3, r4]
 800116c:	f7ff ffd0 	bl	8001110 <LCD_Send_Data>
		for (uint8_t i = 0; i < sizeof(ownCharacters[0]) / sizeof(ownCharacters[0][0]); i++)
 8001170:	3401      	adds	r4, #1
 8001172:	b2e4      	uxtb	r4, r4
 8001174:	2c07      	cmp	r4, #7
 8001176:	d9f5      	bls.n	8001164 <Set_Own_Characters+0xc>
	for (uint8_t j = 0; j < sizeof(ownCharacters) / sizeof(ownCharacters[0]) && j < MAX_COUNT_OF_CHARACTERS_IN_GCRAM; j++)
 8001178:	3501      	adds	r5, #1
 800117a:	b2ed      	uxtb	r5, r5
 800117c:	2d07      	cmp	r5, #7
 800117e:	d801      	bhi.n	8001184 <Set_Own_Characters+0x2c>
		for (uint8_t i = 0; i < sizeof(ownCharacters[0]) / sizeof(ownCharacters[0][0]); i++)
 8001180:	2400      	movs	r4, #0
 8001182:	e7f7      	b.n	8001174 <Set_Own_Characters+0x1c>
}
 8001184:	bd38      	pop	{r3, r4, r5, pc}
 8001186:	bf00      	nop
 8001188:	080034bc 	.word	0x080034bc

0800118c <LCD_Set_Shifting_Time>:
	LCDService.shiftTime = time;
 800118c:	4b01      	ldr	r3, [pc, #4]	; (8001194 <LCD_Set_Shifting_Time+0x8>)
 800118e:	81d8      	strh	r0, [r3, #14]
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20001fb8 	.word	0x20001fb8

08001198 <LCD_Clear>:
{
 8001198:	b508      	push	{r3, lr}
	if (LCDService.communicationStatus == COMMUNICATION_OK_STATUS)
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <LCD_Clear+0x14>)
 800119c:	7b1b      	ldrb	r3, [r3, #12]
 800119e:	b103      	cbz	r3, 80011a2 <LCD_Clear+0xa>
}
 80011a0:	bd08      	pop	{r3, pc}
		LCD_Send_Cmd(CLEAR_DISPLAY_CMD);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff ff84 	bl	80010b0 <LCD_Send_Cmd>
}
 80011a8:	e7fa      	b.n	80011a0 <LCD_Clear+0x8>
 80011aa:	bf00      	nop
 80011ac:	20001fb8 	.word	0x20001fb8

080011b0 <Communication_Init>:
{
 80011b0:	b510      	push	{r4, lr}
	LCDService.Delay(100);	// wait for >40ms
 80011b2:	4c21      	ldr	r4, [pc, #132]	; (8001238 <Communication_Init+0x88>)
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	4798      	blx	r3
	LCD_Send_Cmd(INIT_CMD);
 80011ba:	2030      	movs	r0, #48	; 0x30
 80011bc:	f7ff ff78 	bl	80010b0 <LCD_Send_Cmd>
	LCDService.Delay(10);	// wait for >4.1ms
 80011c0:	6863      	ldr	r3, [r4, #4]
 80011c2:	200a      	movs	r0, #10
 80011c4:	4798      	blx	r3
	LCD_Send_Cmd(INIT_CMD);
 80011c6:	2030      	movs	r0, #48	; 0x30
 80011c8:	f7ff ff72 	bl	80010b0 <LCD_Send_Cmd>
	LCDService.Delay(1);	// wait for >100us
 80011cc:	6863      	ldr	r3, [r4, #4]
 80011ce:	2001      	movs	r0, #1
 80011d0:	4798      	blx	r3
	LCD_Send_Cmd(INIT_CMD);
 80011d2:	2030      	movs	r0, #48	; 0x30
 80011d4:	f7ff ff6c 	bl	80010b0 <LCD_Send_Cmd>
	LCDService.Delay(50);
 80011d8:	6863      	ldr	r3, [r4, #4]
 80011da:	2032      	movs	r0, #50	; 0x32
 80011dc:	4798      	blx	r3
	LCD_Send_Cmd(FUNCTION_SET_CMD);	// 4bit mode
 80011de:	2020      	movs	r0, #32
 80011e0:	f7ff ff66 	bl	80010b0 <LCD_Send_Cmd>
	LCDService.Delay(50);
 80011e4:	6863      	ldr	r3, [r4, #4]
 80011e6:	2032      	movs	r0, #50	; 0x32
 80011e8:	4798      	blx	r3
	LCD_Send_Cmd(FUNCTION_SET_CMD | TWO_LINE_DISPLAY_MODE);	// Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011ea:	2028      	movs	r0, #40	; 0x28
 80011ec:	f7ff ff60 	bl	80010b0 <LCD_Send_Cmd>
	LCDService.Delay(10);
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	200a      	movs	r0, #10
 80011f4:	4798      	blx	r3
	LCD_Send_Cmd(DISPLAY_ON_OFF_CMD);	//Display on/off control --> D=0,C=0, B=0  ---> display off
 80011f6:	2008      	movs	r0, #8
 80011f8:	f7ff ff5a 	bl	80010b0 <LCD_Send_Cmd>
	LCDService.Delay(10);
 80011fc:	6863      	ldr	r3, [r4, #4]
 80011fe:	200a      	movs	r0, #10
 8001200:	4798      	blx	r3
	LCD_Send_Cmd(CLEAR_DISPLAY_CMD);	// clear display
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff ff54 	bl	80010b0 <LCD_Send_Cmd>
	LCDService.Delay(10);
 8001208:	6863      	ldr	r3, [r4, #4]
 800120a:	200a      	movs	r0, #10
 800120c:	4798      	blx	r3
	LCD_Send_Cmd(ENTRY_MODE_CMD | INCREMENT_DDRAM_ADDRESS);	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800120e:	2006      	movs	r0, #6
 8001210:	f7ff ff4e 	bl	80010b0 <LCD_Send_Cmd>
	LCDService.Delay(10);
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	200a      	movs	r0, #10
 8001218:	4798      	blx	r3
	LCD_Send_Cmd(DISPLAY_ON_OFF_CMD | DISPLAY_ON_BIT);	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800121a:	200c      	movs	r0, #12
 800121c:	f7ff ff48 	bl	80010b0 <LCD_Send_Cmd>
	LCDService.Delay(10);
 8001220:	6863      	ldr	r3, [r4, #4]
 8001222:	200a      	movs	r0, #10
 8001224:	4798      	blx	r3
	LCD_Clear();
 8001226:	f7ff ffb7 	bl	8001198 <LCD_Clear>
	LCDService.Delay(100);
 800122a:	6863      	ldr	r3, [r4, #4]
 800122c:	2064      	movs	r0, #100	; 0x64
 800122e:	4798      	blx	r3
	Set_Own_Characters();
 8001230:	f7ff ff92 	bl	8001158 <Set_Own_Characters>
}
 8001234:	bd10      	pop	{r4, pc}
 8001236:	bf00      	nop
 8001238:	20001fb8 	.word	0x20001fb8

0800123c <LCD_I2C_Init>:
{
 800123c:	b508      	push	{r3, lr}
	LCDService.Delay = Delay;
 800123e:	4b03      	ldr	r3, [pc, #12]	; (800124c <LCD_I2C_Init+0x10>)
 8001240:	6059      	str	r1, [r3, #4]
	LCDService.Transmit_For_LCD = Transmit_For_LCD;
 8001242:	6018      	str	r0, [r3, #0]
	LCDService.I2C_For_LCD_Reinit = I2C_For_LCD_Reinit;
 8001244:	609a      	str	r2, [r3, #8]
	Communication_Init();
 8001246:	f7ff ffb3 	bl	80011b0 <Communication_Init>
}
 800124a:	bd08      	pop	{r3, pc}
 800124c:	20001fb8 	.word	0x20001fb8

08001250 <Initialize>:
#include "HAL_Functions.h"
#include "LCD_I2C.h"
#include "DS18B20_One_Wire.h"

void Initialize(void)
{
 8001250:	b500      	push	{lr}
 8001252:	b083      	sub	sp, #12
	Hardware_Init();
 8001254:	f7ff fe82 	bl	8000f5c <Hardware_Init>
	LCD_I2C_Init(Transmit_For_LCD, Delay_In_Milis, I2C_Reinit_For_LCD);
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <Initialize+0x34>)
 800125a:	490b      	ldr	r1, [pc, #44]	; (8001288 <Initialize+0x38>)
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <Initialize+0x3c>)
 800125e:	f7ff ffed 	bl	800123c <LCD_I2C_Init>
	LCD_Set_Shifting_Time(2000);
 8001262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001266:	f7ff ff91 	bl	800118c <LCD_Set_Shifting_Time>
	DS18B20_Init(Set_Pin_Input, Set_Pin_Output, Delays_us, Write_Pin, Read_Pin, Get_Sys_Time);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <Initialize+0x40>)
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <Initialize+0x44>)
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <Initialize+0x48>)
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <Initialize+0x4c>)
 8001276:	490a      	ldr	r1, [pc, #40]	; (80012a0 <Initialize+0x50>)
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <Initialize+0x54>)
 800127a:	f7ff fe55 	bl	8000f28 <DS18B20_Init>
}
 800127e:	b003      	add	sp, #12
 8001280:	f85d fb04 	ldr.w	pc, [sp], #4
 8001284:	08000fd5 	.word	0x08000fd5
 8001288:	08000fcd 	.word	0x08000fcd
 800128c:	08000fad 	.word	0x08000fad
 8001290:	080013a1 	.word	0x080013a1
 8001294:	08001091 	.word	0x08001091
 8001298:	08001071 	.word	0x08001071
 800129c:	08000ff1 	.word	0x08000ff1
 80012a0:	08001009 	.word	0x08001009
 80012a4:	0800103d 	.word	0x0800103d

080012a8 <Main_Loop>:

void Main_Loop(void)
{

}
 80012a8:	4770      	bx	lr
	...

080012ac <Temperature_Service>:
{
	return 0; //todo zrobic usredniania z zapisem dla flash
}

void Temperature_Service(uint32_t adcValue)
{
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static float sumOfTemperatures = 0;
	static int index = 0;
	static volatile uint32_t values[2000] = {0};
	values[index++] = adcValue;
 80012ae:	4c21      	ldr	r4, [pc, #132]	; (8001334 <Temperature_Service+0x88>)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	4920      	ldr	r1, [pc, #128]	; (8001338 <Temperature_Service+0x8c>)
 80012b6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	index = index % 2000;
 80012ba:	4920      	ldr	r1, [pc, #128]	; (800133c <Temperature_Service+0x90>)
 80012bc:	fb81 3102 	smull	r3, r1, r1, r2
 80012c0:	17d3      	asrs	r3, r2, #31
 80012c2:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
 80012c6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80012ca:	fb01 2313 	mls	r3, r1, r3, r2
 80012ce:	6023      	str	r3, [r4, #0]
	if(adcValue<600)
 80012d0:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 80012d4:	d201      	bcs.n	80012da <Temperature_Service+0x2e>
	{
		index++;
 80012d6:	3301      	adds	r3, #1
 80012d8:	6023      	str	r3, [r4, #0]
	}
	temperatureService.samplesCounter++;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <Temperature_Service+0x94>)
 80012dc:	88dc      	ldrh	r4, [r3, #6]
 80012de:	3401      	adds	r4, #1
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	80dc      	strh	r4, [r3, #6]
	sumOfTemperatures += (SUPPLY_VOLTAGE / ADC_RESOLUTION) * adcValue * 100.0;
 80012e4:	f7ff fc06 	bl	8000af4 <__aeabi_ui2f>
 80012e8:	4916      	ldr	r1, [pc, #88]	; (8001344 <Temperature_Service+0x98>)
 80012ea:	f7ff fc5b 	bl	8000ba4 <__aeabi_fmul>
 80012ee:	f7ff f891 	bl	8000414 <__aeabi_f2d>
 80012f2:	2200      	movs	r2, #0
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <Temperature_Service+0x9c>)
 80012f6:	f7ff f8e5 	bl	80004c4 <__aeabi_dmul>
 80012fa:	4606      	mov	r6, r0
 80012fc:	460f      	mov	r7, r1
 80012fe:	4d13      	ldr	r5, [pc, #76]	; (800134c <Temperature_Service+0xa0>)
 8001300:	6828      	ldr	r0, [r5, #0]
 8001302:	f7ff f887 	bl	8000414 <__aeabi_f2d>
 8001306:	4632      	mov	r2, r6
 8001308:	463b      	mov	r3, r7
 800130a:	f7fe ff25 	bl	8000158 <__adddf3>
 800130e:	f7ff faeb 	bl	80008e8 <__aeabi_d2f>
 8001312:	6028      	str	r0, [r5, #0]

	if(temperatureService.samplesCounter == COUNT_OF_SAMPLES)
 8001314:	2c05      	cmp	r4, #5
 8001316:	d000      	beq.n	800131a <Temperature_Service+0x6e>
		temperatureService.samplesCounter = 0;
		temperatureService.temperature = sumOfTemperatures/COUNT_OF_SAMPLES;
		temperatureService.valueReadedCorrectly = 1;
		sumOfTemperatures = 0;
	}
}
 8001318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temperatureService.samplesCounter = 0;
 800131a:	4c09      	ldr	r4, [pc, #36]	; (8001340 <Temperature_Service+0x94>)
 800131c:	2300      	movs	r3, #0
 800131e:	80e3      	strh	r3, [r4, #6]
		temperatureService.temperature = sumOfTemperatures/COUNT_OF_SAMPLES;
 8001320:	490b      	ldr	r1, [pc, #44]	; (8001350 <Temperature_Service+0xa4>)
 8001322:	f7ff fcf3 	bl	8000d0c <__aeabi_fdiv>
 8001326:	6020      	str	r0, [r4, #0]
		temperatureService.valueReadedCorrectly = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	7123      	strb	r3, [r4, #4]
		sumOfTemperatures = 0;
 800132c:	2200      	movs	r2, #0
 800132e:	602a      	str	r2, [r5, #0]
}
 8001330:	e7f2      	b.n	8001318 <Temperature_Service+0x6c>
 8001332:	bf00      	nop
 8001334:	20000038 	.word	0x20000038
 8001338:	20000040 	.word	0x20000040
 800133c:	10624dd3 	.word	0x10624dd3
 8001340:	20002018 	.word	0x20002018
 8001344:	3a534067 	.word	0x3a534067
 8001348:	40590000 	.word	0x40590000
 800134c:	2000003c 	.word	0x2000003c
 8001350:	40a00000 	.word	0x40a00000

08001354 <Time_Service>:
#define INTERUPT_TIME_IN_MILIS 10
timer_struct timerService;

void Time_Service(void)
{
	timerService.miliseconds+=INTERUPT_TIME_IN_MILIS;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <Time_Service+0x40>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	320a      	adds	r2, #10
 800135a:	601a      	str	r2, [r3, #0]
	if(timerService.miliseconds % 1000 == 0)
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <Time_Service+0x44>)
 800135e:	fba3 1302 	umull	r1, r3, r3, r2
 8001362:	099b      	lsrs	r3, r3, #6
 8001364:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001368:	fb01 2313 	mls	r3, r1, r3, r2
 800136c:	b983      	cbnz	r3, 8001390 <Time_Service+0x3c>
	{
		timerService.seconds++;
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <Time_Service+0x40>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	3201      	adds	r2, #1
 8001374:	605a      	str	r2, [r3, #4]
		if(timerService.seconds %60==0)
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <Time_Service+0x48>)
 8001378:	fba3 1302 	umull	r1, r3, r3, r2
 800137c:	095b      	lsrs	r3, r3, #5
 800137e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001382:	0099      	lsls	r1, r3, #2
 8001384:	428a      	cmp	r2, r1
 8001386:	d103      	bne.n	8001390 <Time_Service+0x3c>
		{
			timerService.minutes++;
 8001388:	4a02      	ldr	r2, [pc, #8]	; (8001394 <Time_Service+0x40>)
 800138a:	6893      	ldr	r3, [r2, #8]
 800138c:	3301      	adds	r3, #1
 800138e:	6093      	str	r3, [r2, #8]
		}
	}

}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20002020 	.word	0x20002020
 8001398:	10624dd3 	.word	0x10624dd3
 800139c:	88888889 	.word	0x88888889

080013a0 <Get_Sys_Time>:
uint32_t Get_Sys_Time(void)
{
	return timerService.miliseconds;
}
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <Get_Sys_Time+0x8>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20002020 	.word	0x20002020

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013b0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	2400      	movs	r4, #0
 80013b4:	9404      	str	r4, [sp, #16]
 80013b6:	9405      	str	r4, [sp, #20]
 80013b8:	9406      	str	r4, [sp, #24]
 80013ba:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <MX_GPIO_Init+0xec>)
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	f042 0220 	orr.w	r2, r2, #32
 80013c4:	619a      	str	r2, [r3, #24]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	f002 0220 	and.w	r2, r2, #32
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	f042 0210 	orr.w	r2, r2, #16
 80013d6:	619a      	str	r2, [r3, #24]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	f002 0210 	and.w	r2, r2, #16
 80013de:	9201      	str	r2, [sp, #4]
 80013e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	f042 0204 	orr.w	r2, r2, #4
 80013e8:	619a      	str	r2, [r3, #24]
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	f002 0204 	and.w	r2, r2, #4
 80013f0:	9202      	str	r2, [sp, #8]
 80013f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	699a      	ldr	r2, [r3, #24]
 80013f6:	f042 0208 	orr.w	r2, r2, #8
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	9303      	str	r3, [sp, #12]
 8001404:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18b20_GPIO_Port, DS18b20_Pin, GPIO_PIN_RESET);
 8001406:	4f25      	ldr	r7, [pc, #148]	; (800149c <MX_GPIO_Init+0xf0>)
 8001408:	4622      	mov	r2, r4
 800140a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140e:	4638      	mov	r0, r7
 8001410:	f000 ff2f 	bl	8002272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001414:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80014a8 <MX_GPIO_Init+0xfc>
 8001418:	4622      	mov	r2, r4
 800141a:	2104      	movs	r1, #4
 800141c:	4648      	mov	r0, r9
 800141e:	f000 ff28 	bl	8002272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRANISTOR_BASE_GPIO_Port, TRANISTOR_BASE_Pin, GPIO_PIN_RESET);
 8001422:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80014ac <MX_GPIO_Init+0x100>
 8001426:	4622      	mov	r2, r4
 8001428:	2120      	movs	r1, #32
 800142a:	4640      	mov	r0, r8
 800142c:	f000 ff21 	bl	8002272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : THIRD_BUTTON_Pin */
  GPIO_InitStruct.Pin = THIRD_BUTTON_Pin;
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001434:	4d1a      	ldr	r5, [pc, #104]	; (80014a0 <MX_GPIO_Init+0xf4>)
 8001436:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(THIRD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800143a:	a904      	add	r1, sp, #16
 800143c:	4819      	ldr	r0, [pc, #100]	; (80014a4 <MX_GPIO_Init+0xf8>)
 800143e:	f000 fda9 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SECOND_BUTTON_Pin FIRST_BUTTON_Pin */
  GPIO_InitStruct.Pin = SECOND_BUTTON_Pin|FIRST_BUTTON_Pin;
 8001442:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001446:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001448:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	a904      	add	r1, sp, #16
 800144e:	4638      	mov	r0, r7
 8001450:	f000 fda0 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18b20_Pin */
  GPIO_InitStruct.Pin = DS18b20_Pin;
 8001454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001458:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2601      	movs	r6, #1
 800145c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2502      	movs	r5, #2
 8001462:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DS18b20_GPIO_Port, &GPIO_InitStruct);
 8001464:	a904      	add	r1, sp, #16
 8001466:	4638      	mov	r0, r7
 8001468:	f000 fd94 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800146c:	2304      	movs	r3, #4
 800146e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001476:	a904      	add	r1, sp, #16
 8001478:	4648      	mov	r0, r9
 800147a:	f000 fd8b 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRANISTOR_BASE_Pin */
  GPIO_InitStruct.Pin = TRANISTOR_BASE_Pin;
 800147e:	2320      	movs	r3, #32
 8001480:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(TRANISTOR_BASE_GPIO_Port, &GPIO_InitStruct);
 8001488:	a904      	add	r1, sp, #16
 800148a:	4640      	mov	r0, r8
 800148c:	f000 fd82 	bl	8001f94 <HAL_GPIO_Init>

}
 8001490:	b009      	add	sp, #36	; 0x24
 8001492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40010800 	.word	0x40010800
 80014a0:	10110000 	.word	0x10110000
 80014a4:	40011000 	.word	0x40011000
 80014a8:	40011400 	.word	0x40011400
 80014ac:	40010c00 	.word	0x40010c00

080014b0 <MX_TIM3_Init>:
{
 80014b0:	b530      	push	{r4, r5, lr}
 80014b2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b4:	2400      	movs	r4, #0
 80014b6:	9402      	str	r4, [sp, #8]
 80014b8:	9403      	str	r4, [sp, #12]
 80014ba:	9404      	str	r4, [sp, #16]
 80014bc:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	9400      	str	r4, [sp, #0]
 80014c0:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 80014c2:	4d0f      	ldr	r5, [pc, #60]	; (8001500 <MX_TIM3_Init+0x50>)
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_TIM3_Init+0x54>)
 80014c6:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 71;
 80014c8:	2347      	movs	r3, #71	; 0x47
 80014ca:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 999;
 80014ce:	f240 33e7 	movw	r3, #999	; 0x3e7
 80014d2:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014da:	4628      	mov	r0, r5
 80014dc:	f001 feda 	bl	8003294 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e6:	a902      	add	r1, sp, #8
 80014e8:	4628      	mov	r0, r5
 80014ea:	f001 ff09 	bl	8003300 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f2:	4669      	mov	r1, sp
 80014f4:	4628      	mov	r0, r5
 80014f6:	f001 ff71 	bl	80033dc <HAL_TIMEx_MasterConfigSynchronization>
}
 80014fa:	b007      	add	sp, #28
 80014fc:	bd30      	pop	{r4, r5, pc}
 80014fe:	bf00      	nop
 8001500:	20002080 	.word	0x20002080
 8001504:	40000400 	.word	0x40000400

08001508 <MX_TIM2_Init>:
{
 8001508:	b530      	push	{r4, r5, lr}
 800150a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150c:	2500      	movs	r5, #0
 800150e:	9502      	str	r5, [sp, #8]
 8001510:	9503      	str	r5, [sp, #12]
 8001512:	9504      	str	r5, [sp, #16]
 8001514:	9505      	str	r5, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	9500      	str	r5, [sp, #0]
 8001518:	9501      	str	r5, [sp, #4]
  htim2.Instance = TIM2;
 800151a:	4c11      	ldr	r4, [pc, #68]	; (8001560 <MX_TIM2_Init+0x58>)
 800151c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001520:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 71;
 8001522:	2347      	movs	r3, #71	; 0x47
 8001524:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 65535;
 8001528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152c:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001534:	4620      	mov	r0, r4
 8001536:	f001 fead 	bl	8003294 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001540:	a902      	add	r1, sp, #8
 8001542:	4620      	mov	r0, r4
 8001544:	f001 fedc 	bl	8003300 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154c:	4669      	mov	r1, sp
 800154e:	4620      	mov	r0, r4
 8001550:	f001 ff44 	bl	80033dc <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim2);
 8001554:	4620      	mov	r0, r4
 8001556:	f001 fd6d 	bl	8003034 <HAL_TIM_Base_Start_IT>
}
 800155a:	b007      	add	sp, #28
 800155c:	bd30      	pop	{r4, r5, pc}
 800155e:	bf00      	nop
 8001560:	200020f8 	.word	0x200020f8

08001564 <MX_I2C1_Init>:
{
 8001564:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <MX_I2C1_Init+0x28>)
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_I2C1_Init+0x2c>)
 800156a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_I2C1_Init+0x30>)
 800156e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001570:	2300      	movs	r3, #0
 8001572:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001574:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800157e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001580:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001582:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001584:	f000 ffd0 	bl	8002528 <HAL_I2C_Init>
}
 8001588:	bd08      	pop	{r3, pc}
 800158a:	bf00      	nop
 800158c:	2000202c 	.word	0x2000202c
 8001590:	40005400 	.word	0x40005400
 8001594:	000186a0 	.word	0x000186a0

08001598 <MX_ADC1_Init>:
{
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800159c:	2300      	movs	r3, #0
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	9302      	str	r3, [sp, #8]
 80015a2:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80015a4:	4c12      	ldr	r4, [pc, #72]	; (80015f0 <MX_ADC1_Init+0x58>)
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <MX_ADC1_Init+0x5c>)
 80015a8:	6022      	str	r2, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ae:	60a2      	str	r2, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015b0:	2501      	movs	r5, #1
 80015b2:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015b4:	7523      	strb	r3, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015ba:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015bc:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 80015be:	2602      	movs	r6, #2
 80015c0:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015c2:	4620      	mov	r0, r4
 80015c4:	f000 fbf2 	bl	8001dac <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_14;
 80015c8:	230e      	movs	r3, #14
 80015ca:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015cc:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015ce:	2307      	movs	r3, #7
 80015d0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d2:	a901      	add	r1, sp, #4
 80015d4:	4620      	mov	r0, r4
 80015d6:	f000 fa6b 	bl	8001ab0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015da:	2310      	movs	r3, #16
 80015dc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015de:	9602      	str	r6, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80015e0:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e2:	a901      	add	r1, sp, #4
 80015e4:	4620      	mov	r0, r4
 80015e6:	f000 fa63 	bl	8001ab0 <HAL_ADC_ConfigChannel>
}
 80015ea:	b004      	add	sp, #16
 80015ec:	bd70      	pop	{r4, r5, r6, pc}
 80015ee:	bf00      	nop
 80015f0:	200020c8 	.word	0x200020c8
 80015f4:	40012400 	.word	0x40012400

080015f8 <SystemClock_Config>:
{
 80015f8:	b530      	push	{r4, r5, lr}
 80015fa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fc:	2400      	movs	r4, #0
 80015fe:	940c      	str	r4, [sp, #48]	; 0x30
 8001600:	940d      	str	r4, [sp, #52]	; 0x34
 8001602:	940f      	str	r4, [sp, #60]	; 0x3c
 8001604:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001606:	9405      	str	r4, [sp, #20]
 8001608:	9406      	str	r4, [sp, #24]
 800160a:	9407      	str	r4, [sp, #28]
 800160c:	9408      	str	r4, [sp, #32]
 800160e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001610:	9401      	str	r4, [sp, #4]
 8001612:	9402      	str	r4, [sp, #8]
 8001614:	9403      	str	r4, [sp, #12]
 8001616:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001618:	2201      	movs	r2, #1
 800161a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001620:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001622:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2502      	movs	r5, #2
 8001626:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001628:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800162a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800162e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001630:	a80a      	add	r0, sp, #40	; 0x28
 8001632:	f001 f93d 	bl	80028b0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001636:	230f      	movs	r3, #15
 8001638:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163a:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800163e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001642:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001644:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001646:	4629      	mov	r1, r5
 8001648:	a805      	add	r0, sp, #20
 800164a:	f001 fb71 	bl	8002d30 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800164e:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001654:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001656:	a801      	add	r0, sp, #4
 8001658:	f001 fc34 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
}
 800165c:	b015      	add	sp, #84	; 0x54
 800165e:	bd30      	pop	{r4, r5, pc}

08001660 <main>:
{
 8001660:	b500      	push	{lr}
 8001662:	b083      	sub	sp, #12
  HAL_Init();
 8001664:	f000 f962 	bl	800192c <HAL_Init>
  SystemClock_Config();
 8001668:	f7ff ffc6 	bl	80015f8 <SystemClock_Config>
  MX_GPIO_Init();
 800166c:	f7ff fe9e 	bl	80013ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001670:	f7ff ff4a 	bl	8001508 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001674:	f7ff ff1c 	bl	80014b0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001678:	f7ff ff74 	bl	8001564 <MX_I2C1_Init>
  MX_ADC1_Init();
 800167c:	f7ff ff8c 	bl	8001598 <MX_ADC1_Init>
  Initialize();
 8001680:	f7ff fde6 	bl	8001250 <Initialize>
  volatile int x = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	9301      	str	r3, [sp, #4]
	  Main_Loop();
 8001688:	f7ff fe0e 	bl	80012a8 <Main_Loop>
	  if(time)
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <main+0x3c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f9      	beq.n	8001688 <main+0x28>
		  x++;
 8001694:	9b01      	ldr	r3, [sp, #4]
 8001696:	3301      	adds	r3, #1
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	e7f5      	b.n	8001688 <main+0x28>
 800169c:	20001f80 	.word	0x20001f80

080016a0 <HAL_TIM_PeriodElapsedCallback>:
{
	GPIOs_Callback_Service(GPIO_Pin);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b508      	push	{r3, lr}
	Timers_Callback_Service(htim);
 80016a2:	f7ff fc77 	bl	8000f94 <Timers_Callback_Service>
}
 80016a6:	bd08      	pop	{r3, pc}

080016a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016a8:	b508      	push	{r3, lr}
	Temperature_Service(HAL_ADC_GetValue(hadc));
 80016aa:	f000 f977 	bl	800199c <HAL_ADC_GetValue>
 80016ae:	f7ff fdfd 	bl	80012ac <Temperature_Service>
}
 80016b2:	bd08      	pop	{r3, pc}

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_MspInit+0x3c>)
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	619a      	str	r2, [r3, #24]
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	f002 0201 	and.w	r2, r2, #1
 80016c6:	9200      	str	r2, [sp, #0]
 80016c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016d0:	61da      	str	r2, [r3, #28]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_MspInit+0x40>)
 80016de:	6853      	ldr	r3, [r2, #4]
 80016e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	b002      	add	sp, #8
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000

080016f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f8:	b500      	push	{lr}
 80016fa:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	2300      	movs	r3, #0
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	9304      	str	r3, [sp, #16]
 8001704:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001706:	6802      	ldr	r2, [r0, #0]
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_ADC_MspInit+0x68>)
 800170a:	429a      	cmp	r2, r3
 800170c:	d002      	beq.n	8001714 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800170e:	b007      	add	sp, #28
 8001710:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001714:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	619a      	str	r2, [r3, #24]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	699a      	ldr	r2, [r3, #24]
 800172c:	f042 0210 	orr.w	r2, r2, #16
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LM35_IN_Pin;
 800173c:	2310      	movs	r3, #16
 800173e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001740:	2303      	movs	r3, #3
 8001742:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8001744:	a902      	add	r1, sp, #8
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <HAL_ADC_MspInit+0x6c>)
 8001748:	f000 fc24 	bl	8001f94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	4611      	mov	r1, r2
 8001750:	2012      	movs	r0, #18
 8001752:	f000 fbc7 	bl	8001ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001756:	2012      	movs	r0, #18
 8001758:	f000 fbf8 	bl	8001f4c <HAL_NVIC_EnableIRQ>
}
 800175c:	e7d7      	b.n	800170e <HAL_ADC_MspInit+0x16>
 800175e:	bf00      	nop
 8001760:	40012400 	.word	0x40012400
 8001764:	40011000 	.word	0x40011000

08001768 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001768:	b510      	push	{r4, lr}
 800176a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	2300      	movs	r3, #0
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	9303      	str	r3, [sp, #12]
 8001772:	9304      	str	r3, [sp, #16]
 8001774:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8001776:	6802      	ldr	r2, [r0, #0]
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_I2C_MspInit+0x58>)
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800177e:	b006      	add	sp, #24
 8001780:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4c10      	ldr	r4, [pc, #64]	; (80017c4 <HAL_I2C_MspInit+0x5c>)
 8001784:	69a3      	ldr	r3, [r4, #24]
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	61a3      	str	r3, [r4, #24]
 800178c:	69a3      	ldr	r3, [r4, #24]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001796:	23c0      	movs	r3, #192	; 0xc0
 8001798:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	a902      	add	r1, sp, #8
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <HAL_I2C_MspInit+0x60>)
 80017a6:	f000 fbf5 	bl	8001f94 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017aa:	69e3      	ldr	r3, [r4, #28]
 80017ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b0:	61e3      	str	r3, [r4, #28]
 80017b2:	69e3      	ldr	r3, [r4, #28]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	9b01      	ldr	r3, [sp, #4]
}
 80017bc:	e7df      	b.n	800177e <HAL_I2C_MspInit+0x16>
 80017be:	bf00      	nop
 80017c0:	40005400 	.word	0x40005400
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010c00 	.word	0x40010c00

080017cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80017cc:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 80017ce:	6802      	ldr	r2, [r0, #0]
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_I2C_MspDeInit+0x20>)
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d000      	beq.n	80017d8 <HAL_I2C_MspDeInit+0xc>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80017d6:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 80017d8:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_I2C_MspDeInit+0x24>)
 80017da:	69d3      	ldr	r3, [r2, #28]
 80017dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017e0:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, LCD_SCL_Pin|LCD_SDA_Pin);
 80017e2:	21c0      	movs	r1, #192	; 0xc0
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <HAL_I2C_MspDeInit+0x28>)
 80017e6:	f000 fcc1 	bl	800216c <HAL_GPIO_DeInit>
}
 80017ea:	e7f4      	b.n	80017d6 <HAL_I2C_MspDeInit+0xa>
 80017ec:	40005400 	.word	0x40005400
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010c00 	.word	0x40010c00

080017f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f8:	b500      	push	{lr}
 80017fa:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 80017fc:	6803      	ldr	r3, [r0, #0]
 80017fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001802:	d005      	beq.n	8001810 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_TIM_Base_MspInit+0x58>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00e      	beq.n	8001828 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800180a:	b003      	add	sp, #12
 800180c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001810:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	61da      	str	r2, [r3, #28]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	e7f0      	b.n	800180a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_TIM_Base_MspInit+0x5c>)
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	f042 0202 	orr.w	r2, r2, #2
 8001830:	61da      	str	r2, [r3, #28]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	4611      	mov	r1, r2
 8001840:	201d      	movs	r0, #29
 8001842:	f000 fb4f 	bl	8001ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001846:	201d      	movs	r0, #29
 8001848:	f000 fb80 	bl	8001f4c <HAL_NVIC_EnableIRQ>
}
 800184c:	e7dd      	b.n	800180a <HAL_TIM_Base_MspInit+0x12>
 800184e:	bf00      	nop
 8001850:	40000400 	.word	0x40000400
 8001854:	40021000 	.word	0x40021000

08001858 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001858:	4770      	bx	lr

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	e7fe      	b.n	800185a <HardFault_Handler>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	e7fe      	b.n	800185c <MemManage_Handler>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	e7fe      	b.n	800185e <BusFault_Handler>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler>

08001862 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186a:	f000 f871 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186e:	bd08      	pop	{r3, pc}

08001870 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <ADC1_2_IRQHandler+0xc>)
 8001874:	f000 f896 	bl	80019a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001878:	bd08      	pop	{r3, pc}
 800187a:	bf00      	nop
 800187c:	200020c8 	.word	0x200020c8

08001880 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001880:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001882:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM3_IRQHandler+0xc>)
 8001884:	f001 fc0e 	bl	80030a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001888:	bd08      	pop	{r3, pc}
 800188a:	bf00      	nop
 800188c:	20002080 	.word	0x20002080

08001890 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	4770      	bx	lr
	...

08001894 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001894:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001896:	e003      	b.n	80018a0 <LoopCopyDataInit>

08001898 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800189a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800189c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800189e:	3104      	adds	r1, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018a0:	480a      	ldr	r0, [pc, #40]	; (80018cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018a8:	d3f6      	bcc.n	8001898 <CopyDataInit>
  ldr r2, =_sbss
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018ac:	e002      	b.n	80018b4 <LoopFillZerobss>

080018ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018b0:	f842 3b04 	str.w	r3, [r2], #4

080018b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018b8:	d3f9      	bcc.n	80018ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ba:	f7ff ffe9 	bl	8001890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018be:	f001 fdc3 	bl	8003448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018c2:	f7ff fecd 	bl	8001660 <main>
  bx lr
 80018c6:	4770      	bx	lr
  ldr r3, =_sidata
 80018c8:	08003524 	.word	0x08003524
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018d0:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 80018d4:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 80018d8:	20002144 	.word	0x20002144

080018dc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <CAN1_RX1_IRQHandler>
	...

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b510      	push	{r4, lr}
 80018e2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_InitTick+0x40>)
 80018e6:	7818      	ldrb	r0, [r3, #0]
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80018f0:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <HAL_InitTick+0x44>)
 80018f2:	6810      	ldr	r0, [r2, #0]
 80018f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80018f8:	f000 fb36 	bl	8001f68 <HAL_SYSTICK_Config>
 80018fc:	b968      	cbnz	r0, 800191a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	2c0f      	cmp	r4, #15
 8001900:	d901      	bls.n	8001906 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001902:	2001      	movs	r0, #1
 8001904:	e00a      	b.n	800191c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001906:	2200      	movs	r2, #0
 8001908:	4621      	mov	r1, r4
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
 800190e:	f000 fae9 	bl	8001ee4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_InitTick+0x48>)
 8001914:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2000      	movs	r0, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800191a:	2001      	movs	r0, #1
}
 800191c:	bd10      	pop	{r4, pc}
 800191e:	bf00      	nop
 8001920:	20000014 	.word	0x20000014
 8001924:	20000010 	.word	0x20000010
 8001928:	20000018 	.word	0x20000018

0800192c <HAL_Init>:
{
 800192c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192e:	4a07      	ldr	r2, [pc, #28]	; (800194c <HAL_Init+0x20>)
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	f043 0310 	orr.w	r3, r3, #16
 8001936:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 fac1 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff ffce 	bl	80018e0 <HAL_InitTick>
  HAL_MspInit();
 8001944:	f7ff feb6 	bl	80016b4 <HAL_MspInit>
}
 8001948:	2000      	movs	r0, #0
 800194a:	bd08      	pop	{r3, pc}
 800194c:	40022000 	.word	0x40022000

08001950 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001950:	4a03      	ldr	r2, [pc, #12]	; (8001960 <HAL_IncTick+0x10>)
 8001952:	6811      	ldr	r1, [r2, #0]
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_IncTick+0x14>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	440b      	add	r3, r1
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20002140 	.word	0x20002140
 8001964:	20000014 	.word	0x20000014

08001968 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001968:	4b01      	ldr	r3, [pc, #4]	; (8001970 <HAL_GetTick+0x8>)
 800196a:	6818      	ldr	r0, [r3, #0]
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20002140 	.word	0x20002140

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b538      	push	{r3, r4, r5, lr}
 8001976:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff fff6 	bl	8001968 <HAL_GetTick>
 800197c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001982:	d002      	beq.n	800198a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_Delay+0x24>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198a:	f7ff ffed 	bl	8001968 <HAL_GetTick>
 800198e:	1b40      	subs	r0, r0, r5
 8001990:	42a0      	cmp	r0, r4
 8001992:	d3fa      	bcc.n	800198a <HAL_Delay+0x16>
  {
  }
}
 8001994:	bd38      	pop	{r3, r4, r5, pc}
 8001996:	bf00      	nop
 8001998:	20000014 	.word	0x20000014

0800199c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800199c:	6803      	ldr	r3, [r0, #0]
 800199e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80019a0:	4770      	bx	lr

080019a2 <HAL_ADC_LevelOutOfWindowCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80019a2:	4770      	bx	lr

080019a4 <HAL_ADC_IRQHandler>:
{
 80019a4:	b510      	push	{r4, lr}
 80019a6:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80019a8:	6803      	ldr	r3, [r0, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	f012 0f20 	tst.w	r2, #32
 80019b0:	d018      	beq.n	80019e4 <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	f012 0f02 	tst.w	r2, #2
 80019b8:	d014      	beq.n	80019e4 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ba:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80019bc:	f012 0f10 	tst.w	r2, #16
 80019c0:	d103      	bne.n	80019ca <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019c2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80019c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c8:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80019d0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80019d4:	d038      	beq.n	8001a48 <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff fe66 	bl	80016a8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	f06f 0212 	mvn.w	r2, #18
 80019e2:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80019ec:	d022      	beq.n	8001a34 <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	f012 0f04 	tst.w	r2, #4
 80019f4:	d01e      	beq.n	8001a34 <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019f8:	f012 0f10 	tst.w	r2, #16
 80019fc:	d103      	bne.n	8001a06 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a04:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001a0c:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001a10:	d031      	beq.n	8001a76 <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a12:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a14:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a20:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001a24:	d024      	beq.n	8001a70 <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a26:	4620      	mov	r0, r4
 8001a28:	f000 fa48 	bl	8001ebc <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	f06f 020c 	mvn.w	r2, #12
 8001a32:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a3c:	d003      	beq.n	8001a46 <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f013 0f01 	tst.w	r3, #1
 8001a44:	d128      	bne.n	8001a98 <HAL_ADC_IRQHandler+0xf4>
}
 8001a46:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a48:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d1c3      	bne.n	80019d6 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	f022 0220 	bic.w	r2, r2, #32
 8001a54:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a5c:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a60:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001a64:	d1b7      	bne.n	80019d6 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a6e:	e7b2      	b.n	80019d6 <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a70:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a72:	2a00      	cmp	r2, #0
 8001a74:	d1d7      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a7c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a84:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a8c:	d1cb      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a96:	e7c6      	b.n	8001a26 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9e:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff ff7e 	bl	80019a2 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	f06f 0201 	mvn.w	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
}
 8001aae:	e7ca      	b.n	8001a46 <HAL_ADC_IRQHandler+0xa2>

08001ab0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ab0:	b430      	push	{r4, r5}
 8001ab2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f000 808b 	beq.w	8001bd8 <HAL_ADC_ConfigChannel+0x128>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aca:	684b      	ldr	r3, [r1, #4]
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d829      	bhi.n	8001b24 <HAL_ADC_ConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ad0:	6805      	ldr	r5, [r0, #0]
 8001ad2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001ad4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ad8:	3b05      	subs	r3, #5
 8001ada:	241f      	movs	r4, #31
 8001adc:	409c      	lsls	r4, r3
 8001ade:	ea20 0004 	bic.w	r0, r0, r4
 8001ae2:	680c      	ldr	r4, [r1, #0]
 8001ae4:	fa04 f303 	lsl.w	r3, r4, r3
 8001ae8:	4303      	orrs	r3, r0
 8001aea:	636b      	str	r3, [r5, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aec:	680b      	ldr	r3, [r1, #0]
 8001aee:	2b09      	cmp	r3, #9
 8001af0:	d938      	bls.n	8001b64 <HAL_ADC_ConfigChannel+0xb4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001af2:	6815      	ldr	r5, [r2, #0]
 8001af4:	68e8      	ldr	r0, [r5, #12]
 8001af6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001afa:	3b1e      	subs	r3, #30
 8001afc:	2407      	movs	r4, #7
 8001afe:	409c      	lsls	r4, r3
 8001b00:	ea20 0004 	bic.w	r0, r0, r4
 8001b04:	688c      	ldr	r4, [r1, #8]
 8001b06:	fa04 f303 	lsl.w	r3, r4, r3
 8001b0a:	4303      	orrs	r3, r0
 8001b0c:	60eb      	str	r3, [r5, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b0e:	680b      	ldr	r3, [r1, #0]
 8001b10:	3b10      	subs	r3, #16
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d934      	bls.n	8001b80 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b16:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001b1e:	b002      	add	sp, #8
 8001b20:	bc30      	pop	{r4, r5}
 8001b22:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d80e      	bhi.n	8001b46 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b28:	6805      	ldr	r5, [r0, #0]
 8001b2a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001b2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b30:	3b23      	subs	r3, #35	; 0x23
 8001b32:	241f      	movs	r4, #31
 8001b34:	409c      	lsls	r4, r3
 8001b36:	ea20 0004 	bic.w	r0, r0, r4
 8001b3a:	680c      	ldr	r4, [r1, #0]
 8001b3c:	fa04 f303 	lsl.w	r3, r4, r3
 8001b40:	4303      	orrs	r3, r0
 8001b42:	632b      	str	r3, [r5, #48]	; 0x30
 8001b44:	e7d2      	b.n	8001aec <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b46:	6805      	ldr	r5, [r0, #0]
 8001b48:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b4e:	3b41      	subs	r3, #65	; 0x41
 8001b50:	241f      	movs	r4, #31
 8001b52:	409c      	lsls	r4, r3
 8001b54:	ea20 0004 	bic.w	r0, r0, r4
 8001b58:	680c      	ldr	r4, [r1, #0]
 8001b5a:	fa04 f303 	lsl.w	r3, r4, r3
 8001b5e:	4303      	orrs	r3, r0
 8001b60:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001b62:	e7c3      	b.n	8001aec <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b64:	6815      	ldr	r5, [r2, #0]
 8001b66:	6928      	ldr	r0, [r5, #16]
 8001b68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b6c:	2407      	movs	r4, #7
 8001b6e:	409c      	lsls	r4, r3
 8001b70:	ea20 0004 	bic.w	r0, r0, r4
 8001b74:	688c      	ldr	r4, [r1, #8]
 8001b76:	fa04 f303 	lsl.w	r3, r4, r3
 8001b7a:	4303      	orrs	r3, r0
 8001b7c:	612b      	str	r3, [r5, #16]
 8001b7e:	e7c6      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001b80:	6813      	ldr	r3, [r2, #0]
 8001b82:	4816      	ldr	r0, [pc, #88]	; (8001bdc <HAL_ADC_ConfigChannel+0x12c>)
 8001b84:	4283      	cmp	r3, r0
 8001b86:	d005      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b88:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001b8a:	f043 0320 	orr.w	r3, r3, #32
 8001b8e:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001b90:	2001      	movs	r0, #1
 8001b92:	e7c1      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b94:	6898      	ldr	r0, [r3, #8]
 8001b96:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b9c:	6898      	ldr	r0, [r3, #8]
 8001b9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001ba2:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ba4:	680b      	ldr	r3, [r1, #0]
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d001      	beq.n	8001bae <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001baa:	2000      	movs	r0, #0
 8001bac:	e7b4      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_ADC_ConfigChannel+0x130>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	490c      	ldr	r1, [pc, #48]	; (8001be4 <HAL_ADC_ConfigChannel+0x134>)
 8001bb4:	fba1 1303 	umull	r1, r3, r1, r3
 8001bb8:	0c9b      	lsrs	r3, r3, #18
 8001bba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bbe:	0059      	lsls	r1, r3, #1
 8001bc0:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001bc2:	e002      	b.n	8001bca <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 8001bc4:	9b01      	ldr	r3, [sp, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001bca:	9b01      	ldr	r3, [sp, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f9      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	e7a1      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x68>
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	e79f      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8001bd8:	2002      	movs	r0, #2
 8001bda:	e7a0      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x6e>
 8001bdc:	40012400 	.word	0x40012400
 8001be0:	20000010 	.word	0x20000010
 8001be4:	431bde83 	.word	0x431bde83

08001be8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001be8:	b530      	push	{r4, r5, lr}
 8001bea:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bf0:	6803      	ldr	r3, [r0, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	f012 0f01 	tst.w	r2, #1
 8001bf8:	d12e      	bne.n	8001c58 <ADC_Enable+0x70>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	f042 0201 	orr.w	r2, r2, #1
 8001c00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <ADC_Enable+0x78>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <ADC_Enable+0x7c>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	0c9b      	lsrs	r3, r3, #18
 8001c0e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001c10:	e002      	b.n	8001c18 <ADC_Enable+0x30>
    {
      wait_loop_index--;
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001c18:	9b01      	ldr	r3, [sp, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f9      	bne.n	8001c12 <ADC_Enable+0x2a>
 8001c1e:	4604      	mov	r4, r0
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c20:	f7ff fea2 	bl	8001968 <HAL_GetTick>
 8001c24:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f013 0f01 	tst.w	r3, #1
 8001c2e:	d111      	bne.n	8001c54 <ADC_Enable+0x6c>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c30:	f7ff fe9a 	bl	8001968 <HAL_GetTick>
 8001c34:	1b40      	subs	r0, r0, r5
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d9f5      	bls.n	8001c26 <ADC_Enable+0x3e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	62e3      	str	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      
        return HAL_ERROR;
 8001c50:	2001      	movs	r0, #1
 8001c52:	e002      	b.n	8001c5a <ADC_Enable+0x72>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c54:	2000      	movs	r0, #0
 8001c56:	e000      	b.n	8001c5a <ADC_Enable+0x72>
 8001c58:	2000      	movs	r0, #0
}
 8001c5a:	b003      	add	sp, #12
 8001c5c:	bd30      	pop	{r4, r5, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000010 	.word	0x20000010
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8001c68:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d06f      	beq.n	8001d50 <HAL_ADC_Start_IT+0xe8>
{
 8001c70:	b510      	push	{r4, lr}
 8001c72:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001c74:	2301      	movs	r3, #1
 8001c76:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001c7a:	f7ff ffb5 	bl	8001be8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001c7e:	4602      	mov	r2, r0
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d160      	bne.n	8001d46 <HAL_ADC_Start_IT+0xde>
    ADC_STATE_CLR_SET(hadc->State,
 8001c84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	4930      	ldr	r1, [pc, #192]	; (8001d58 <HAL_ADC_Start_IT+0xf0>)
 8001c98:	428b      	cmp	r3, r1
 8001c9a:	d02c      	beq.n	8001cf6 <HAL_ADC_Start_IT+0x8e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c9e:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8001ca2:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ca4:	6859      	ldr	r1, [r3, #4]
 8001ca6:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001caa:	d005      	beq.n	8001cb8 <HAL_ADC_Start_IT+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001cae:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001cb2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001cb6:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001cba:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8001cbe:	d030      	beq.n	8001d22 <HAL_ADC_Start_IT+0xba>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001cc2:	f021 0106 	bic.w	r1, r1, #6
 8001cc6:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cce:	f06f 0102 	mvn.w	r1, #2
 8001cd2:	6019      	str	r1, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001cd4:	6821      	ldr	r1, [r4, #0]
 8001cd6:	684b      	ldr	r3, [r1, #4]
 8001cd8:	f043 0320 	orr.w	r3, r3, #32
 8001cdc:	604b      	str	r3, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 8001ce6:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 8001cea:	d01d      	beq.n	8001d28 <HAL_ADC_Start_IT+0xc0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cec:	6899      	ldr	r1, [r3, #8]
 8001cee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001cf2:	6099      	str	r1, [r3, #8]
 8001cf4:	e02a      	b.n	8001d4c <HAL_ADC_Start_IT+0xe4>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cf6:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8001cfa:	6849      	ldr	r1, [r1, #4]
 8001cfc:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8001d00:	d0cc      	beq.n	8001c9c <HAL_ADC_Start_IT+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001d04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001d08:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d0a:	4914      	ldr	r1, [pc, #80]	; (8001d5c <HAL_ADC_Start_IT+0xf4>)
 8001d0c:	6849      	ldr	r1, [r1, #4]
 8001d0e:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001d12:	d0d1      	beq.n	8001cb8 <HAL_ADC_Start_IT+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001d16:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001d1a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001d1e:	62a1      	str	r1, [r4, #40]	; 0x28
 8001d20:	e7ca      	b.n	8001cb8 <HAL_ADC_Start_IT+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8001d22:	2100      	movs	r1, #0
 8001d24:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001d26:	e7cf      	b.n	8001cc8 <HAL_ADC_Start_IT+0x60>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d28:	490b      	ldr	r1, [pc, #44]	; (8001d58 <HAL_ADC_Start_IT+0xf0>)
 8001d2a:	428b      	cmp	r3, r1
 8001d2c:	d004      	beq.n	8001d38 <HAL_ADC_Start_IT+0xd0>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d2e:	6899      	ldr	r1, [r3, #8]
 8001d30:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8001d34:	6099      	str	r1, [r3, #8]
 8001d36:	e009      	b.n	8001d4c <HAL_ADC_Start_IT+0xe4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d38:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8001d3c:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d3e:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8001d42:	d1d3      	bne.n	8001cec <HAL_ADC_Start_IT+0x84>
 8001d44:	e7f3      	b.n	8001d2e <HAL_ADC_Start_IT+0xc6>
    __HAL_UNLOCK(hadc);
 8001d46:	2300      	movs	r3, #0
 8001d48:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001d50:	2202      	movs	r2, #2
}
 8001d52:	4610      	mov	r0, r2
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40012800 	.word	0x40012800
 8001d5c:	40012400 	.word	0x40012400

08001d60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d60:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d62:	6803      	ldr	r3, [r0, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	f012 0f01 	tst.w	r2, #1
 8001d6a:	d101      	bne.n	8001d70 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d6c:	2000      	movs	r0, #0
}
 8001d6e:	bd38      	pop	{r3, r4, r5, pc}
 8001d70:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001d7a:	f7ff fdf5 	bl	8001968 <HAL_GetTick>
 8001d7e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f013 0f01 	tst.w	r3, #1
 8001d88:	d00e      	beq.n	8001da8 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d8a:	f7ff fded 	bl	8001968 <HAL_GetTick>
 8001d8e:	1b40      	subs	r0, r0, r5
 8001d90:	2802      	cmp	r0, #2
 8001d92:	d9f5      	bls.n	8001d80 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
 8001da6:	e7e2      	b.n	8001d6e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001da8:	2000      	movs	r0, #0
 8001daa:	e7e0      	b.n	8001d6e <ADC_ConversionStop_Disable+0xe>

08001dac <HAL_ADC_Init>:
  if(hadc == NULL)
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d07f      	beq.n	8001eb0 <HAL_ADC_Init+0x104>
{
 8001db0:	b538      	push	{r3, r4, r5, lr}
 8001db2:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d033      	beq.n	8001e22 <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f7ff ffd0 	bl	8001d60 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dc2:	f013 0310 	ands.w	r3, r3, #16
 8001dc6:	d16d      	bne.n	8001ea4 <HAL_ADC_Init+0xf8>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d16b      	bne.n	8001ea4 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001dce:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001dd2:	f022 0202 	bic.w	r2, r2, #2
 8001dd6:	f042 0202 	orr.w	r2, r2, #2
 8001dda:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ddc:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dde:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001de0:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001de2:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001de4:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001de8:	68a1      	ldr	r1, [r4, #8]
 8001dea:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001dee:	d021      	beq.n	8001e34 <HAL_ADC_Init+0x88>
 8001df0:	2901      	cmp	r1, #1
 8001df2:	d01c      	beq.n	8001e2e <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001df4:	7d21      	ldrb	r1, [r4, #20]
 8001df6:	2901      	cmp	r1, #1
 8001df8:	d01f      	beq.n	8001e3a <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 8001dfa:	6825      	ldr	r5, [r4, #0]
 8001dfc:	6869      	ldr	r1, [r5, #4]
 8001dfe:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8001e02:	430b      	orrs	r3, r1
 8001e04:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001e06:	6821      	ldr	r1, [r4, #0]
 8001e08:	688d      	ldr	r5, [r1, #8]
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_ADC_Init+0x108>)
 8001e0c:	402b      	ands	r3, r5
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e12:	68a3      	ldr	r3, [r4, #8]
 8001e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e18:	d020      	beq.n	8001e5c <HAL_ADC_Init+0xb0>
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d01e      	beq.n	8001e5c <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 8001e1e:	2100      	movs	r1, #0
 8001e20:	e01f      	b.n	8001e62 <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 8001e22:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001e24:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001e28:	f7ff fc66 	bl	80016f8 <HAL_ADC_MspInit>
 8001e2c:	e7c5      	b.n	8001dba <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e32:	e7df      	b.n	8001df4 <HAL_ADC_Init+0x48>
 8001e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e38:	e7dc      	b.n	8001df4 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e3a:	b935      	cbnz	r5, 8001e4a <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e3c:	69a1      	ldr	r1, [r4, #24]
 8001e3e:	3901      	subs	r1, #1
 8001e40:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8001e44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e48:	e7d7      	b.n	8001dfa <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e4c:	f041 0120 	orr.w	r1, r1, #32
 8001e50:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e54:	f041 0101 	orr.w	r1, r1, #1
 8001e58:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001e5a:	e7ce      	b.n	8001dfa <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e5c:	6923      	ldr	r3, [r4, #16]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001e62:	6825      	ldr	r5, [r4, #0]
 8001e64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001e66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	6899      	ldr	r1, [r3, #8]
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_ADC_Init+0x10c>)
 8001e74:	400b      	ands	r3, r1
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d00b      	beq.n	8001e92 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e7c:	f023 0312 	bic.w	r3, r3, #18
 8001e80:	f043 0310 	orr.w	r3, r3, #16
 8001e84:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8001e8e:	2001      	movs	r0, #1
 8001e90:	e00d      	b.n	8001eae <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8001e92:	2300      	movs	r3, #0
 8001e94:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001e96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e98:	f023 0303 	bic.w	r3, r3, #3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ea2:	e004      	b.n	8001eae <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ea6:	f043 0310 	orr.w	r3, r3, #16
 8001eaa:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
}
 8001eae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001eb0:	2001      	movs	r0, #1
}
 8001eb2:	4770      	bx	lr
 8001eb4:	ffe1f7fd 	.word	0xffe1f7fd
 8001eb8:	ff1f0efe 	.word	0xff1f0efe

08001ebc <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ec2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ecc:	0200      	lsls	r0, r0, #8
 8001ece:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001ed4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001ed8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001edc:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_NVIC_SetPriority+0x60>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eee:	f1c3 0407 	rsb	r4, r3, #7
 8001ef2:	2c04      	cmp	r4, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef8:	1d1d      	adds	r5, r3, #4
 8001efa:	2d06      	cmp	r5, #6
 8001efc:	d918      	bls.n	8001f30 <HAL_NVIC_SetPriority+0x4c>
 8001efe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 35ff 	mov.w	r5, #4294967295
 8001f04:	fa05 f404 	lsl.w	r4, r5, r4
 8001f08:	ea21 0104 	bic.w	r1, r1, r4
 8001f0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0e:	fa05 f303 	lsl.w	r3, r5, r3
 8001f12:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f16:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	db0b      	blt.n	8001f34 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	0109      	lsls	r1, r1, #4
 8001f1e:	b2c9      	uxtb	r1, r1
 8001f20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f2c:	bc30      	pop	{r4, r5}
 8001f2e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f30:	2300      	movs	r3, #0
 8001f32:	e7e5      	b.n	8001f00 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	f000 000f 	and.w	r0, r0, #15
 8001f38:	0109      	lsls	r1, r1, #4
 8001f3a:	b2c9      	uxtb	r1, r1
 8001f3c:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <HAL_NVIC_SetPriority+0x64>)
 8001f3e:	5419      	strb	r1, [r3, r0]
 8001f40:	e7f4      	b.n	8001f2c <HAL_NVIC_SetPriority+0x48>
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	e000ed14 	.word	0xe000ed14

08001f4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	db07      	blt.n	8001f60 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f50:	f000 021f 	and.w	r2, r0, #31
 8001f54:	0940      	lsrs	r0, r0, #5
 8001f56:	2301      	movs	r3, #1
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	4a02      	ldr	r2, [pc, #8]	; (8001f64 <HAL_NVIC_EnableIRQ+0x18>)
 8001f5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	3801      	subs	r0, #1
 8001f6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f6e:	d20a      	bcs.n	8001f86 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_SYSTICK_Config+0x24>)
 8001f72:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_SYSTICK_Config+0x28>)
 8001f76:	21f0      	movs	r1, #240	; 0xf0
 8001f78:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f94:	b4f0      	push	{r4, r5, r6, r7}
 8001f96:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f98:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001f9a:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9c:	e0a2      	b.n	80020e4 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f9e:	2d00      	cmp	r5, #0
 8001fa0:	d05a      	beq.n	8002058 <HAL_GPIO_Init+0xc4>
 8001fa2:	2d01      	cmp	r5, #1
 8001fa4:	d100      	bne.n	8001fa8 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fa6:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa8:	2bff      	cmp	r3, #255	; 0xff
 8001faa:	d869      	bhi.n	8002080 <HAL_GPIO_Init+0xec>
 8001fac:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d869      	bhi.n	8002086 <HAL_GPIO_Init+0xf2>
 8001fb2:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb4:	f8dc 4000 	ldr.w	r4, [ip]
 8001fb8:	270f      	movs	r7, #15
 8001fba:	40af      	lsls	r7, r5
 8001fbc:	ea24 0407 	bic.w	r4, r4, r7
 8001fc0:	fa06 f505 	lsl.w	r5, r6, r5
 8001fc4:	432c      	orrs	r4, r5
 8001fc6:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fca:	684c      	ldr	r4, [r1, #4]
 8001fcc:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001fd0:	f000 8087 	beq.w	80020e2 <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd4:	4c5f      	ldr	r4, [pc, #380]	; (8002154 <HAL_GPIO_Init+0x1c0>)
 8001fd6:	69a5      	ldr	r5, [r4, #24]
 8001fd8:	f045 0501 	orr.w	r5, r5, #1
 8001fdc:	61a5      	str	r5, [r4, #24]
 8001fde:	69a4      	ldr	r4, [r4, #24]
 8001fe0:	f004 0401 	and.w	r4, r4, #1
 8001fe4:	9401      	str	r4, [sp, #4]
 8001fe6:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe8:	0895      	lsrs	r5, r2, #2
 8001fea:	1caf      	adds	r7, r5, #2
 8001fec:	4c5a      	ldr	r4, [pc, #360]	; (8002158 <HAL_GPIO_Init+0x1c4>)
 8001fee:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ff2:	f002 0703 	and.w	r7, r2, #3
 8001ff6:	00bf      	lsls	r7, r7, #2
 8001ff8:	f04f 0c0f 	mov.w	ip, #15
 8001ffc:	fa0c fc07 	lsl.w	ip, ip, r7
 8002000:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002004:	4c55      	ldr	r4, [pc, #340]	; (800215c <HAL_GPIO_Init+0x1c8>)
 8002006:	42a0      	cmp	r0, r4
 8002008:	d043      	beq.n	8002092 <HAL_GPIO_Init+0xfe>
 800200a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800200e:	42a0      	cmp	r0, r4
 8002010:	f000 8081 	beq.w	8002116 <HAL_GPIO_Init+0x182>
 8002014:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002018:	42a0      	cmp	r0, r4
 800201a:	d07e      	beq.n	800211a <HAL_GPIO_Init+0x186>
 800201c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002020:	42a0      	cmp	r0, r4
 8002022:	d034      	beq.n	800208e <HAL_GPIO_Init+0xfa>
 8002024:	2404      	movs	r4, #4
 8002026:	e035      	b.n	8002094 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8002028:	4f4d      	ldr	r7, [pc, #308]	; (8002160 <HAL_GPIO_Init+0x1cc>)
 800202a:	42bd      	cmp	r5, r7
 800202c:	d014      	beq.n	8002058 <HAL_GPIO_Init+0xc4>
 800202e:	d90b      	bls.n	8002048 <HAL_GPIO_Init+0xb4>
 8002030:	4f4c      	ldr	r7, [pc, #304]	; (8002164 <HAL_GPIO_Init+0x1d0>)
 8002032:	42bd      	cmp	r5, r7
 8002034:	d010      	beq.n	8002058 <HAL_GPIO_Init+0xc4>
 8002036:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800203a:	42bd      	cmp	r5, r7
 800203c:	d00c      	beq.n	8002058 <HAL_GPIO_Init+0xc4>
 800203e:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002042:	42bd      	cmp	r5, r7
 8002044:	d1b0      	bne.n	8001fa8 <HAL_GPIO_Init+0x14>
 8002046:	e007      	b.n	8002058 <HAL_GPIO_Init+0xc4>
 8002048:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800204c:	42bd      	cmp	r5, r7
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0xc4>
 8002050:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002054:	42bd      	cmp	r5, r7
 8002056:	d1a7      	bne.n	8001fa8 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002058:	688d      	ldr	r5, [r1, #8]
 800205a:	b17d      	cbz	r5, 800207c <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800205c:	2d01      	cmp	r5, #1
 800205e:	d008      	beq.n	8002072 <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8002060:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002062:	2608      	movs	r6, #8
 8002064:	e7a0      	b.n	8001fa8 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002066:	68ce      	ldr	r6, [r1, #12]
 8002068:	3608      	adds	r6, #8
          break;
 800206a:	e79d      	b.n	8001fa8 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800206c:	68ce      	ldr	r6, [r1, #12]
 800206e:	360c      	adds	r6, #12
          break;
 8002070:	e79a      	b.n	8001fa8 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8002072:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002074:	2608      	movs	r6, #8
 8002076:	e797      	b.n	8001fa8 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002078:	2600      	movs	r6, #0
 800207a:	e795      	b.n	8001fa8 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800207c:	2604      	movs	r6, #4
 800207e:	e793      	b.n	8001fa8 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002080:	f100 0c04 	add.w	ip, r0, #4
 8002084:	e793      	b.n	8001fae <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002086:	f1a2 0508 	sub.w	r5, r2, #8
 800208a:	00ad      	lsls	r5, r5, #2
 800208c:	e792      	b.n	8001fb4 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800208e:	2403      	movs	r4, #3
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x100>
 8002092:	2400      	movs	r4, #0
 8002094:	40bc      	lsls	r4, r7
 8002096:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 800209a:	3502      	adds	r5, #2
 800209c:	4f2e      	ldr	r7, [pc, #184]	; (8002158 <HAL_GPIO_Init+0x1c4>)
 800209e:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a2:	684c      	ldr	r4, [r1, #4]
 80020a4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80020a8:	d039      	beq.n	800211e <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020aa:	4d2f      	ldr	r5, [pc, #188]	; (8002168 <HAL_GPIO_Init+0x1d4>)
 80020ac:	682c      	ldr	r4, [r5, #0]
 80020ae:	431c      	orrs	r4, r3
 80020b0:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b2:	684c      	ldr	r4, [r1, #4]
 80020b4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80020b8:	d037      	beq.n	800212a <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ba:	4d2b      	ldr	r5, [pc, #172]	; (8002168 <HAL_GPIO_Init+0x1d4>)
 80020bc:	686c      	ldr	r4, [r5, #4]
 80020be:	431c      	orrs	r4, r3
 80020c0:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c2:	684c      	ldr	r4, [r1, #4]
 80020c4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80020c8:	d035      	beq.n	8002136 <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ca:	4d27      	ldr	r5, [pc, #156]	; (8002168 <HAL_GPIO_Init+0x1d4>)
 80020cc:	68ac      	ldr	r4, [r5, #8]
 80020ce:	431c      	orrs	r4, r3
 80020d0:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d2:	684c      	ldr	r4, [r1, #4]
 80020d4:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 80020d8:	d033      	beq.n	8002142 <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020da:	4d23      	ldr	r5, [pc, #140]	; (8002168 <HAL_GPIO_Init+0x1d4>)
 80020dc:	68ec      	ldr	r4, [r5, #12]
 80020de:	4323      	orrs	r3, r4
 80020e0:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80020e2:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e4:	680b      	ldr	r3, [r1, #0]
 80020e6:	fa33 f402 	lsrs.w	r4, r3, r2
 80020ea:	d030      	beq.n	800214e <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 80020ec:	2401      	movs	r4, #1
 80020ee:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f0:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 80020f2:	429c      	cmp	r4, r3
 80020f4:	d1f5      	bne.n	80020e2 <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 80020f6:	684d      	ldr	r5, [r1, #4]
 80020f8:	2d12      	cmp	r5, #18
 80020fa:	d0b7      	beq.n	800206c <HAL_GPIO_Init+0xd8>
 80020fc:	d894      	bhi.n	8002028 <HAL_GPIO_Init+0x94>
 80020fe:	2d02      	cmp	r5, #2
 8002100:	d0b1      	beq.n	8002066 <HAL_GPIO_Init+0xd2>
 8002102:	f67f af4c 	bls.w	8001f9e <HAL_GPIO_Init+0xa>
 8002106:	2d03      	cmp	r5, #3
 8002108:	d0b6      	beq.n	8002078 <HAL_GPIO_Init+0xe4>
 800210a:	2d11      	cmp	r5, #17
 800210c:	f47f af4c 	bne.w	8001fa8 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002110:	68ce      	ldr	r6, [r1, #12]
 8002112:	3604      	adds	r6, #4
          break;
 8002114:	e748      	b.n	8001fa8 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002116:	2401      	movs	r4, #1
 8002118:	e7bc      	b.n	8002094 <HAL_GPIO_Init+0x100>
 800211a:	2402      	movs	r4, #2
 800211c:	e7ba      	b.n	8002094 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800211e:	4d12      	ldr	r5, [pc, #72]	; (8002168 <HAL_GPIO_Init+0x1d4>)
 8002120:	682c      	ldr	r4, [r5, #0]
 8002122:	ea24 0403 	bic.w	r4, r4, r3
 8002126:	602c      	str	r4, [r5, #0]
 8002128:	e7c3      	b.n	80020b2 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212a:	4d0f      	ldr	r5, [pc, #60]	; (8002168 <HAL_GPIO_Init+0x1d4>)
 800212c:	686c      	ldr	r4, [r5, #4]
 800212e:	ea24 0403 	bic.w	r4, r4, r3
 8002132:	606c      	str	r4, [r5, #4]
 8002134:	e7c5      	b.n	80020c2 <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002136:	4d0c      	ldr	r5, [pc, #48]	; (8002168 <HAL_GPIO_Init+0x1d4>)
 8002138:	68ac      	ldr	r4, [r5, #8]
 800213a:	ea24 0403 	bic.w	r4, r4, r3
 800213e:	60ac      	str	r4, [r5, #8]
 8002140:	e7c7      	b.n	80020d2 <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002142:	4d09      	ldr	r5, [pc, #36]	; (8002168 <HAL_GPIO_Init+0x1d4>)
 8002144:	68ec      	ldr	r4, [r5, #12]
 8002146:	ea24 0303 	bic.w	r3, r4, r3
 800214a:	60eb      	str	r3, [r5, #12]
 800214c:	e7c9      	b.n	80020e2 <HAL_GPIO_Init+0x14e>
  }
}
 800214e:	b002      	add	sp, #8
 8002150:	bcf0      	pop	{r4, r5, r6, r7}
 8002152:	4770      	bx	lr
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	40010800 	.word	0x40010800
 8002160:	10210000 	.word	0x10210000
 8002164:	10310000 	.word	0x10310000
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 800216c:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800216e:	e068      	b.n	8002242 <HAL_GPIO_DeInit+0xd6>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002170:	2603      	movs	r6, #3
 8002172:	e000      	b.n	8002176 <HAL_GPIO_DeInit+0xa>
 8002174:	2600      	movs	r6, #0
 8002176:	fa06 f404 	lsl.w	r4, r6, r4
 800217a:	42ac      	cmp	r4, r5
 800217c:	d03f      	beq.n	80021fe <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d855      	bhi.n	800222e <HAL_GPIO_DeInit+0xc2>
 8002182:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002184:	2bff      	cmp	r3, #255	; 0xff
 8002186:	d855      	bhi.n	8002234 <HAL_GPIO_DeInit+0xc8>
 8002188:	0097      	lsls	r7, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800218a:	f8dc 4000 	ldr.w	r4, [ip]
 800218e:	260f      	movs	r6, #15
 8002190:	40be      	lsls	r6, r7
 8002192:	ea24 0406 	bic.w	r4, r4, r6
 8002196:	2504      	movs	r5, #4
 8002198:	40bd      	lsls	r5, r7
 800219a:	432c      	orrs	r4, r5
 800219c:	f8cc 4000 	str.w	r4, [ip]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80021a0:	68c4      	ldr	r4, [r0, #12]
 80021a2:	ea24 0303 	bic.w	r3, r4, r3
 80021a6:	60c3      	str	r3, [r0, #12]
    }

    position++;
 80021a8:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 80021aa:	fa31 f302 	lsrs.w	r3, r1, r2
 80021ae:	d045      	beq.n	800223c <HAL_GPIO_DeInit+0xd0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80021b0:	2301      	movs	r3, #1
 80021b2:	4093      	lsls	r3, r2
    if (iocurrent)
 80021b4:	400b      	ands	r3, r1
 80021b6:	d0f7      	beq.n	80021a8 <HAL_GPIO_DeInit+0x3c>
      tmp = AFIO->EXTICR[position >> 2u];
 80021b8:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 80021bc:	f10c 0502 	add.w	r5, ip, #2
 80021c0:	4c25      	ldr	r4, [pc, #148]	; (8002258 <HAL_GPIO_DeInit+0xec>)
 80021c2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80021c6:	f002 0403 	and.w	r4, r2, #3
 80021ca:	00a4      	lsls	r4, r4, #2
 80021cc:	260f      	movs	r6, #15
 80021ce:	fa06 f704 	lsl.w	r7, r6, r4
 80021d2:	403d      	ands	r5, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80021d4:	4e21      	ldr	r6, [pc, #132]	; (800225c <HAL_GPIO_DeInit+0xf0>)
 80021d6:	42b0      	cmp	r0, r6
 80021d8:	d0cc      	beq.n	8002174 <HAL_GPIO_DeInit+0x8>
 80021da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021de:	42b0      	cmp	r0, r6
 80021e0:	d009      	beq.n	80021f6 <HAL_GPIO_DeInit+0x8a>
 80021e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021e6:	42b0      	cmp	r0, r6
 80021e8:	d007      	beq.n	80021fa <HAL_GPIO_DeInit+0x8e>
 80021ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021ee:	42b0      	cmp	r0, r6
 80021f0:	d0be      	beq.n	8002170 <HAL_GPIO_DeInit+0x4>
 80021f2:	2604      	movs	r6, #4
 80021f4:	e7bf      	b.n	8002176 <HAL_GPIO_DeInit+0xa>
 80021f6:	2601      	movs	r6, #1
 80021f8:	e7bd      	b.n	8002176 <HAL_GPIO_DeInit+0xa>
 80021fa:	2602      	movs	r6, #2
 80021fc:	e7bb      	b.n	8002176 <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80021fe:	4d16      	ldr	r5, [pc, #88]	; (8002258 <HAL_GPIO_DeInit+0xec>)
 8002200:	f10c 0402 	add.w	r4, ip, #2
 8002204:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8002208:	ea26 0607 	bic.w	r6, r6, r7
 800220c:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002210:	4c13      	ldr	r4, [pc, #76]	; (8002260 <HAL_GPIO_DeInit+0xf4>)
 8002212:	6826      	ldr	r6, [r4, #0]
 8002214:	43dd      	mvns	r5, r3
 8002216:	402e      	ands	r6, r5
 8002218:	6026      	str	r6, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800221a:	6866      	ldr	r6, [r4, #4]
 800221c:	402e      	ands	r6, r5
 800221e:	6066      	str	r6, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002220:	68a6      	ldr	r6, [r4, #8]
 8002222:	402e      	ands	r6, r5
 8002224:	60a6      	str	r6, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002226:	68e6      	ldr	r6, [r4, #12]
 8002228:	4035      	ands	r5, r6
 800222a:	60e5      	str	r5, [r4, #12]
 800222c:	e7a7      	b.n	800217e <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800222e:	f100 0c04 	add.w	ip, r0, #4
 8002232:	e7a7      	b.n	8002184 <HAL_GPIO_DeInit+0x18>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002234:	f1a2 0508 	sub.w	r5, r2, #8
 8002238:	00af      	lsls	r7, r5, #2
 800223a:	e7a6      	b.n	800218a <HAL_GPIO_DeInit+0x1e>
  }
}
 800223c:	bcf0      	pop	{r4, r5, r6, r7}
 800223e:	4770      	bx	lr
    position++;
 8002240:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8002242:	fa31 f302 	lsrs.w	r3, r1, r2
 8002246:	d005      	beq.n	8002254 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002248:	2301      	movs	r3, #1
 800224a:	4093      	lsls	r3, r2
    if (iocurrent)
 800224c:	400b      	ands	r3, r1
 800224e:	d0f7      	beq.n	8002240 <HAL_GPIO_DeInit+0xd4>
{
 8002250:	b4f0      	push	{r4, r5, r6, r7}
 8002252:	e7b1      	b.n	80021b8 <HAL_GPIO_DeInit+0x4c>
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000
 800225c:	40010800 	.word	0x40010800
 8002260:	40010400 	.word	0x40010400

08002264 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002264:	6883      	ldr	r3, [r0, #8]
 8002266:	4219      	tst	r1, r3
 8002268:	d101      	bne.n	800226e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800226a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800226c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800226e:	2001      	movs	r0, #1
 8002270:	4770      	bx	lr

08002272 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002272:	b912      	cbnz	r2, 800227a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002274:	0409      	lsls	r1, r1, #16
 8002276:	6101      	str	r1, [r0, #16]
  }
}
 8002278:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800227a:	6101      	str	r1, [r0, #16]
 800227c:	4770      	bx	lr

0800227e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800227e:	6803      	ldr	r3, [r0, #0]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002286:	d011      	beq.n	80022ac <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800228c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800228e:	2300      	movs	r3, #0
 8002290:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002292:	2220      	movs	r2, #32
 8002294:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002298:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800229c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800229e:	f042 0204 	orr.w	r2, r2, #4
 80022a2:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
 80022aa:	4770      	bx	lr
  }
  return HAL_OK;
 80022ac:	2000      	movs	r0, #0
}
 80022ae:	4770      	bx	lr

080022b0 <I2C_WaitOnFlagUntilTimeout>:
{
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	4606      	mov	r6, r0
 80022b4:	460c      	mov	r4, r1
 80022b6:	4617      	mov	r7, r2
 80022b8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ba:	e022      	b.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022bc:	f7ff fb54 	bl	8001968 <HAL_GetTick>
 80022c0:	9b06      	ldr	r3, [sp, #24]
 80022c2:	1ac0      	subs	r0, r0, r3
 80022c4:	42a8      	cmp	r0, r5
 80022c6:	d800      	bhi.n	80022ca <I2C_WaitOnFlagUntilTimeout+0x1a>
 80022c8:	b9dd      	cbnz	r5, 8002302 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022ce:	2220      	movs	r2, #32
 80022d0:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022d4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80022e0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
 80022e6:	e01a      	b.n	800231e <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e8:	6833      	ldr	r3, [r6, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	ea24 0303 	bic.w	r3, r4, r3
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	429f      	cmp	r7, r3
 80022fa:	d10f      	bne.n	800231c <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80022fc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002300:	d1dc      	bne.n	80022bc <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002302:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002306:	2b01      	cmp	r3, #1
 8002308:	d0ee      	beq.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0x38>
 800230a:	6833      	ldr	r3, [r6, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	ea24 0303 	bic.w	r3, r4, r3
 8002312:	b29b      	uxth	r3, r3
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	e7ed      	b.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 800231c:	2000      	movs	r0, #0
}
 800231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002320 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002322:	4604      	mov	r4, r0
 8002324:	460d      	mov	r5, r1
 8002326:	4616      	mov	r6, r2
 8002328:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800232a:	e03c      	b.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800233a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800233c:	2300      	movs	r3, #0
 800233e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002340:	2220      	movs	r2, #32
 8002342:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002346:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800234a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800234c:	f042 0204 	orr.w	r2, r2, #4
 8002350:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002352:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8002356:	2001      	movs	r0, #1
 8002358:	e033      	b.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235a:	f7ff fb05 	bl	8001968 <HAL_GetTick>
 800235e:	1bc0      	subs	r0, r0, r7
 8002360:	42b0      	cmp	r0, r6
 8002362:	d800      	bhi.n	8002366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8002364:	b9fe      	cbnz	r6, 80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002366:	2300      	movs	r3, #0
 8002368:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800236a:	2220      	movs	r2, #32
 800236c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002370:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002376:	f042 0220 	orr.w	r2, r2, #32
 800237a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800237c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002380:	2001      	movs	r0, #1
 8002382:	e01e      	b.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	ea25 0303 	bic.w	r3, r5, r3
 800238c:	b29b      	uxth	r3, r3
 800238e:	3300      	adds	r3, #0
 8002390:	bf18      	it	ne
 8002392:	2301      	movne	r3, #1
 8002394:	b1a3      	cbz	r3, 80023c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800239e:	d1c5      	bne.n	800232c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80023a0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80023a4:	d1d9      	bne.n	800235a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d0ea      	beq.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	ea25 0303 	bic.w	r3, r5, r3
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3300      	adds	r3, #0
 80023ba:	bf18      	it	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	e7e9      	b.n	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80023c0:	2000      	movs	r0, #0
}
 80023c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023c4 <I2C_MasterRequestWrite>:
{
 80023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c6:	b083      	sub	sp, #12
 80023c8:	4604      	mov	r4, r0
 80023ca:	460f      	mov	r7, r1
 80023cc:	4615      	mov	r5, r2
 80023ce:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d00d      	beq.n	80023f2 <I2C_MasterRequestWrite+0x2e>
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d00b      	beq.n	80023f2 <I2C_MasterRequestWrite+0x2e>
 80023da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023de:	d008      	beq.n	80023f2 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d10a      	bne.n	80023fc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e6:	6802      	ldr	r2, [r0, #0]
 80023e8:	6813      	ldr	r3, [r2, #0]
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e004      	b.n	80023fc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f2:	6822      	ldr	r2, [r4, #0]
 80023f4:	6813      	ldr	r3, [r2, #0]
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023fc:	9600      	str	r6, [sp, #0]
 80023fe:	462b      	mov	r3, r5
 8002400:	2200      	movs	r2, #0
 8002402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff ff52 	bl	80022b0 <I2C_WaitOnFlagUntilTimeout>
 800240c:	b158      	cbz	r0, 8002426 <I2C_MasterRequestWrite+0x62>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002416:	d02b      	beq.n	8002470 <I2C_MasterRequestWrite+0xac>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
}
 8002420:	4618      	mov	r0, r3
 8002422:	b003      	add	sp, #12
 8002424:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002426:	6923      	ldr	r3, [r4, #16]
 8002428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800242c:	d10e      	bne.n	800244c <I2C_MasterRequestWrite+0x88>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002434:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002436:	4633      	mov	r3, r6
 8002438:	462a      	mov	r2, r5
 800243a:	490f      	ldr	r1, [pc, #60]	; (8002478 <I2C_MasterRequestWrite+0xb4>)
 800243c:	4620      	mov	r0, r4
 800243e:	f7ff ff6f 	bl	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2800      	cmp	r0, #0
 8002446:	d0eb      	beq.n	8002420 <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e7e9      	b.n	8002420 <I2C_MasterRequestWrite+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800244c:	11fb      	asrs	r3, r7, #7
 800244e:	6822      	ldr	r2, [r4, #0]
 8002450:	f003 0306 	and.w	r3, r3, #6
 8002454:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002458:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800245a:	4633      	mov	r3, r6
 800245c:	462a      	mov	r2, r5
 800245e:	4907      	ldr	r1, [pc, #28]	; (800247c <I2C_MasterRequestWrite+0xb8>)
 8002460:	4620      	mov	r0, r4
 8002462:	f7ff ff5d 	bl	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002466:	b928      	cbnz	r0, 8002474 <I2C_MasterRequestWrite+0xb0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	b2ff      	uxtb	r7, r7
 800246c:	611f      	str	r7, [r3, #16]
 800246e:	e7e2      	b.n	8002436 <I2C_MasterRequestWrite+0x72>
    return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e7d5      	b.n	8002420 <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e7d3      	b.n	8002420 <I2C_MasterRequestWrite+0x5c>
 8002478:	00010002 	.word	0x00010002
 800247c:	00010008 	.word	0x00010008

08002480 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	4604      	mov	r4, r0
 8002484:	460d      	mov	r5, r1
 8002486:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002490:	d11c      	bne.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002492:	4620      	mov	r0, r4
 8002494:	f7ff fef3 	bl	800227e <I2C_IsAcknowledgeFailed>
 8002498:	b9d0      	cbnz	r0, 80024d0 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800249a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800249e:	d0f3      	beq.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a0:	f7ff fa62 	bl	8001968 <HAL_GetTick>
 80024a4:	1b80      	subs	r0, r0, r6
 80024a6:	42a8      	cmp	r0, r5
 80024a8:	d801      	bhi.n	80024ae <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80024aa:	2d00      	cmp	r5, #0
 80024ac:	d1ec      	bne.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024b2:	2220      	movs	r2, #32
 80024b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80024c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80024c8:	2001      	movs	r0, #1
 80024ca:	e000      	b.n	80024ce <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80024cc:	2000      	movs	r0, #0
}
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80024d0:	2001      	movs	r0, #1
 80024d2:	e7fc      	b.n	80024ce <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080024d4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	4604      	mov	r4, r0
 80024d8:	460d      	mov	r5, r1
 80024da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f013 0f04 	tst.w	r3, #4
 80024e4:	d11c      	bne.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e6:	4620      	mov	r0, r4
 80024e8:	f7ff fec9 	bl	800227e <I2C_IsAcknowledgeFailed>
 80024ec:	b9d0      	cbnz	r0, 8002524 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80024ee:	f1b5 3fff 	cmp.w	r5, #4294967295
 80024f2:	d0f3      	beq.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f4:	f7ff fa38 	bl	8001968 <HAL_GetTick>
 80024f8:	1b80      	subs	r0, r0, r6
 80024fa:	42a8      	cmp	r0, r5
 80024fc:	d801      	bhi.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80024fe:	2d00      	cmp	r5, #0
 8002500:	d1ec      	bne.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002502:	2300      	movs	r3, #0
 8002504:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002506:	2220      	movs	r2, #32
 8002508:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002510:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002518:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800251c:	2001      	movs	r0, #1
 800251e:	e000      	b.n	8002522 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002520:	2000      	movs	r0, #0
}
 8002522:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
 8002526:	e7fc      	b.n	8002522 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002528 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002528:	2800      	cmp	r0, #0
 800252a:	f000 80c8 	beq.w	80026be <HAL_I2C_Init+0x196>
{
 800252e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002530:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002536:	2b00      	cmp	r3, #0
 8002538:	d075      	beq.n	8002626 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800253a:	2324      	movs	r3, #36	; 0x24
 800253c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002540:	6822      	ldr	r2, [r4, #0]
 8002542:	6813      	ldr	r3, [r2, #0]
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800254a:	6822      	ldr	r2, [r4, #0]
 800254c:	6813      	ldr	r3, [r2, #0]
 800254e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002552:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002554:	6822      	ldr	r2, [r4, #0]
 8002556:	6813      	ldr	r3, [r2, #0]
 8002558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800255c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800255e:	f000 fca1 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002562:	6862      	ldr	r2, [r4, #4]
 8002564:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <HAL_I2C_Init+0x1a0>)
 8002566:	429a      	cmp	r2, r3
 8002568:	d862      	bhi.n	8002630 <HAL_I2C_Init+0x108>
 800256a:	4b58      	ldr	r3, [pc, #352]	; (80026cc <HAL_I2C_Init+0x1a4>)
 800256c:	4298      	cmp	r0, r3
 800256e:	bf8c      	ite	hi
 8002570:	2300      	movhi	r3, #0
 8002572:	2301      	movls	r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	f040 80a4 	bne.w	80026c2 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 800257a:	4b55      	ldr	r3, [pc, #340]	; (80026d0 <HAL_I2C_Init+0x1a8>)
 800257c:	fba3 2300 	umull	r2, r3, r3, r0
 8002580:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002582:	6821      	ldr	r1, [r4, #0]
 8002584:	684a      	ldr	r2, [r1, #4]
 8002586:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800258a:	431a      	orrs	r2, r3
 800258c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800258e:	6825      	ldr	r5, [r4, #0]
 8002590:	6a2a      	ldr	r2, [r5, #32]
 8002592:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002596:	6866      	ldr	r6, [r4, #4]
 8002598:	494b      	ldr	r1, [pc, #300]	; (80026c8 <HAL_I2C_Init+0x1a0>)
 800259a:	428e      	cmp	r6, r1
 800259c:	d84e      	bhi.n	800263c <HAL_I2C_Init+0x114>
 800259e:	3301      	adds	r3, #1
 80025a0:	4313      	orrs	r3, r2
 80025a2:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025a4:	6825      	ldr	r5, [r4, #0]
 80025a6:	69e9      	ldr	r1, [r5, #28]
 80025a8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80025ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80025b0:	6863      	ldr	r3, [r4, #4]
 80025b2:	4a45      	ldr	r2, [pc, #276]	; (80026c8 <HAL_I2C_Init+0x1a0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d84b      	bhi.n	8002650 <HAL_I2C_Init+0x128>
 80025b8:	3801      	subs	r0, #1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf38      	it	cc
 80025ca:	2304      	movcc	r3, #4
 80025cc:	430b      	orrs	r3, r1
 80025ce:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d0:	6821      	ldr	r1, [r4, #0]
 80025d2:	680b      	ldr	r3, [r1, #0]
 80025d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025d8:	69e2      	ldr	r2, [r4, #28]
 80025da:	6a20      	ldr	r0, [r4, #32]
 80025dc:	4302      	orrs	r2, r0
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e2:	6821      	ldr	r1, [r4, #0]
 80025e4:	688b      	ldr	r3, [r1, #8]
 80025e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ee:	6922      	ldr	r2, [r4, #16]
 80025f0:	68e0      	ldr	r0, [r4, #12]
 80025f2:	4302      	orrs	r2, r0
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025f8:	6821      	ldr	r1, [r4, #0]
 80025fa:	68cb      	ldr	r3, [r1, #12]
 80025fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002600:	6962      	ldr	r2, [r4, #20]
 8002602:	69a0      	ldr	r0, [r4, #24]
 8002604:	4302      	orrs	r2, r0
 8002606:	4313      	orrs	r3, r2
 8002608:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800260a:	6822      	ldr	r2, [r4, #0]
 800260c:	6813      	ldr	r3, [r2, #0]
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002614:	2000      	movs	r0, #0
 8002616:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002618:	2320      	movs	r3, #32
 800261a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800261e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002620:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002626:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800262a:	f7ff f89d 	bl	8001768 <HAL_I2C_MspInit>
 800262e:	e784      	b.n	800253a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_I2C_Init+0x1ac>)
 8002632:	4298      	cmp	r0, r3
 8002634:	bf8c      	ite	hi
 8002636:	2300      	movhi	r3, #0
 8002638:	2301      	movls	r3, #1
 800263a:	e79b      	b.n	8002574 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800263c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4924      	ldr	r1, [pc, #144]	; (80026d8 <HAL_I2C_Init+0x1b0>)
 8002646:	fba1 1303 	umull	r1, r3, r1, r3
 800264a:	099b      	lsrs	r3, r3, #6
 800264c:	3301      	adds	r3, #1
 800264e:	e7a7      	b.n	80025a0 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002650:	68a2      	ldr	r2, [r4, #8]
 8002652:	b9ba      	cbnz	r2, 8002684 <HAL_I2C_Init+0x15c>
 8002654:	1e46      	subs	r6, r0, #1
 8002656:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800265a:	fbb6 f6f7 	udiv	r6, r6, r7
 800265e:	3601      	adds	r6, #1
 8002660:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002664:	fab6 f686 	clz	r6, r6
 8002668:	0976      	lsrs	r6, r6, #5
 800266a:	bb36      	cbnz	r6, 80026ba <HAL_I2C_Init+0x192>
 800266c:	b9c2      	cbnz	r2, 80026a0 <HAL_I2C_Init+0x178>
 800266e:	3801      	subs	r0, #1
 8002670:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002674:	fbb0 f3f3 	udiv	r3, r0, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800267e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002682:	e7a3      	b.n	80025cc <HAL_I2C_Init+0xa4>
 8002684:	1e46      	subs	r6, r0, #1
 8002686:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800268a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800268e:	fbb6 f6f7 	udiv	r6, r6, r7
 8002692:	3601      	adds	r6, #1
 8002694:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002698:	fab6 f686 	clz	r6, r6
 800269c:	0976      	lsrs	r6, r6, #5
 800269e:	e7e4      	b.n	800266a <HAL_I2C_Init+0x142>
 80026a0:	3801      	subs	r0, #1
 80026a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026aa:	fbb0 f2f3 	udiv	r2, r0, r3
 80026ae:	3201      	adds	r2, #1
 80026b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80026b4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80026b8:	e788      	b.n	80025cc <HAL_I2C_Init+0xa4>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e786      	b.n	80025cc <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 80026be:	2001      	movs	r0, #1
}
 80026c0:	4770      	bx	lr
    return HAL_ERROR;
 80026c2:	2001      	movs	r0, #1
 80026c4:	e7ae      	b.n	8002624 <HAL_I2C_Init+0xfc>
 80026c6:	bf00      	nop
 80026c8:	000186a0 	.word	0x000186a0
 80026cc:	001e847f 	.word	0x001e847f
 80026d0:	431bde83 	.word	0x431bde83
 80026d4:	003d08ff 	.word	0x003d08ff
 80026d8:	10624dd3 	.word	0x10624dd3

080026dc <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80026dc:	b1a8      	cbz	r0, 800270a <HAL_I2C_DeInit+0x2e>
{
 80026de:	b510      	push	{r4, lr}
 80026e0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e2:	2324      	movs	r3, #36	; 0x24
 80026e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	6802      	ldr	r2, [r0, #0]
 80026ea:	6813      	ldr	r3, [r2, #0]
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80026f2:	f7ff f86b 	bl	80017cc <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80026f6:	2000      	movs	r0, #0
 80026f8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80026fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002700:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8002704:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002708:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
}
 800270c:	4770      	bx	lr
	...

08002710 <HAL_I2C_Master_Transmit>:
{
 8002710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	4604      	mov	r4, r0
 8002718:	460e      	mov	r6, r1
 800271a:	4690      	mov	r8, r2
 800271c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800271e:	f7ff f923 	bl	8001968 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002722:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b20      	cmp	r3, #32
 800272a:	d004      	beq.n	8002736 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 800272c:	2602      	movs	r6, #2
}
 800272e:	4630      	mov	r0, r6
 8002730:	b004      	add	sp, #16
 8002732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002736:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002738:	9000      	str	r0, [sp, #0]
 800273a:	2319      	movs	r3, #25
 800273c:	2201      	movs	r2, #1
 800273e:	494f      	ldr	r1, [pc, #316]	; (800287c <HAL_I2C_Master_Transmit+0x16c>)
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff fdb5 	bl	80022b0 <I2C_WaitOnFlagUntilTimeout>
 8002746:	2800      	cmp	r0, #0
 8002748:	f040 8091 	bne.w	800286e <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 800274c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	f000 808e 	beq.w	8002872 <HAL_I2C_Master_Transmit+0x162>
 8002756:	2301      	movs	r3, #1
 8002758:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	f012 0f01 	tst.w	r2, #1
 8002764:	d103      	bne.n	800276e <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002776:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002778:	2321      	movs	r3, #33	; 0x21
 800277a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800277e:	2310      	movs	r3, #16
 8002780:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002784:	2300      	movs	r3, #0
 8002786:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002788:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800278c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800278e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002790:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002792:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <HAL_I2C_Master_Transmit+0x170>)
 8002794:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002796:	462b      	mov	r3, r5
 8002798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800279a:	4631      	mov	r1, r6
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff fe11 	bl	80023c4 <I2C_MasterRequestWrite>
 80027a2:	4606      	mov	r6, r0
 80027a4:	2800      	cmp	r0, #0
 80027a6:	d166      	bne.n	8002876 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a8:	2300      	movs	r3, #0
 80027aa:	9303      	str	r3, [sp, #12]
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	9203      	str	r2, [sp, #12]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	9303      	str	r3, [sp, #12]
 80027b6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80027b8:	e012      	b.n	80027e0 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80027c0:	2601      	movs	r6, #1
 80027c2:	e7b4      	b.n	800272e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	6822      	ldr	r2, [r4, #0]
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027cc:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80027ce:	2601      	movs	r6, #1
 80027d0:	e7ad      	b.n	800272e <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d2:	462a      	mov	r2, r5
 80027d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fe7c 	bl	80024d4 <I2C_WaitOnBTFFlagUntilTimeout>
 80027dc:	2800      	cmp	r0, #0
 80027de:	d12c      	bne.n	800283a <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 80027e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d035      	beq.n	8002852 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e6:	462a      	mov	r2, r5
 80027e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7ff fe48 	bl	8002480 <I2C_WaitOnTXEFlagUntilTimeout>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d1e2      	bne.n	80027ba <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	7812      	ldrb	r2, [r2, #0]
 80027fa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80027fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80027fe:	1c4b      	adds	r3, r1, #1
 8002800:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002802:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002804:	3b01      	subs	r3, #1
 8002806:	b29b      	uxth	r3, r3
 8002808:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800280a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800280c:	3b01      	subs	r3, #1
 800280e:	b29b      	uxth	r3, r3
 8002810:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002812:	6822      	ldr	r2, [r4, #0]
 8002814:	6950      	ldr	r0, [r2, #20]
 8002816:	f010 0f04 	tst.w	r0, #4
 800281a:	d0da      	beq.n	80027d2 <HAL_I2C_Master_Transmit+0xc2>
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0d8      	beq.n	80027d2 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002820:	784b      	ldrb	r3, [r1, #1]
 8002822:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8002824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002826:	3301      	adds	r3, #1
 8002828:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800282a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800282c:	3b01      	subs	r3, #1
 800282e:	b29b      	uxth	r3, r3
 8002830:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002832:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	8523      	strh	r3, [r4, #40]	; 0x28
 8002838:	e7cb      	b.n	80027d2 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800283c:	2b04      	cmp	r3, #4
 800283e:	d001      	beq.n	8002844 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8002840:	2601      	movs	r6, #1
 8002842:	e774      	b.n	800272e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002844:	6822      	ldr	r2, [r4, #0]
 8002846:	6813      	ldr	r3, [r2, #0]
 8002848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800284e:	2601      	movs	r6, #1
 8002850:	e76d      	b.n	800272e <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002852:	6822      	ldr	r2, [r4, #0]
 8002854:	6813      	ldr	r3, [r2, #0]
 8002856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800285c:	2320      	movs	r3, #32
 800285e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	2300      	movs	r3, #0
 8002864:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002868:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800286c:	e75f      	b.n	800272e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 800286e:	2602      	movs	r6, #2
 8002870:	e75d      	b.n	800272e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8002872:	2602      	movs	r6, #2
 8002874:	e75b      	b.n	800272e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8002876:	2601      	movs	r6, #1
 8002878:	e759      	b.n	800272e <HAL_I2C_Master_Transmit+0x1e>
 800287a:	bf00      	nop
 800287c:	00100002 	.word	0x00100002
 8002880:	ffff0000 	.word	0xffff0000

08002884 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002884:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <RCC_Delay+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <RCC_Delay+0x28>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	0a5b      	lsrs	r3, r3, #9
 8002892:	fb00 f003 	mul.w	r0, r0, r3
 8002896:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8002898:	bf00      	nop
  }
  while (Delay --);
 800289a:	9b01      	ldr	r3, [sp, #4]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	9201      	str	r2, [sp, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f9      	bne.n	8002898 <RCC_Delay+0x14>
}
 80028a4:	b002      	add	sp, #8
 80028a6:	4770      	bx	lr
 80028a8:	20000010 	.word	0x20000010
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80028b0:	2800      	cmp	r0, #0
 80028b2:	f000 81f5 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x3f0>
{
 80028b6:	b570      	push	{r4, r5, r6, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028bc:	6803      	ldr	r3, [r0, #0]
 80028be:	f013 0f01 	tst.w	r3, #1
 80028c2:	d02c      	beq.n	800291e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c4:	4bab      	ldr	r3, [pc, #684]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d01d      	beq.n	800290c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d0:	4ba8      	ldr	r3, [pc, #672]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d012      	beq.n	8002902 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028dc:	6863      	ldr	r3, [r4, #4]
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e2:	d041      	beq.n	8002968 <HAL_RCC_OscConfig+0xb8>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d155      	bne.n	8002994 <HAL_RCC_OscConfig+0xe4>
 80028e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e037      	b.n	8002972 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002902:	4b9c      	ldr	r3, [pc, #624]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800290a:	d0e7      	beq.n	80028dc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b99      	ldr	r3, [pc, #612]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002914:	d003      	beq.n	800291e <HAL_RCC_OscConfig+0x6e>
 8002916:	6863      	ldr	r3, [r4, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 81c3 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	f013 0f02 	tst.w	r3, #2
 8002924:	d076      	beq.n	8002a14 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002926:	4b93      	ldr	r3, [pc, #588]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f013 0f0c 	tst.w	r3, #12
 800292e:	d05f      	beq.n	80029f0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002930:	4b90      	ldr	r3, [pc, #576]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d054      	beq.n	80029e6 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293c:	6923      	ldr	r3, [r4, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 808a 	beq.w	8002a58 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b8c      	ldr	r3, [pc, #560]	; (8002b78 <HAL_RCC_OscConfig+0x2c8>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800294a:	f7ff f80d 	bl	8001968 <HAL_GetTick>
 800294e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f013 0f02 	tst.w	r3, #2
 8002958:	d175      	bne.n	8002a46 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295a:	f7ff f805 	bl	8001968 <HAL_GetTick>
 800295e:	1b40      	subs	r0, r0, r5
 8002960:	2802      	cmp	r0, #2
 8002962:	d9f5      	bls.n	8002950 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002964:	2003      	movs	r0, #3
 8002966:	e1a0      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002968:	4a82      	ldr	r2, [pc, #520]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 800296a:	6813      	ldr	r3, [r2, #0]
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002972:	6863      	ldr	r3, [r4, #4]
 8002974:	b343      	cbz	r3, 80029c8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002976:	f7fe fff7 	bl	8001968 <HAL_GetTick>
 800297a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297c:	4b7d      	ldr	r3, [pc, #500]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002984:	d1cb      	bne.n	800291e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002986:	f7fe ffef 	bl	8001968 <HAL_GetTick>
 800298a:	1b40      	subs	r0, r0, r5
 800298c:	2864      	cmp	r0, #100	; 0x64
 800298e:	d9f5      	bls.n	800297c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002990:	2003      	movs	r0, #3
 8002992:	e18a      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d009      	beq.n	80029ae <HAL_RCC_OscConfig+0xfe>
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e7e1      	b.n	8002972 <HAL_RCC_OscConfig+0xc2>
 80029ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029b2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e7d4      	b.n	8002972 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80029c8:	f7fe ffce 	bl	8001968 <HAL_GetTick>
 80029cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	4b69      	ldr	r3, [pc, #420]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029d6:	d0a2      	beq.n	800291e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe ffc6 	bl	8001968 <HAL_GetTick>
 80029dc:	1b40      	subs	r0, r0, r5
 80029de:	2864      	cmp	r0, #100	; 0x64
 80029e0:	d9f5      	bls.n	80029ce <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80029e2:	2003      	movs	r0, #3
 80029e4:	e161      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80029ee:	d1a5      	bne.n	800293c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f0:	4b60      	ldr	r3, [pc, #384]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f013 0f02 	tst.w	r3, #2
 80029f8:	d004      	beq.n	8002a04 <HAL_RCC_OscConfig+0x154>
 80029fa:	6923      	ldr	r3, [r4, #16]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8002a00:	2001      	movs	r0, #1
 8002a02:	e152      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4a5b      	ldr	r2, [pc, #364]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002a06:	6813      	ldr	r3, [r2, #0]
 8002a08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a0c:	6961      	ldr	r1, [r4, #20]
 8002a0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a12:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	f013 0f08 	tst.w	r3, #8
 8002a1a:	d032      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1c:	69a3      	ldr	r3, [r4, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d05b      	beq.n	8002ada <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b56      	ldr	r3, [pc, #344]	; (8002b7c <HAL_RCC_OscConfig+0x2cc>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a28:	f7fe ff9e 	bl	8001968 <HAL_GetTick>
 8002a2c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	f013 0f02 	tst.w	r3, #2
 8002a36:	d121      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fe ff96 	bl	8001968 <HAL_GetTick>
 8002a3c:	1b40      	subs	r0, r0, r5
 8002a3e:	2802      	cmp	r0, #2
 8002a40:	d9f5      	bls.n	8002a2e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002a42:	2003      	movs	r0, #3
 8002a44:	e131      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002a48:	6813      	ldr	r3, [r2, #0]
 8002a4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a4e:	6961      	ldr	r1, [r4, #20]
 8002a50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e7dd      	b.n	8002a14 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002a58:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_OscConfig+0x2c8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a5e:	f7fe ff83 	bl	8001968 <HAL_GetTick>
 8002a62:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a64:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f013 0f02 	tst.w	r3, #2
 8002a6c:	d0d2      	beq.n	8002a14 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7fe ff7b 	bl	8001968 <HAL_GetTick>
 8002a72:	1b40      	subs	r0, r0, r5
 8002a74:	2802      	cmp	r0, #2
 8002a76:	d9f5      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002a78:	2003      	movs	r0, #3
 8002a7a:	e116      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f7ff ff01 	bl	8002884 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	f013 0f04 	tst.w	r3, #4
 8002a88:	f000 8098 	beq.w	8002bbc <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8c:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a94:	d133      	bne.n	8002afe <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	4b37      	ldr	r3, [pc, #220]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002a98:	69da      	ldr	r2, [r3, #28]
 8002a9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a9e:	61da      	str	r2, [r3, #28]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002aaa:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_RCC_OscConfig+0x2d0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ab4:	d025      	beq.n	8002b02 <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab6:	68e3      	ldr	r3, [r4, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d036      	beq.n	8002b2a <HAL_RCC_OscConfig+0x27a>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d14c      	bne.n	8002b5a <HAL_RCC_OscConfig+0x2aa>
 8002ac0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ac4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	621a      	str	r2, [r3, #32]
 8002ad0:	6a1a      	ldr	r2, [r3, #32]
 8002ad2:	f022 0204 	bic.w	r2, r2, #4
 8002ad6:	621a      	str	r2, [r3, #32]
 8002ad8:	e02c      	b.n	8002b34 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8002ada:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_RCC_OscConfig+0x2cc>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002ae0:	f7fe ff42 	bl	8001968 <HAL_GetTick>
 8002ae4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f013 0f02 	tst.w	r3, #2
 8002aee:	d0c8      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fe ff3a 	bl	8001968 <HAL_GetTick>
 8002af4:	1b40      	subs	r0, r0, r5
 8002af6:	2802      	cmp	r0, #2
 8002af8:	d9f5      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8002afa:	2003      	movs	r0, #3
 8002afc:	e0d5      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2500      	movs	r5, #0
 8002b00:	e7d4      	b.n	8002aac <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <HAL_RCC_OscConfig+0x2d0>)
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002b0c:	f7fe ff2c 	bl	8001968 <HAL_GetTick>
 8002b10:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x2d0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b1a:	d1cc      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1c:	f7fe ff24 	bl	8001968 <HAL_GetTick>
 8002b20:	1b80      	subs	r0, r0, r6
 8002b22:	2864      	cmp	r0, #100	; 0x64
 8002b24:	d9f5      	bls.n	8002b12 <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8002b26:	2003      	movs	r0, #3
 8002b28:	e0bf      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002b2c:	6a13      	ldr	r3, [r2, #32]
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b34:	68e3      	ldr	r3, [r4, #12]
 8002b36:	b37b      	cbz	r3, 8002b98 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8002b38:	f7fe ff16 	bl	8001968 <HAL_GetTick>
 8002b3c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f013 0f02 	tst.w	r3, #2
 8002b46:	d138      	bne.n	8002bba <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe ff0e 	bl	8001968 <HAL_GetTick>
 8002b4c:	1b80      	subs	r0, r0, r6
 8002b4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b52:	4298      	cmp	r0, r3
 8002b54:	d9f3      	bls.n	8002b3e <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8002b56:	2003      	movs	r0, #3
 8002b58:	e0a7      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d012      	beq.n	8002b84 <HAL_RCC_OscConfig+0x2d4>
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_OscConfig+0x2c4>)
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	621a      	str	r2, [r3, #32]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	621a      	str	r2, [r3, #32]
 8002b70:	e7e0      	b.n	8002b34 <HAL_RCC_OscConfig+0x284>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	42420000 	.word	0x42420000
 8002b7c:	42420480 	.word	0x42420480
 8002b80:	40007000 	.word	0x40007000
 8002b84:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	f042 0204 	orr.w	r2, r2, #4
 8002b8c:	621a      	str	r2, [r3, #32]
 8002b8e:	6a1a      	ldr	r2, [r3, #32]
 8002b90:	f042 0201 	orr.w	r2, r2, #1
 8002b94:	621a      	str	r2, [r3, #32]
 8002b96:	e7cd      	b.n	8002b34 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8002b98:	f7fe fee6 	bl	8001968 <HAL_GetTick>
 8002b9c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9e:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f013 0f02 	tst.w	r3, #2
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fede 	bl	8001968 <HAL_GetTick>
 8002bac:	1b80      	subs	r0, r0, r6
 8002bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bb2:	4298      	cmp	r0, r3
 8002bb4:	d9f3      	bls.n	8002b9e <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8002bb6:	2003      	movs	r0, #3
 8002bb8:	e077      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8002bba:	b9e5      	cbnz	r5, 8002bf6 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbc:	69e3      	ldr	r3, [r4, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d072      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc2:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002bc4:	6852      	ldr	r2, [r2, #4]
 8002bc6:	f002 020c 	and.w	r2, r2, #12
 8002bca:	2a08      	cmp	r2, #8
 8002bcc:	d056      	beq.n	8002c7c <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d017      	beq.n	8002c02 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b3a      	ldr	r3, [pc, #232]	; (8002cbc <HAL_RCC_OscConfig+0x40c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fec6 	bl	8001968 <HAL_GetTick>
 8002bdc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002be6:	d047      	beq.n	8002c78 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe febe 	bl	8001968 <HAL_GetTick>
 8002bec:	1b00      	subs	r0, r0, r4
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d9f5      	bls.n	8002bde <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8002bf2:	2003      	movs	r0, #3
 8002bf4:	e059      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf6:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002bf8:	69d3      	ldr	r3, [r2, #28]
 8002bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	61d3      	str	r3, [r2, #28]
 8002c00:	e7dc      	b.n	8002bbc <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCC_OscConfig+0x40c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c08:	f7fe feae 	bl	8001968 <HAL_GetTick>
 8002c0c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c16:	d006      	beq.n	8002c26 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe fea6 	bl	8001968 <HAL_GetTick>
 8002c1c:	1b40      	subs	r0, r0, r5
 8002c1e:	2802      	cmp	r0, #2
 8002c20:	d9f5      	bls.n	8002c0e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002c22:	2003      	movs	r0, #3
 8002c24:	e041      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c26:	6a23      	ldr	r3, [r4, #32]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d01a      	beq.n	8002c64 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2e:	4922      	ldr	r1, [pc, #136]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002c30:	684b      	ldr	r3, [r1, #4]
 8002c32:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002c36:	6a22      	ldr	r2, [r4, #32]
 8002c38:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c3a:	4302      	orrs	r2, r0
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <HAL_RCC_OscConfig+0x40c>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c46:	f7fe fe8f 	bl	8001968 <HAL_GetTick>
 8002c4a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c54:	d10e      	bne.n	8002c74 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fe fe87 	bl	8001968 <HAL_GetTick>
 8002c5a:	1b00      	subs	r0, r0, r4
 8002c5c:	2802      	cmp	r0, #2
 8002c5e:	d9f5      	bls.n	8002c4c <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8002c60:	2003      	movs	r0, #3
 8002c62:	e022      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002c66:	6853      	ldr	r3, [r2, #4]
 8002c68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c6c:	68a1      	ldr	r1, [r4, #8]
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	6053      	str	r3, [r2, #4]
 8002c72:	e7dc      	b.n	8002c2e <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8002c74:	2000      	movs	r0, #0
 8002c76:	e018      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e016      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d016      	beq.n	8002cae <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_RCC_OscConfig+0x408>)
 8002c82:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c84:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002c88:	6a22      	ldr	r2, [r4, #32]
 8002c8a:	4291      	cmp	r1, r2
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8002c8e:	2001      	movs	r0, #1
 8002c90:	e00b      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c92:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c96:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	e004      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8002ca0:	2001      	movs	r0, #1
}
 8002ca2:	4770      	bx	lr
        return HAL_ERROR;
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002ca8:	2000      	movs	r0, #0
}
 8002caa:	b002      	add	sp, #8
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
 8002cb0:	e7fb      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	e7f9      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	42420060 	.word	0x42420060

08002cc0 <HAL_RCC_GetSysClockFreq>:
{
 8002cc0:	b410      	push	{r4}
 8002cc2:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cc4:	4c16      	ldr	r4, [pc, #88]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x60>)
 8002cc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cca:	f10d 0c18 	add.w	ip, sp, #24
 8002cce:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cd2:	8a23      	ldrh	r3, [r4, #16]
 8002cd4:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x64>)
 8002cda:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002cdc:	f003 020c 	and.w	r2, r3, #12
 8002ce0:	2a08      	cmp	r2, #8
 8002ce2:	d11a      	bne.n	8002d1a <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ce4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002ce8:	4462      	add	r2, ip
 8002cea:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf4:	480c      	ldr	r0, [pc, #48]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x68>)
 8002cf6:	fb00 f002 	mul.w	r0, r0, r2
}
 8002cfa:	b007      	add	sp, #28
 8002cfc:	bc10      	pop	{r4}
 8002cfe:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x64>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002d08:	4463      	add	r3, ip
 8002d0a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x6c>)
 8002d10:	fb00 f002 	mul.w	r0, r0, r2
 8002d14:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d18:	e7ef      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8002d1a:	4804      	ldr	r0, [pc, #16]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002d1c:	e7ed      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x3a>
 8002d1e:	bf00      	nop
 8002d20:	080034a8 	.word	0x080034a8
 8002d24:	40021000 	.word	0x40021000
 8002d28:	003d0900 	.word	0x003d0900
 8002d2c:	007a1200 	.word	0x007a1200

08002d30 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002d30:	2800      	cmp	r0, #0
 8002d32:	f000 80a3 	beq.w	8002e7c <HAL_RCC_ClockConfig+0x14c>
{
 8002d36:	b570      	push	{r4, r5, r6, lr}
 8002d38:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3a:	4b52      	ldr	r3, [pc, #328]	; (8002e84 <HAL_RCC_ClockConfig+0x154>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	428b      	cmp	r3, r1
 8002d44:	d20c      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4a4f      	ldr	r2, [pc, #316]	; (8002e84 <HAL_RCC_ClockConfig+0x154>)
 8002d48:	6813      	ldr	r3, [r2, #0]
 8002d4a:	f023 0307 	bic.w	r3, r3, #7
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	428b      	cmp	r3, r1
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8002d5c:	2001      	movs	r0, #1
}
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	f013 0f02 	tst.w	r3, #2
 8002d66:	d017      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	f013 0f04 	tst.w	r3, #4
 8002d6c:	d004      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6e:	4a46      	ldr	r2, [pc, #280]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002d70:	6853      	ldr	r3, [r2, #4]
 8002d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d76:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	f013 0f08 	tst.w	r3, #8
 8002d7e:	d004      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d80:	4a41      	ldr	r2, [pc, #260]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002d82:	6853      	ldr	r3, [r2, #4]
 8002d84:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d88:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8a:	4a3f      	ldr	r2, [pc, #252]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002d8c:	6853      	ldr	r3, [r2, #4]
 8002d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d92:	68a0      	ldr	r0, [r4, #8]
 8002d94:	4303      	orrs	r3, r0
 8002d96:	6053      	str	r3, [r2, #4]
 8002d98:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	f013 0f01 	tst.w	r3, #1
 8002da0:	d031      	beq.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da2:	6863      	ldr	r3, [r4, #4]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d020      	beq.n	8002dea <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d025      	beq.n	8002df8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	4a36      	ldr	r2, [pc, #216]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	f012 0f02 	tst.w	r2, #2
 8002db4:	d064      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db6:	4934      	ldr	r1, [pc, #208]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002db8:	684a      	ldr	r2, [r1, #4]
 8002dba:	f022 0203 	bic.w	r2, r2, #3
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002dc2:	f7fe fdd1 	bl	8001968 <HAL_GetTick>
 8002dc6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	6862      	ldr	r2, [r4, #4]
 8002dd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002dd6:	d016      	beq.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe fdc6 	bl	8001968 <HAL_GetTick>
 8002ddc:	1b80      	subs	r0, r0, r6
 8002dde:	f241 3388 	movw	r3, #5000	; 0x1388
 8002de2:	4298      	cmp	r0, r3
 8002de4:	d9f0      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002de6:	2003      	movs	r0, #3
 8002de8:	e7b9      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002df2:	d1e0      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002df4:	2001      	movs	r0, #1
 8002df6:	e7b2      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002e00:	d1d9      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002e02:	2001      	movs	r0, #1
 8002e04:	e7ab      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_RCC_ClockConfig+0x154>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	42ab      	cmp	r3, r5
 8002e10:	d90c      	bls.n	8002e2c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_RCC_ClockConfig+0x154>)
 8002e14:	6813      	ldr	r3, [r2, #0]
 8002e16:	f023 0307 	bic.w	r3, r3, #7
 8002e1a:	432b      	orrs	r3, r5
 8002e1c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	6813      	ldr	r3, [r2, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	42ab      	cmp	r3, r5
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e798      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	f013 0f04 	tst.w	r3, #4
 8002e32:	d006      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002e36:	6853      	ldr	r3, [r2, #4]
 8002e38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e3c:	68e1      	ldr	r1, [r4, #12]
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	f013 0f08 	tst.w	r3, #8
 8002e48:	d007      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e4a:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002e4c:	6853      	ldr	r3, [r2, #4]
 8002e4e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002e52:	6921      	ldr	r1, [r4, #16]
 8002e54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e58:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e5a:	f7ff ff31 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x15c>)
 8002e68:	5cd3      	ldrb	r3, [r2, r3]
 8002e6a:	40d8      	lsrs	r0, r3
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_RCC_ClockConfig+0x160>)
 8002e6e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_RCC_ClockConfig+0x164>)
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	f7fe fd34 	bl	80018e0 <HAL_InitTick>
  return HAL_OK;
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e770      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002e7c:	2001      	movs	r0, #1
}
 8002e7e:	4770      	bx	lr
        return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e76c      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08003504 	.word	0x08003504
 8002e90:	20000010 	.word	0x20000010
 8002e94:	20000018 	.word	0x20000018

08002e98 <HAL_RCC_GetHCLKFreq>:
}
 8002e98:	4b01      	ldr	r3, [pc, #4]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000010 	.word	0x20000010

08002ea4 <HAL_RCC_GetPCLK1Freq>:
{
 8002ea4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea6:	f7ff fff7 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x18>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002eb2:	4a03      	ldr	r2, [pc, #12]	; (8002ec0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
}
 8002eb6:	40d8      	lsrs	r0, r3
 8002eb8:	bd08      	pop	{r3, pc}
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	08003514 	.word	0x08003514

08002ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002eca:	6803      	ldr	r3, [r0, #0]
 8002ecc:	f013 0f01 	tst.w	r3, #1
 8002ed0:	d034      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002eda:	d148      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ee4:	61da      	str	r2, [r3, #28]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ef0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002efa:	d03a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002efc:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f00:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f04:	d011      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002f06:	6862      	ldr	r2, [r4, #4]
 8002f08:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d00c      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f10:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002f12:	6a13      	ldr	r3, [r2, #32]
 8002f14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f18:	492e      	ldr	r1, [pc, #184]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002f1a:	2601      	movs	r6, #1
 8002f1c:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1e:	2600      	movs	r6, #0
 8002f20:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f22:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f24:	f013 0f01 	tst.w	r3, #1
 8002f28:	d137      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2a:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002f2c:	6a13      	ldr	r3, [r2, #32]
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f32:	6861      	ldr	r1, [r4, #4]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f38:	2d00      	cmp	r5, #0
 8002f3a:	d13f      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	f013 0f02 	tst.w	r3, #2
 8002f42:	d006      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f44:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002f46:	6853      	ldr	r3, [r2, #4]
 8002f48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f4c:	68a1      	ldr	r1, [r4, #8]
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	f013 0f10 	tst.w	r3, #16
 8002f58:	d035      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002f5c:	6853      	ldr	r3, [r2, #4]
 8002f5e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f62:	68e1      	ldr	r1, [r4, #12]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f68:	2000      	movs	r0, #0
}
 8002f6a:	b002      	add	sp, #8
 8002f6c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2500      	movs	r5, #0
 8002f70:	e7bf      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f72:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002f74:	6813      	ldr	r3, [r2, #0]
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fcf4 	bl	8001968 <HAL_GetTick>
 8002f80:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f8a:	d1b7      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8c:	f7fe fcec 	bl	8001968 <HAL_GetTick>
 8002f90:	1b80      	subs	r0, r0, r6
 8002f92:	2864      	cmp	r0, #100	; 0x64
 8002f94:	d9f5      	bls.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8002f96:	2003      	movs	r0, #3
 8002f98:	e7e7      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fce5 	bl	8001968 <HAL_GetTick>
 8002f9e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f013 0f02 	tst.w	r3, #2
 8002fa8:	d1bf      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fe fcdd 	bl	8001968 <HAL_GetTick>
 8002fae:	1b80      	subs	r0, r0, r6
 8002fb0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fb4:	4298      	cmp	r0, r3
 8002fb6:	d9f3      	bls.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8002fb8:	2003      	movs	r0, #3
 8002fba:	e7d6      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbc:	69d3      	ldr	r3, [r2, #28]
 8002fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	61d3      	str	r3, [r2, #28]
 8002fc4:	e7ba      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	e7cf      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42420440 	.word	0x42420440

08002fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fda:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fdc:	6a04      	ldr	r4, [r0, #32]
 8002fde:	f024 0401 	bic.w	r4, r4, #1
 8002fe2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fe6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fea:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fee:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002ff2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ff4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ff6:	6203      	str	r3, [r0, #32]
}
 8002ff8:	bc10      	pop	{r4}
 8002ffa:	4770      	bx	lr

08002ffc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ffe:	6a03      	ldr	r3, [r0, #32]
 8003000:	f023 0310 	bic.w	r3, r3, #16
 8003004:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003006:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003008:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800300a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800300e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003016:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800301a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800301c:	6203      	str	r3, [r0, #32]
}
 800301e:	bc10      	pop	{r4}
 8003020:	4770      	bx	lr

08003022 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003022:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003028:	4319      	orrs	r1, r3
 800302a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302e:	6081      	str	r1, [r0, #8]
}
 8003030:	4770      	bx	lr
	...

08003034 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003034:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_TIM_Base_Start_IT+0xe>
    return HAL_ERROR;
 800303e:	2001      	movs	r0, #1
 8003040:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003048:	6802      	ldr	r2, [r0, #0]
 800304a:	68d3      	ldr	r3, [r2, #12]
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003052:	6803      	ldr	r3, [r0, #0]
 8003054:	4a10      	ldr	r2, [pc, #64]	; (8003098 <HAL_TIM_Base_Start_IT+0x64>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d010      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x48>
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305e:	d00d      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x48>
 8003060:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x48>
 8003068:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800306c:	4293      	cmp	r3, r2
 800306e:	d005      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x48>
    __HAL_TIM_ENABLE(htim);
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003078:	2000      	movs	r0, #0
 800307a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	2a06      	cmp	r2, #6
 8003084:	d005      	beq.n	8003092 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
 8003090:	4770      	bx	lr
 8003092:	2000      	movs	r0, #0
}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40012c00 	.word	0x40012c00

0800309c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800309c:	4770      	bx	lr

0800309e <HAL_TIM_IC_CaptureCallback>:
}
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80030a0:	4770      	bx	lr

080030a2 <HAL_TIM_TriggerCallback>:
}
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_IRQHandler>:
{
 80030a4:	b510      	push	{r4, lr}
 80030a6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030a8:	6803      	ldr	r3, [r0, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	f012 0f02 	tst.w	r2, #2
 80030b0:	d011      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	f012 0f02 	tst.w	r2, #2
 80030b8:	d00d      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030ba:	f06f 0202 	mvn.w	r2, #2
 80030be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030c0:	2301      	movs	r3, #1
 80030c2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030c4:	6803      	ldr	r3, [r0, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f013 0f03 	tst.w	r3, #3
 80030cc:	d070      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	f7ff ffe6 	bl	800309e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	2300      	movs	r3, #0
 80030d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	f012 0f04 	tst.w	r2, #4
 80030de:	d012      	beq.n	8003106 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	f012 0f04 	tst.w	r2, #4
 80030e6:	d00e      	beq.n	8003106 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030e8:	f06f 0204 	mvn.w	r2, #4
 80030ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ee:	2302      	movs	r3, #2
 80030f0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80030fa:	d05f      	beq.n	80031bc <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80030fc:	4620      	mov	r0, r4
 80030fe:	f7ff ffce 	bl	800309e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	2300      	movs	r3, #0
 8003104:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	f012 0f08 	tst.w	r2, #8
 800310e:	d012      	beq.n	8003136 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	f012 0f08 	tst.w	r2, #8
 8003116:	d00e      	beq.n	8003136 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003118:	f06f 0208 	mvn.w	r2, #8
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800311e:	2304      	movs	r3, #4
 8003120:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f013 0f03 	tst.w	r3, #3
 800312a:	d04e      	beq.n	80031ca <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800312c:	4620      	mov	r0, r4
 800312e:	f7ff ffb6 	bl	800309e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	2300      	movs	r3, #0
 8003134:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	f012 0f10 	tst.w	r2, #16
 800313e:	d012      	beq.n	8003166 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	f012 0f10 	tst.w	r2, #16
 8003146:	d00e      	beq.n	8003166 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003148:	f06f 0210 	mvn.w	r2, #16
 800314c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800314e:	2308      	movs	r3, #8
 8003150:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f413 7f40 	tst.w	r3, #768	; 0x300
 800315a:	d03d      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800315c:	4620      	mov	r0, r4
 800315e:	f7ff ff9e 	bl	800309e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	2300      	movs	r3, #0
 8003164:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	f012 0f01 	tst.w	r2, #1
 800316e:	d003      	beq.n	8003178 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	f012 0f01 	tst.w	r2, #1
 8003176:	d136      	bne.n	80031e6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003188:	d134      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003192:	d003      	beq.n	800319c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	f012 0f40 	tst.w	r2, #64	; 0x40
 800319a:	d132      	bne.n	8003202 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	f012 0f20 	tst.w	r2, #32
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	f012 0f20 	tst.w	r2, #32
 80031ac:	d130      	bne.n	8003210 <HAL_TIM_IRQHandler+0x16c>
}
 80031ae:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b0:	f7ff ff74 	bl	800309c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7ff ff73 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80031ba:	e78a      	b.n	80030d2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031bc:	4620      	mov	r0, r4
 80031be:	f7ff ff6d 	bl	800309c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c2:	4620      	mov	r0, r4
 80031c4:	f7ff ff6c 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80031c8:	e79b      	b.n	8003102 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7ff ff66 	bl	800309c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7ff ff65 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80031d6:	e7ac      	b.n	8003132 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d8:	4620      	mov	r0, r4
 80031da:	f7ff ff5f 	bl	800309c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff ff5e 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80031e4:	e7bd      	b.n	8003162 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031e6:	f06f 0201 	mvn.w	r2, #1
 80031ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ec:	4620      	mov	r0, r4
 80031ee:	f7fe fa57 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
 80031f2:	e7c1      	b.n	8003178 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80031fa:	4620      	mov	r0, r4
 80031fc:	f000 f923 	bl	8003446 <HAL_TIMEx_BreakCallback>
 8003200:	e7c3      	b.n	800318a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003206:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff ff4a 	bl	80030a2 <HAL_TIM_TriggerCallback>
 800320e:	e7c5      	b.n	800319c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003210:	f06f 0220 	mvn.w	r2, #32
 8003214:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003216:	4620      	mov	r0, r4
 8003218:	f000 f914 	bl	8003444 <HAL_TIMEx_CommutCallback>
}
 800321c:	e7c7      	b.n	80031ae <HAL_TIM_IRQHandler+0x10a>
	...

08003220 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003220:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003222:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <TIM_Base_SetConfig+0x70>)
 8003224:	4290      	cmp	r0, r2
 8003226:	d00a      	beq.n	800323e <TIM_Base_SetConfig+0x1e>
 8003228:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800322c:	d007      	beq.n	800323e <TIM_Base_SetConfig+0x1e>
 800322e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003232:	4290      	cmp	r0, r2
 8003234:	d003      	beq.n	800323e <TIM_Base_SetConfig+0x1e>
 8003236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800323a:	4290      	cmp	r0, r2
 800323c:	d103      	bne.n	8003246 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003242:	684a      	ldr	r2, [r1, #4]
 8003244:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003246:	4a12      	ldr	r2, [pc, #72]	; (8003290 <TIM_Base_SetConfig+0x70>)
 8003248:	4290      	cmp	r0, r2
 800324a:	d00a      	beq.n	8003262 <TIM_Base_SetConfig+0x42>
 800324c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003250:	d007      	beq.n	8003262 <TIM_Base_SetConfig+0x42>
 8003252:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003256:	4290      	cmp	r0, r2
 8003258:	d003      	beq.n	8003262 <TIM_Base_SetConfig+0x42>
 800325a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800325e:	4290      	cmp	r0, r2
 8003260:	d103      	bne.n	800326a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003266:	68ca      	ldr	r2, [r1, #12]
 8003268:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800326a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326e:	694a      	ldr	r2, [r1, #20]
 8003270:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003272:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003274:	688b      	ldr	r3, [r1, #8]
 8003276:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003278:	680b      	ldr	r3, [r1, #0]
 800327a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <TIM_Base_SetConfig+0x70>)
 800327e:	4298      	cmp	r0, r3
 8003280:	d002      	beq.n	8003288 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8003282:	2301      	movs	r3, #1
 8003284:	6143      	str	r3, [r0, #20]
}
 8003286:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003288:	690b      	ldr	r3, [r1, #16]
 800328a:	6303      	str	r3, [r0, #48]	; 0x30
 800328c:	e7f9      	b.n	8003282 <TIM_Base_SetConfig+0x62>
 800328e:	bf00      	nop
 8003290:	40012c00 	.word	0x40012c00

08003294 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003294:	b338      	cbz	r0, 80032e6 <HAL_TIM_Base_Init+0x52>
{
 8003296:	b510      	push	{r4, lr}
 8003298:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800329a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800329e:	b1eb      	cbz	r3, 80032dc <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	2302      	movs	r3, #2
 80032a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a6:	1d21      	adds	r1, r4, #4
 80032a8:	6820      	ldr	r0, [r4, #0]
 80032aa:	f7ff ffb9 	bl	8003220 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80032b8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80032bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80032c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80032d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80032d8:	2000      	movs	r0, #0
}
 80032da:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80032dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80032e0:	f7fe fa8a 	bl	80017f8 <HAL_TIM_Base_MspInit>
 80032e4:	e7dc      	b.n	80032a0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80032e6:	2001      	movs	r0, #1
}
 80032e8:	4770      	bx	lr

080032ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032ea:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ec:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ee:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80032f6:	430b      	orrs	r3, r1
 80032f8:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fa:	6083      	str	r3, [r0, #8]
}
 80032fc:	bc10      	pop	{r4}
 80032fe:	4770      	bx	lr

08003300 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003300:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d066      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0xd6>
{
 8003308:	b510      	push	{r4, lr}
 800330a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800330c:	2301      	movs	r3, #1
 800330e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003312:	2302      	movs	r3, #2
 8003314:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003318:	6802      	ldr	r2, [r0, #0]
 800331a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800331c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003320:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003324:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003326:	680b      	ldr	r3, [r1, #0]
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d04a      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0xc2>
 800332c:	d913      	bls.n	8003356 <HAL_TIM_ConfigClockSource+0x56>
 800332e:	2b60      	cmp	r3, #96	; 0x60
 8003330:	d03d      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0xae>
 8003332:	d91e      	bls.n	8003372 <HAL_TIM_ConfigClockSource+0x72>
 8003334:	2b70      	cmp	r3, #112	; 0x70
 8003336:	d028      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x8a>
 8003338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333c:	d130      	bne.n	80033a0 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800333e:	68cb      	ldr	r3, [r1, #12]
 8003340:	684a      	ldr	r2, [r1, #4]
 8003342:	6889      	ldr	r1, [r1, #8]
 8003344:	6800      	ldr	r0, [r0, #0]
 8003346:	f7ff ffd0 	bl	80032ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	6893      	ldr	r3, [r2, #8]
 800334e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003352:	6093      	str	r3, [r2, #8]
      break;
 8003354:	e024      	b.n	80033a0 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003356:	2b10      	cmp	r3, #16
 8003358:	d006      	beq.n	8003368 <HAL_TIM_ConfigClockSource+0x68>
 800335a:	d904      	bls.n	8003366 <HAL_TIM_ConfigClockSource+0x66>
 800335c:	2b20      	cmp	r3, #32
 800335e:	d003      	beq.n	8003368 <HAL_TIM_ConfigClockSource+0x68>
 8003360:	2b30      	cmp	r3, #48	; 0x30
 8003362:	d001      	beq.n	8003368 <HAL_TIM_ConfigClockSource+0x68>
 8003364:	e01c      	b.n	80033a0 <HAL_TIM_ConfigClockSource+0xa0>
 8003366:	b9db      	cbnz	r3, 80033a0 <HAL_TIM_ConfigClockSource+0xa0>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003368:	4619      	mov	r1, r3
 800336a:	6820      	ldr	r0, [r4, #0]
 800336c:	f7ff fe59 	bl	8003022 <TIM_ITRx_SetConfig>
        break;
 8003370:	e016      	b.n	80033a0 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003372:	2b50      	cmp	r3, #80	; 0x50
 8003374:	d114      	bne.n	80033a0 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	68ca      	ldr	r2, [r1, #12]
 8003378:	6849      	ldr	r1, [r1, #4]
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	f7ff fe2c 	bl	8002fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003380:	2150      	movs	r1, #80	; 0x50
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	f7ff fe4d 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8003388:	e00a      	b.n	80033a0 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800338a:	68cb      	ldr	r3, [r1, #12]
 800338c:	684a      	ldr	r2, [r1, #4]
 800338e:	6889      	ldr	r1, [r1, #8]
 8003390:	6800      	ldr	r0, [r0, #0]
 8003392:	f7ff ffaa 	bl	80032ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003396:	6822      	ldr	r2, [r4, #0]
 8003398:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800339a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800339e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80033ac:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ae:	68ca      	ldr	r2, [r1, #12]
 80033b0:	6849      	ldr	r1, [r1, #4]
 80033b2:	6800      	ldr	r0, [r0, #0]
 80033b4:	f7ff fe22 	bl	8002ffc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b8:	2160      	movs	r1, #96	; 0x60
 80033ba:	6820      	ldr	r0, [r4, #0]
 80033bc:	f7ff fe31 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 80033c0:	e7ee      	b.n	80033a0 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c2:	68ca      	ldr	r2, [r1, #12]
 80033c4:	6849      	ldr	r1, [r1, #4]
 80033c6:	6800      	ldr	r0, [r0, #0]
 80033c8:	f7ff fe06 	bl	8002fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	f7ff fe27 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 80033d4:	e7e4      	b.n	80033a0 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 80033d6:	2002      	movs	r0, #2
}
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d02b      	beq.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80033e4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80033e6:	2301      	movs	r3, #1
 80033e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	2302      	movs	r3, #2
 80033ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f2:	6803      	ldr	r3, [r0, #0]
 80033f4:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f6:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033fc:	680a      	ldr	r2, [r1, #0]
 80033fe:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003402:	6803      	ldr	r3, [r0, #0]
 8003404:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00a      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340e:	d007      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003410:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800341c:	4293      	cmp	r3, r2
 800341e:	d104      	bne.n	800342a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003420:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003424:	684a      	ldr	r2, [r1, #4]
 8003426:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003428:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800342a:	2301      	movs	r3, #1
 800342c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003430:	2300      	movs	r3, #0
 8003432:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003436:	4618      	mov	r0, r3
}
 8003438:	bc30      	pop	{r4, r5}
 800343a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800343c:	2002      	movs	r0, #2
}
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00

08003444 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003444:	4770      	bx	lr

08003446 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003446:	4770      	bx	lr

08003448 <__libc_init_array>:
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	2500      	movs	r5, #0
 800344c:	4e0c      	ldr	r6, [pc, #48]	; (8003480 <__libc_init_array+0x38>)
 800344e:	4c0d      	ldr	r4, [pc, #52]	; (8003484 <__libc_init_array+0x3c>)
 8003450:	1ba4      	subs	r4, r4, r6
 8003452:	10a4      	asrs	r4, r4, #2
 8003454:	42a5      	cmp	r5, r4
 8003456:	d109      	bne.n	800346c <__libc_init_array+0x24>
 8003458:	f000 f81a 	bl	8003490 <_init>
 800345c:	2500      	movs	r5, #0
 800345e:	4e0a      	ldr	r6, [pc, #40]	; (8003488 <__libc_init_array+0x40>)
 8003460:	4c0a      	ldr	r4, [pc, #40]	; (800348c <__libc_init_array+0x44>)
 8003462:	1ba4      	subs	r4, r4, r6
 8003464:	10a4      	asrs	r4, r4, #2
 8003466:	42a5      	cmp	r5, r4
 8003468:	d105      	bne.n	8003476 <__libc_init_array+0x2e>
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003470:	4798      	blx	r3
 8003472:	3501      	adds	r5, #1
 8003474:	e7ee      	b.n	8003454 <__libc_init_array+0xc>
 8003476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800347a:	4798      	blx	r3
 800347c:	3501      	adds	r5, #1
 800347e:	e7f2      	b.n	8003466 <__libc_init_array+0x1e>
 8003480:	0800351c 	.word	0x0800351c
 8003484:	0800351c 	.word	0x0800351c
 8003488:	0800351c 	.word	0x0800351c
 800348c:	08003520 	.word	0x08003520

08003490 <_init>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	bf00      	nop
 8003494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003496:	bc08      	pop	{r3}
 8003498:	469e      	mov	lr, r3
 800349a:	4770      	bx	lr

0800349c <_fini>:
 800349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349e:	bf00      	nop
 80034a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a2:	bc08      	pop	{r3}
 80034a4:	469e      	mov	lr, r3
 80034a6:	4770      	bx	lr
