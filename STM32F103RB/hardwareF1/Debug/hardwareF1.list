
hardwareF1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000431c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004460  08004460  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004460  08004460  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004460  08004460  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000080  080044e8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080044e8  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      0000007b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e285  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001aec  00000000  00000000  0002e3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000bef6  00000000  00000000  0002fe95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000ce0  00000000  00000000  0003bd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000cc0  00000000  00000000  0003ca70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000174e5  00000000  00000000  0003d730  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000a884  00000000  00000000  00054c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0008b422  00000000  00000000  0005f499  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  000027e4  00000000  00000000  000ea8bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004410 	.word	0x08004410

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004410 	.word	0x08004410

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2f>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000900:	bf24      	itt	cs
 8000902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090a:	d90d      	bls.n	8000928 <__aeabi_d2f+0x30>
 800090c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800091c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000920:	bf08      	it	eq
 8000922:	f020 0001 	biceq.w	r0, r0, #1
 8000926:	4770      	bx	lr
 8000928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800092c:	d121      	bne.n	8000972 <__aeabi_d2f+0x7a>
 800092e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000932:	bfbc      	itt	lt
 8000934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000938:	4770      	bxlt	lr
 800093a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000942:	f1c2 0218 	rsb	r2, r2, #24
 8000946:	f1c2 0c20 	rsb	ip, r2, #32
 800094a:	fa10 f30c 	lsls.w	r3, r0, ip
 800094e:	fa20 f002 	lsr.w	r0, r0, r2
 8000952:	bf18      	it	ne
 8000954:	f040 0001 	orrne.w	r0, r0, #1
 8000958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000960:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000964:	ea40 000c 	orr.w	r0, r0, ip
 8000968:	fa23 f302 	lsr.w	r3, r3, r2
 800096c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000970:	e7cc      	b.n	800090c <__aeabi_d2f+0x14>
 8000972:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000976:	d107      	bne.n	8000988 <__aeabi_d2f+0x90>
 8000978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800097c:	bf1e      	ittt	ne
 800097e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000986:	4770      	bxne	lr
 8000988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800098c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_frsub>:
 8000998:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800099c:	e002      	b.n	80009a4 <__addsf3>
 800099e:	bf00      	nop

080009a0 <__aeabi_fsub>:
 80009a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a4 <__addsf3>:
 80009a4:	0042      	lsls	r2, r0, #1
 80009a6:	bf1f      	itttt	ne
 80009a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ac:	ea92 0f03 	teqne	r2, r3
 80009b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b8:	d06a      	beq.n	8000a90 <__addsf3+0xec>
 80009ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c2:	bfc1      	itttt	gt
 80009c4:	18d2      	addgt	r2, r2, r3
 80009c6:	4041      	eorgt	r1, r0
 80009c8:	4048      	eorgt	r0, r1
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	bfb8      	it	lt
 80009ce:	425b      	neglt	r3, r3
 80009d0:	2b19      	cmp	r3, #25
 80009d2:	bf88      	it	hi
 80009d4:	4770      	bxhi	lr
 80009d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4240      	negne	r0, r0
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f2:	bf18      	it	ne
 80009f4:	4249      	negne	r1, r1
 80009f6:	ea92 0f03 	teq	r2, r3
 80009fa:	d03f      	beq.n	8000a7c <__addsf3+0xd8>
 80009fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000a00:	fa41 fc03 	asr.w	ip, r1, r3
 8000a04:	eb10 000c 	adds.w	r0, r0, ip
 8000a08:	f1c3 0320 	rsb	r3, r3, #32
 8000a0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a14:	d502      	bpl.n	8000a1c <__addsf3+0x78>
 8000a16:	4249      	negs	r1, r1
 8000a18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a20:	d313      	bcc.n	8000a4a <__addsf3+0xa6>
 8000a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a26:	d306      	bcc.n	8000a36 <__addsf3+0x92>
 8000a28:	0840      	lsrs	r0, r0, #1
 8000a2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a2e:	f102 0201 	add.w	r2, r2, #1
 8000a32:	2afe      	cmp	r2, #254	; 0xfe
 8000a34:	d251      	bcs.n	8000ada <__addsf3+0x136>
 8000a36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3e:	bf08      	it	eq
 8000a40:	f020 0001 	biceq.w	r0, r0, #1
 8000a44:	ea40 0003 	orr.w	r0, r0, r3
 8000a48:	4770      	bx	lr
 8000a4a:	0049      	lsls	r1, r1, #1
 8000a4c:	eb40 0000 	adc.w	r0, r0, r0
 8000a50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a54:	f1a2 0201 	sub.w	r2, r2, #1
 8000a58:	d1ed      	bne.n	8000a36 <__addsf3+0x92>
 8000a5a:	fab0 fc80 	clz	ip, r0
 8000a5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a62:	ebb2 020c 	subs.w	r2, r2, ip
 8000a66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6a:	bfaa      	itet	ge
 8000a6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a70:	4252      	neglt	r2, r2
 8000a72:	4318      	orrge	r0, r3
 8000a74:	bfbc      	itt	lt
 8000a76:	40d0      	lsrlt	r0, r2
 8000a78:	4318      	orrlt	r0, r3
 8000a7a:	4770      	bx	lr
 8000a7c:	f092 0f00 	teq	r2, #0
 8000a80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a84:	bf06      	itte	eq
 8000a86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8a:	3201      	addeq	r2, #1
 8000a8c:	3b01      	subne	r3, #1
 8000a8e:	e7b5      	b.n	80009fc <__addsf3+0x58>
 8000a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9e:	d021      	beq.n	8000ae4 <__addsf3+0x140>
 8000aa0:	ea92 0f03 	teq	r2, r3
 8000aa4:	d004      	beq.n	8000ab0 <__addsf3+0x10c>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	bf08      	it	eq
 8000aac:	4608      	moveq	r0, r1
 8000aae:	4770      	bx	lr
 8000ab0:	ea90 0f01 	teq	r0, r1
 8000ab4:	bf1c      	itt	ne
 8000ab6:	2000      	movne	r0, #0
 8000ab8:	4770      	bxne	lr
 8000aba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000abe:	d104      	bne.n	8000aca <__addsf3+0x126>
 8000ac0:	0040      	lsls	r0, r0, #1
 8000ac2:	bf28      	it	cs
 8000ac4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	4770      	bx	lr
 8000aca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ace:	bf3c      	itt	cc
 8000ad0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bxcc	lr
 8000ad6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ada:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ae8:	bf16      	itet	ne
 8000aea:	4608      	movne	r0, r1
 8000aec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af0:	4601      	movne	r1, r0
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	bf06      	itte	eq
 8000af6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afa:	ea90 0f01 	teqeq	r0, r1
 8000afe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_ui2f>:
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	e004      	b.n	8000b14 <__aeabi_i2f+0x8>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_i2f>:
 8000b0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	bf48      	it	mi
 8000b12:	4240      	negmi	r0, r0
 8000b14:	ea5f 0c00 	movs.w	ip, r0
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b20:	4601      	mov	r1, r0
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	e01c      	b.n	8000b62 <__aeabi_l2f+0x2a>

08000b28 <__aeabi_ul2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	e00a      	b.n	8000b4c <__aeabi_l2f+0x14>
 8000b36:	bf00      	nop

08000b38 <__aeabi_l2f>:
 8000b38:	ea50 0201 	orrs.w	r2, r0, r1
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__aeabi_l2f+0x14>
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	ea5f 0c01 	movs.w	ip, r1
 8000b50:	bf02      	ittt	eq
 8000b52:	4684      	moveq	ip, r0
 8000b54:	4601      	moveq	r1, r0
 8000b56:	2000      	moveq	r0, #0
 8000b58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b66:	fabc f28c 	clz	r2, ip
 8000b6a:	3a08      	subs	r2, #8
 8000b6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b70:	db10      	blt.n	8000b94 <__aeabi_l2f+0x5c>
 8000b72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b76:	4463      	add	r3, ip
 8000b78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b7c:	f1c2 0220 	rsb	r2, r2, #32
 8000b80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b84:	fa20 f202 	lsr.w	r2, r0, r2
 8000b88:	eb43 0002 	adc.w	r0, r3, r2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f102 0220 	add.w	r2, r2, #32
 8000b98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ba0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ba8:	eb43 0002 	adc.w	r0, r3, r2
 8000bac:	bf08      	it	eq
 8000bae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_fmul>:
 8000bb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc2:	ea92 0f0c 	teqne	r2, ip
 8000bc6:	ea93 0f0c 	teqne	r3, ip
 8000bca:	d06f      	beq.n	8000cac <__aeabi_fmul+0xf8>
 8000bcc:	441a      	add	r2, r3
 8000bce:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd2:	0240      	lsls	r0, r0, #9
 8000bd4:	bf18      	it	ne
 8000bd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bda:	d01e      	beq.n	8000c1a <__aeabi_fmul+0x66>
 8000bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000be8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf4:	bf3e      	ittt	cc
 8000bf6:	0049      	lslcc	r1, r1, #1
 8000bf8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bfc:	005b      	lslcc	r3, r3, #1
 8000bfe:	ea40 0001 	orr.w	r0, r0, r1
 8000c02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c06:	2afd      	cmp	r2, #253	; 0xfd
 8000c08:	d81d      	bhi.n	8000c46 <__aeabi_fmul+0x92>
 8000c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	4770      	bx	lr
 8000c1a:	f090 0f00 	teq	r0, #0
 8000c1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c22:	bf08      	it	eq
 8000c24:	0249      	lsleq	r1, r1, #9
 8000c26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c2e:	3a7f      	subs	r2, #127	; 0x7f
 8000c30:	bfc2      	ittt	gt
 8000c32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3a:	4770      	bxgt	lr
 8000c3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	3a01      	subs	r2, #1
 8000c46:	dc5d      	bgt.n	8000d04 <__aeabi_fmul+0x150>
 8000c48:	f112 0f19 	cmn.w	r2, #25
 8000c4c:	bfdc      	itt	le
 8000c4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c52:	4770      	bxle	lr
 8000c54:	f1c2 0200 	rsb	r2, r2, #0
 8000c58:	0041      	lsls	r1, r0, #1
 8000c5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c5e:	f1c2 0220 	rsb	r2, r2, #32
 8000c62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6a:	f140 0000 	adc.w	r0, r0, #0
 8000c6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c72:	bf08      	it	eq
 8000c74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c78:	4770      	bx	lr
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c82:	bf02      	ittt	eq
 8000c84:	0040      	lsleq	r0, r0, #1
 8000c86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8a:	3a01      	subeq	r2, #1
 8000c8c:	d0f9      	beq.n	8000c82 <__aeabi_fmul+0xce>
 8000c8e:	ea40 000c 	orr.w	r0, r0, ip
 8000c92:	f093 0f00 	teq	r3, #0
 8000c96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0049      	lsleq	r1, r1, #1
 8000c9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca2:	3b01      	subeq	r3, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fmul+0xe6>
 8000ca6:	ea41 010c 	orr.w	r1, r1, ip
 8000caa:	e78f      	b.n	8000bcc <__aeabi_fmul+0x18>
 8000cac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb0:	ea92 0f0c 	teq	r2, ip
 8000cb4:	bf18      	it	ne
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d00a      	beq.n	8000cd2 <__aeabi_fmul+0x11e>
 8000cbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc0:	bf18      	it	ne
 8000cc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cc6:	d1d8      	bne.n	8000c7a <__aeabi_fmul+0xc6>
 8000cc8:	ea80 0001 	eor.w	r0, r0, r1
 8000ccc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f090 0f00 	teq	r0, #0
 8000cd6:	bf17      	itett	ne
 8000cd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	f091 0f00 	teqne	r1, #0
 8000ce2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ce6:	d014      	beq.n	8000d12 <__aeabi_fmul+0x15e>
 8000ce8:	ea92 0f0c 	teq	r2, ip
 8000cec:	d101      	bne.n	8000cf2 <__aeabi_fmul+0x13e>
 8000cee:	0242      	lsls	r2, r0, #9
 8000cf0:	d10f      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000cf2:	ea93 0f0c 	teq	r3, ip
 8000cf6:	d103      	bne.n	8000d00 <__aeabi_fmul+0x14c>
 8000cf8:	024b      	lsls	r3, r1, #9
 8000cfa:	bf18      	it	ne
 8000cfc:	4608      	movne	r0, r1
 8000cfe:	d108      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000d00:	ea80 0001 	eor.w	r0, r0, r1
 8000d04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	4770      	bx	lr
 8000d12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fdiv>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d069      	beq.n	8000e08 <__aeabi_fdiv+0xec>
 8000d34:	eba2 0203 	sub.w	r2, r2, r3
 8000d38:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3c:	0249      	lsls	r1, r1, #9
 8000d3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d42:	d037      	beq.n	8000db4 <__aeabi_fdiv+0x98>
 8000d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf38      	it	cc
 8000d58:	005b      	lslcc	r3, r3, #1
 8000d5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d62:	428b      	cmp	r3, r1
 8000d64:	bf24      	itt	cs
 8000d66:	1a5b      	subcs	r3, r3, r1
 8000d68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d70:	bf24      	itt	cs
 8000d72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d7e:	bf24      	itt	cs
 8000d80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d8c:	bf24      	itt	cs
 8000d8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	bf18      	it	ne
 8000d9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d9e:	d1e0      	bne.n	8000d62 <__aeabi_fdiv+0x46>
 8000da0:	2afd      	cmp	r2, #253	; 0xfd
 8000da2:	f63f af50 	bhi.w	8000c46 <__aeabi_fmul+0x92>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbc:	327f      	adds	r2, #127	; 0x7f
 8000dbe:	bfc2      	ittt	gt
 8000dc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc8:	4770      	bxgt	lr
 8000dca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	e737      	b.n	8000c46 <__aeabi_fmul+0x92>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0040      	lsleq	r0, r0, #1
 8000de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000de6:	3a01      	subeq	r2, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fdiv+0xc2>
 8000dea:	ea40 000c 	orr.w	r0, r0, ip
 8000dee:	f093 0f00 	teq	r3, #0
 8000df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0049      	lsleq	r1, r1, #1
 8000dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dfe:	3b01      	subeq	r3, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fdiv+0xda>
 8000e02:	ea41 010c 	orr.w	r1, r1, ip
 8000e06:	e795      	b.n	8000d34 <__aeabi_fdiv+0x18>
 8000e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d108      	bne.n	8000e24 <__aeabi_fdiv+0x108>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	f47f af7d 	bne.w	8000d12 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	f47f af70 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e776      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e24:	ea93 0f0c 	teq	r3, ip
 8000e28:	d104      	bne.n	8000e34 <__aeabi_fdiv+0x118>
 8000e2a:	024b      	lsls	r3, r1, #9
 8000e2c:	f43f af4c 	beq.w	8000cc8 <__aeabi_fmul+0x114>
 8000e30:	4608      	mov	r0, r1
 8000e32:	e76e      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e38:	bf18      	it	ne
 8000e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	d1ca      	bne.n	8000dd6 <__aeabi_fdiv+0xba>
 8000e40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e44:	f47f af5c 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e4c:	f47f af3c 	bne.w	8000cc8 <__aeabi_fmul+0x114>
 8000e50:	e75f      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e52:	bf00      	nop

08000e54 <_ZL13DS18B20_Resetv>:
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e64:	7e52      	ldrb	r2, [r2, #25]
 8000e66:	4610      	mov	r0, r2
 8000e68:	4798      	blx	r3
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e70:	7e52      	ldrb	r2, [r2, #25]
 8000e72:	2100      	movs	r1, #0
 8000e74:	4610      	mov	r0, r2
 8000e76:	4798      	blx	r3
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000e80:	4798      	blx	r3
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e88:	7e52      	ldrb	r2, [r2, #25]
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4798      	blx	r3
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2050      	movs	r0, #80	; 0x50
 8000e94:	4798      	blx	r3
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000e9c:	7e52      	ldrb	r2, [r2, #25]
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4798      	blx	r3
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <_ZL13DS18B20_Resetv+0x62>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <_ZL13DS18B20_Resetv+0x78>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ebe:	4798      	blx	r3
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000009c 	.word	0x2000009c

08000ed0 <DS18B20_Init>:
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <DS18B20_Init+0x60>)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <DS18B20_Init+0x60>)
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	6053      	str	r3, [r2, #4]
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <DS18B20_Init+0x60>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6093      	str	r3, [r2, #8]
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <DS18B20_Init+0x60>)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	60d3      	str	r3, [r2, #12]
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <DS18B20_Init+0x60>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	6113      	str	r3, [r2, #16]
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <DS18B20_Init+0x60>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	765a      	strb	r2, [r3, #25]
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <DS18B20_Init+0x60>)
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	6153      	str	r3, [r2, #20]
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <DS18B20_Init+0x60>)
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <DS18B20_Init+0x64>)
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	f7ff ffa1 	bl	8000e54 <_ZL13DS18B20_Resetv>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <DS18B20_Init+0x60>)
 8000f18:	761a      	strb	r2, [r3, #24]
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <DS18B20_Init+0x60>)
 8000f1c:	7e1b      	ldrb	r3, [r3, #24]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <DS18B20_Init+0x56>
 8000f22:	f000 f925 	bl	8001170 <_ZL27DS18B20_Convert_Temperaturev>
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000009c 	.word	0x2000009c
 8000f34:	7fc00000 	.word	0x7fc00000

08000f38 <_ZL13DS18B20_Writeh>:
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f48:	7e52      	ldrb	r2, [r2, #25]
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4798      	blx	r3
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b07      	cmp	r3, #7
 8000f56:	dc42      	bgt.n	8000fde <_ZL13DS18B20_Writeh+0xa6>
 8000f58:	79fa      	ldrb	r2, [r7, #7]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	fa42 f303 	asr.w	r3, r2, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d01b      	beq.n	8000fa0 <_ZL13DS18B20_Writeh+0x68>
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f6e:	7e52      	ldrb	r2, [r2, #25]
 8000f70:	4610      	mov	r0, r2
 8000f72:	4798      	blx	r3
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f7a:	7e52      	ldrb	r2, [r2, #25]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4798      	blx	r3
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2001      	movs	r0, #1
 8000f88:	4798      	blx	r3
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f90:	7e52      	ldrb	r2, [r2, #25]
 8000f92:	4610      	mov	r0, r2
 8000f94:	4798      	blx	r3
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	203c      	movs	r0, #60	; 0x3c
 8000f9c:	4798      	blx	r3
 8000f9e:	e01a      	b.n	8000fd6 <_ZL13DS18B20_Writeh+0x9e>
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000fa6:	7e52      	ldrb	r2, [r2, #25]
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4798      	blx	r3
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000fb2:	7e52      	ldrb	r2, [r2, #25]
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4798      	blx	r3
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	203c      	movs	r0, #60	; 0x3c
 8000fc0:	4798      	blx	r3
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000fc8:	7e52      	ldrb	r2, [r2, #25]
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4798      	blx	r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <_ZL13DS18B20_Writeh+0xb0>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	4798      	blx	r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e7b9      	b.n	8000f52 <_ZL13DS18B20_Writeh+0x1a>
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000009c 	.word	0x2000009c

08000fec <_ZL12DS18B20_Readv>:
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 8000ffc:	7e52      	ldrb	r2, [r2, #25]
 8000ffe:	4610      	mov	r0, r2
 8001000:	4798      	blx	r3
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b07      	cmp	r3, #7
 800100a:	dc36      	bgt.n	800107a <_ZL12DS18B20_Readv+0x8e>
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 8001012:	7e52      	ldrb	r2, [r2, #25]
 8001014:	4610      	mov	r0, r2
 8001016:	4798      	blx	r3
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4a19      	ldr	r2, [pc, #100]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 800101e:	7e52      	ldrb	r2, [r2, #25]
 8001020:	2100      	movs	r1, #0
 8001022:	4610      	mov	r0, r2
 8001024:	4798      	blx	r3
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2002      	movs	r0, #2
 800102c:	4798      	blx	r3
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 8001034:	7e52      	ldrb	r2, [r2, #25]
 8001036:	4610      	mov	r0, r2
 8001038:	4798      	blx	r3
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	4a11      	ldr	r2, [pc, #68]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 8001040:	7e52      	ldrb	r2, [r2, #25]
 8001042:	4610      	mov	r0, r2
 8001044:	4798      	blx	r3
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf14      	ite	ne
 800104c:	2301      	movne	r3, #1
 800104e:	2300      	moveq	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d009      	beq.n	800106a <_ZL12DS18B20_Readv+0x7e>
 8001056:	2201      	movs	r2, #1
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	b25a      	sxtb	r2, r3
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4313      	orrs	r3, r2
 8001066:	b25b      	sxtb	r3, r3
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <_ZL12DS18B20_Readv+0x98>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	203c      	movs	r0, #60	; 0x3c
 8001070:	4798      	blx	r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	e7c5      	b.n	8001006 <_ZL12DS18B20_Readv+0x1a>
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000009c 	.word	0x2000009c

08001088 <_ZL23DS18B20_Read_Scratchpadv>:
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2209      	movs	r2, #9
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f003 f95d 	bl	8004354 <memset>
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80010a2:	f7ff fed7 	bl	8000e54 <_ZL13DS18B20_Resetv>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 80010ac:	761a      	strb	r2, [r3, #24]
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 80010b0:	7e1b      	ldrb	r3, [r3, #24]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d055      	beq.n	8001162 <_ZL23DS18B20_Read_Scratchpadv+0xda>
 80010b6:	20cc      	movs	r0, #204	; 0xcc
 80010b8:	f7ff ff3e 	bl	8000f38 <_ZL13DS18B20_Writeh>
 80010bc:	20be      	movs	r0, #190	; 0xbe
 80010be:	f7ff ff3b 	bl	8000f38 <_ZL13DS18B20_Writeh>
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d80d      	bhi.n	80010e8 <_ZL23DS18B20_Read_Scratchpadv+0x60>
 80010cc:	7bfc      	ldrb	r4, [r7, #15]
 80010ce:	f7ff ff8d 	bl	8000fec <_ZL12DS18B20_Readv>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4423      	add	r3, r4
 80010dc:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	3301      	adds	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e7ee      	b.n	80010c6 <_ZL23DS18B20_Read_Scratchpadv+0x3e>
 80010e8:	793b      	ldrb	r3, [r7, #4]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd0c 	bl	8000b0c <__aeabi_i2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fe0e 	bl	8000d1c <__aeabi_fdiv>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 8001106:	621a      	str	r2, [r3, #32]
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 800110a:	6a1c      	ldr	r4, [r3, #32]
 800110c:	793b      	ldrb	r3, [r7, #4]
 800110e:	111b      	asrs	r3, r3, #4
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fcfb 	bl	8000b0c <__aeabi_i2f>
 8001116:	4603      	mov	r3, r0
 8001118:	4619      	mov	r1, r3
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff fc42 	bl	80009a4 <__addsf3>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 8001126:	621a      	str	r2, [r3, #32]
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 800112a:	6a1c      	ldr	r4, [r3, #32]
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fce9 	bl	8000b0c <__aeabi_i2f>
 800113a:	4603      	mov	r3, r0
 800113c:	4619      	mov	r1, r3
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff fc30 	bl	80009a4 <__addsf3>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 800114a:	621a      	str	r2, [r3, #32]
 800114c:	797b      	ldrb	r3, [r7, #5]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <_ZL23DS18B20_Read_Scratchpadv+0xda>
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800115e:	4a03      	ldr	r2, [pc, #12]	; (800116c <_ZL23DS18B20_Read_Scratchpadv+0xe4>)
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	bf00      	nop
 800116c:	2000009c 	.word	0x2000009c

08001170 <_ZL27DS18B20_Convert_Temperaturev>:
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
 8001174:	f7ff fe6e 	bl	8000e54 <_ZL13DS18B20_Resetv>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <_ZL27DS18B20_Convert_Temperaturev+0x3c>)
 800117e:	761a      	strb	r2, [r3, #24]
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <_ZL27DS18B20_Convert_Temperaturev+0x3c>)
 8001182:	7e1b      	ldrb	r3, [r3, #24]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00f      	beq.n	80011a8 <_ZL27DS18B20_Convert_Temperaturev+0x38>
 8001188:	20cc      	movs	r0, #204	; 0xcc
 800118a:	f7ff fed5 	bl	8000f38 <_ZL13DS18B20_Writeh>
 800118e:	2044      	movs	r0, #68	; 0x44
 8001190:	f7ff fed2 	bl	8000f38 <_ZL13DS18B20_Writeh>
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <_ZL27DS18B20_Convert_Temperaturev+0x3c>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	4798      	blx	r3
 800119a:	4602      	mov	r2, r0
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <_ZL27DS18B20_Convert_Temperaturev+0x3c>)
 800119e:	61da      	str	r2, [r3, #28]
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <_ZL27DS18B20_Convert_Temperaturev+0x3c>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000009c 	.word	0x2000009c

080011b0 <DS18B20_Service>:
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <DS18B20_Service+0xb0>)
 80011b6:	7e1b      	ldrb	r3, [r3, #24]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d11f      	bne.n	80011fc <DS18B20_Service+0x4c>
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <DS18B20_Service+0xb0>)
 80011be:	4a29      	ldr	r2, [pc, #164]	; (8001264 <DS18B20_Service+0xb4>)
 80011c0:	621a      	str	r2, [r3, #32]
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <DS18B20_Service+0xb0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <DS18B20_Service+0xb0>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4798      	blx	r3
 80011d0:	4602      	mov	r2, r0
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <DS18B20_Service+0xb0>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	bf8c      	ite	hi
 80011e0:	2301      	movhi	r3, #1
 80011e2:	2300      	movls	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d037      	beq.n	800125a <DS18B20_Service+0xaa>
 80011ea:	f7ff ffc1 	bl	8001170 <_ZL27DS18B20_Convert_Temperaturev>
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <DS18B20_Service+0xb0>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4798      	blx	r3
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <DS18B20_Service+0xb0>)
 80011f8:	61da      	str	r2, [r3, #28]
 80011fa:	e02e      	b.n	800125a <DS18B20_Service+0xaa>
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <DS18B20_Service+0xb0>)
 80011fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001202:	2b00      	cmp	r3, #0
 8001204:	d017      	beq.n	8001236 <DS18B20_Service+0x86>
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <DS18B20_Service+0xb0>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4798      	blx	r3
 800120c:	4602      	mov	r2, r0
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <DS18B20_Service+0xb0>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001218:	bf8c      	ite	hi
 800121a:	2301      	movhi	r3, #1
 800121c:	2300      	movls	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01a      	beq.n	800125a <DS18B20_Service+0xaa>
 8001224:	f7ff ff30 	bl	8001088 <_ZL23DS18B20_Read_Scratchpadv>
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <DS18B20_Service+0xb0>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	4798      	blx	r3
 800122e:	4602      	mov	r2, r0
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <DS18B20_Service+0xb0>)
 8001232:	61da      	str	r2, [r3, #28]
 8001234:	e011      	b.n	800125a <DS18B20_Service+0xaa>
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <DS18B20_Service+0xb0>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4798      	blx	r3
 800123c:	4602      	mov	r2, r0
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <DS18B20_Service+0xb0>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f241 3288 	movw	r2, #5000	; 0x1388
 8001248:	4293      	cmp	r3, r2
 800124a:	bf8c      	ite	hi
 800124c:	2301      	movhi	r3, #1
 800124e:	2300      	movls	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <DS18B20_Service+0xaa>
 8001256:	f7ff ff8b 	bl	8001170 <_ZL27DS18B20_Convert_Temperaturev>
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000009c 	.word	0x2000009c
 8001264:	7fc00000 	.word	0x7fc00000

08001268 <Hardware_Init>:
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <Hardware_Init+0x34>)
 800126e:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <Hardware_Init+0x38>)
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <Hardware_Init+0x3c>)
 8001274:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <Hardware_Init+0x40>)
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <Hardware_Init+0x38>)
 800127a:	f002 fe35 	bl	8003ee8 <HAL_TIM_Base_Start_IT>
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <Hardware_Init+0x44>)
 8001280:	f002 fe32 	bl	8003ee8 <HAL_TIM_Base_Start_IT>
 8001284:	2202      	movs	r2, #2
 8001286:	490a      	ldr	r1, [pc, #40]	; (80012b0 <Hardware_Init+0x48>)
 8001288:	480a      	ldr	r0, [pc, #40]	; (80012b4 <Hardware_Init+0x4c>)
 800128a:	f001 fb05 	bl	8002898 <HAL_ADC_Start_DMA>
 800128e:	2201      	movs	r2, #1
 8001290:	2120      	movs	r1, #32
 8001292:	4809      	ldr	r0, [pc, #36]	; (80012b8 <Hardware_Init+0x50>)
 8001294:	f001 ff47 	bl	8003126 <HAL_GPIO_WritePin>
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000c4 	.word	0x200000c4
 80012a0:	2000021c 	.word	0x2000021c
 80012a4:	200000c8 	.word	0x200000c8
 80012a8:	200001c8 	.word	0x200001c8
 80012ac:	20000264 	.word	0x20000264
 80012b0:	200000cc 	.word	0x200000cc
 80012b4:	20000154 	.word	0x20000154
 80012b8:	40010c00 	.word	0x40010c00

080012bc <Timers_Callback_Service>:
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <Timers_Callback_Service+0x20>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <Timers_Callback_Service+0x16>
 80012ce:	f000 fd4b 	bl	8001d68 <Time_Service>
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40000400 	.word	0x40000400

080012e0 <Transmit_For_LCD>:
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	4603      	mov	r3, r0
 80012ee:	81fb      	strh	r3, [r7, #14]
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <Transmit_For_LCD+0x30>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	89f9      	ldrh	r1, [r7, #14]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4613      	mov	r3, r2
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	f002 f95f 	bl	80035c4 <HAL_I2C_Master_Transmit>
 8001306:	4603      	mov	r3, r0
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200000c8 	.word	0x200000c8

08001314 <Delay_In_Milis>:
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f001 f98b 	bl	8002638 <HAL_Delay>
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <I2C_Reinit_For_LCD>:
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <I2C_Reinit_For_LCD+0x24>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f002 f92b 	bl	8003590 <HAL_I2C_DeInit>
 800133a:	20c8      	movs	r0, #200	; 0xc8
 800133c:	f001 f97c 	bl	8002638 <HAL_Delay>
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <I2C_Reinit_For_LCD+0x24>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f849 	bl	80033dc <HAL_I2C_Init>
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000c8 	.word	0x200000c8

08001354 <Delays_us>:
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <Delays_us+0x38>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <Delays_us+0x38>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	429a      	cmp	r2, r3
 8001374:	bf34      	ite	cc
 8001376:	2301      	movcc	r3, #1
 8001378:	2300      	movcs	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d000      	beq.n	8001382 <Delays_us+0x2e>
 8001380:	e7f2      	b.n	8001368 <Delays_us+0x14>
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	200000c4 	.word	0x200000c4

08001390 <Set_Pin_Output>:
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d81b      	bhi.n	80013d8 <Set_Pin_Output+0x48>
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <Set_Pin_Output+0x50>)
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	2301      	movs	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	2302      	movs	r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <Set_Pin_Output+0x50>)
 80013c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80013ca:	f107 0208 	add.w	r2, r7, #8
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fd39 	bl	8002e48 <HAL_GPIO_Init>
 80013d6:	e000      	b.n	80013da <Set_Pin_Output+0x4a>
 80013d8:	bf00      	nop
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000000 	.word	0x20000000

080013e4 <Set_Pin_Input>:
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d81b      	bhi.n	800142c <Set_Pin_Input+0x48>
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <Set_Pin_Input+0x50>)
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4413      	add	r3, r2
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	2301      	movs	r3, #1
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <Set_Pin_Input+0x50>)
 800141a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800141e:	f107 0208 	add.w	r2, r7, #8
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fd0f 	bl	8002e48 <HAL_GPIO_Init>
 800142a:	e000      	b.n	800142e <Set_Pin_Input+0x4a>
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000000 	.word	0x20000000

08001438 <Write_Pin>:
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	460a      	mov	r2, r1
 8001442:	71fb      	strb	r3, [r7, #7]
 8001444:	4613      	mov	r3, r2
 8001446:	71bb      	strb	r3, [r7, #6]
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d80e      	bhi.n	800146c <Write_Pin+0x34>
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <Write_Pin+0x3c>)
 8001452:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <Write_Pin+0x3c>)
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	b29b      	uxth	r3, r3
 8001462:	79ba      	ldrb	r2, [r7, #6]
 8001464:	4619      	mov	r1, r3
 8001466:	f001 fe5e 	bl	8003126 <HAL_GPIO_WritePin>
 800146a:	e000      	b.n	800146e <Write_Pin+0x36>
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000

08001478 <Read_Pin>:
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d901      	bls.n	800148c <Read_Pin+0x14>
 8001488:	2300      	movs	r3, #0
 800148a:	e00d      	b.n	80014a8 <Read_Pin+0x30>
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <Read_Pin+0x38>)
 8001490:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <Read_Pin+0x38>)
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4413      	add	r3, r2
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4619      	mov	r1, r3
 80014a2:	f001 fe39 	bl	8003118 <HAL_GPIO_ReadPin>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000000 	.word	0x20000000

080014b4 <_ZL18Communication_Initv>:
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2064      	movs	r0, #100	; 0x64
 80014be:	4798      	blx	r3
 80014c0:	2030      	movs	r0, #48	; 0x30
 80014c2:	f000 f997 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	200a      	movs	r0, #10
 80014cc:	4798      	blx	r3
 80014ce:	2030      	movs	r0, #48	; 0x30
 80014d0:	f000 f990 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2001      	movs	r0, #1
 80014da:	4798      	blx	r3
 80014dc:	2030      	movs	r0, #48	; 0x30
 80014de:	f000 f989 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2032      	movs	r0, #50	; 0x32
 80014e8:	4798      	blx	r3
 80014ea:	2020      	movs	r0, #32
 80014ec:	f000 f982 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2032      	movs	r0, #50	; 0x32
 80014f6:	4798      	blx	r3
 80014f8:	2028      	movs	r0, #40	; 0x28
 80014fa:	f000 f97b 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	200a      	movs	r0, #10
 8001504:	4798      	blx	r3
 8001506:	2008      	movs	r0, #8
 8001508:	f000 f974 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	200a      	movs	r0, #10
 8001512:	4798      	blx	r3
 8001514:	2001      	movs	r0, #1
 8001516:	f000 f96d 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	200a      	movs	r0, #10
 8001520:	4798      	blx	r3
 8001522:	2006      	movs	r0, #6
 8001524:	f000 f966 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	200a      	movs	r0, #10
 800152e:	4798      	blx	r3
 8001530:	200c      	movs	r0, #12
 8001532:	f000 f95f 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	200a      	movs	r0, #10
 800153c:	4798      	blx	r3
 800153e:	f000 f8e5 	bl	800170c <LCD_Clear>
 8001542:	4b03      	ldr	r3, [pc, #12]	; (8001550 <_ZL18Communication_Initv+0x9c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2064      	movs	r0, #100	; 0x64
 8001548:	4798      	blx	r3
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200000d4 	.word	0x200000d4

08001554 <LCD_I2C_Init>:
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <LCD_I2C_Init+0x2c>)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	6053      	str	r3, [r2, #4]
 8001566:	4a06      	ldr	r2, [pc, #24]	; (8001580 <LCD_I2C_Init+0x2c>)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <LCD_I2C_Init+0x2c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6093      	str	r3, [r2, #8]
 8001572:	f7ff ff9f 	bl	80014b4 <_ZL18Communication_Initv>
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000d4 	.word	0x200000d4

08001584 <LCD_Set_Shifting_Time>:
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <LCD_Set_Shifting_Time+0x1c>)
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	81d3      	strh	r3, [r2, #14]
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	200000d4 	.word	0x200000d4

080015a4 <LCD_Print_In_Separately_Line>:
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	f200 80a0 	bhi.w	80016f8 <LCD_Print_In_Separately_Line+0x154>
 80015b8:	4b51      	ldr	r3, [pc, #324]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 80015ba:	7b1b      	ldrb	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f040 809b 	bne.w	80016f8 <LCD_Print_In_Separately_Line+0x154>
 80015c2:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 80015c4:	7c1b      	ldrb	r3, [r3, #16]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d00c      	beq.n	80015e4 <LCD_Print_In_Separately_Line+0x40>
 80015ca:	4b4d      	ldr	r3, [pc, #308]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	741a      	strb	r2, [r3, #16]
 80015d0:	2220      	movs	r2, #32
 80015d2:	2100      	movs	r1, #0
 80015d4:	484b      	ldr	r0, [pc, #300]	; (8001704 <LCD_Print_In_Separately_Line+0x160>)
 80015d6:	f002 febd 	bl	8004354 <memset>
 80015da:	2220      	movs	r2, #32
 80015dc:	2100      	movs	r1, #0
 80015de:	484a      	ldr	r0, [pc, #296]	; (8001708 <LCD_Print_In_Separately_Line+0x164>)
 80015e0:	f002 feb8 	bl	8004354 <memset>
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f9f0 	bl	80019cc <_ZL14Set_Blank_Lineh>
 80015ec:	2002      	movs	r0, #2
 80015ee:	f000 f901 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d102      	bne.n	80015fe <LCD_Print_In_Separately_Line+0x5a>
 80015f8:	20c0      	movs	r0, #192	; 0xc0
 80015fa:	f000 f8fb 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d131      	bne.n	8001668 <LCD_Print_In_Separately_Line+0xc4>
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7fe fda1 	bl	800014c <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	2b10      	cmp	r3, #16
 800160e:	d925      	bls.n	800165c <LCD_Print_In_Separately_Line+0xb8>
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7fe fd9b 	bl	800014c <strlen>
 8001616:	4603      	mov	r3, r0
 8001618:	2b20      	cmp	r3, #32
 800161a:	d917      	bls.n	800164c <LCD_Print_In_Separately_Line+0xa8>
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	331b      	adds	r3, #27
 8001622:	6815      	ldr	r5, [r2, #0]
 8001624:	6854      	ldr	r4, [r2, #4]
 8001626:	6890      	ldr	r0, [r2, #8]
 8001628:	68d1      	ldr	r1, [r2, #12]
 800162a:	601d      	str	r5, [r3, #0]
 800162c:	605c      	str	r4, [r3, #4]
 800162e:	6098      	str	r0, [r3, #8]
 8001630:	60d9      	str	r1, [r3, #12]
 8001632:	6915      	ldr	r5, [r2, #16]
 8001634:	6954      	ldr	r4, [r2, #20]
 8001636:	6990      	ldr	r0, [r2, #24]
 8001638:	69d1      	ldr	r1, [r2, #28]
 800163a:	611d      	str	r5, [r3, #16]
 800163c:	615c      	str	r4, [r3, #20]
 800163e:	6198      	str	r0, [r3, #24]
 8001640:	61d9      	str	r1, [r3, #28]
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800164a:	e003      	b.n	8001654 <LCD_Print_In_Separately_Line+0xb0>
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	482d      	ldr	r0, [pc, #180]	; (8001704 <LCD_Print_In_Separately_Line+0x160>)
 8001650:	f002 fed4 	bl	80043fc <strcpy>
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 8001656:	2200      	movs	r2, #0
 8001658:	761a      	strb	r2, [r3, #24]
 800165a:	e039      	b.n	80016d0 <LCD_Print_In_Separately_Line+0x12c>
 800165c:	2220      	movs	r2, #32
 800165e:	2100      	movs	r1, #0
 8001660:	4828      	ldr	r0, [pc, #160]	; (8001704 <LCD_Print_In_Separately_Line+0x160>)
 8001662:	f002 fe77 	bl	8004354 <memset>
 8001666:	e033      	b.n	80016d0 <LCD_Print_In_Separately_Line+0x12c>
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7fe fd6f 	bl	800014c <strlen>
 800166e:	4603      	mov	r3, r0
 8001670:	2b10      	cmp	r3, #16
 8001672:	d928      	bls.n	80016c6 <LCD_Print_In_Separately_Line+0x122>
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7fe fd69 	bl	800014c <strlen>
 800167a:	4603      	mov	r3, r0
 800167c:	2b20      	cmp	r3, #32
 800167e:	d917      	bls.n	80016b0 <LCD_Print_In_Separately_Line+0x10c>
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	333b      	adds	r3, #59	; 0x3b
 8001686:	6815      	ldr	r5, [r2, #0]
 8001688:	6854      	ldr	r4, [r2, #4]
 800168a:	6890      	ldr	r0, [r2, #8]
 800168c:	68d1      	ldr	r1, [r2, #12]
 800168e:	601d      	str	r5, [r3, #0]
 8001690:	605c      	str	r4, [r3, #4]
 8001692:	6098      	str	r0, [r3, #8]
 8001694:	60d9      	str	r1, [r3, #12]
 8001696:	6915      	ldr	r5, [r2, #16]
 8001698:	6954      	ldr	r4, [r2, #20]
 800169a:	6990      	ldr	r0, [r2, #24]
 800169c:	69d1      	ldr	r1, [r2, #28]
 800169e:	611d      	str	r5, [r3, #16]
 80016a0:	615c      	str	r4, [r3, #20]
 80016a2:	6198      	str	r0, [r3, #24]
 80016a4:	61d9      	str	r1, [r3, #28]
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80016ae:	e003      	b.n	80016b8 <LCD_Print_In_Separately_Line+0x114>
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4815      	ldr	r0, [pc, #84]	; (8001708 <LCD_Print_In_Separately_Line+0x164>)
 80016b4:	f002 fea2 	bl	80043fc <strcpy>
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	761a      	strb	r2, [r3, #24]
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	765a      	strb	r2, [r3, #25]
 80016c4:	e004      	b.n	80016d0 <LCD_Print_In_Separately_Line+0x12c>
 80016c6:	2220      	movs	r2, #32
 80016c8:	2100      	movs	r1, #0
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <LCD_Print_In_Separately_Line+0x164>)
 80016cc:	f002 fe42 	bl	8004354 <memset>
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7fe fd3b 	bl	800014c <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d904      	bls.n	80016e6 <LCD_Print_In_Separately_Line+0x142>
 80016dc:	2110      	movs	r1, #16
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f95c 	bl	800199c <_ZL17LCD_Send_String_2PKch>
 80016e4:	e002      	b.n	80016ec <LCD_Print_In_Separately_Line+0x148>
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f8f8 	bl	80018dc <_ZL15LCD_Send_StringPKc>
 80016ec:	f000 fb72 	bl	8001dd4 <Get_Sys_Time>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b03      	ldr	r3, [pc, #12]	; (8001700 <LCD_Print_In_Separately_Line+0x15c>)
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	e000      	b.n	80016fa <LCD_Print_In_Separately_Line+0x156>
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	200000d4 	.word	0x200000d4
 8001704:	200000ef 	.word	0x200000ef
 8001708:	2000010f 	.word	0x2000010f

0800170c <LCD_Clear>:
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <LCD_Clear+0x18>)
 8001712:	7b1b      	ldrb	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <LCD_Clear+0x12>
 8001718:	2001      	movs	r0, #1
 800171a:	f000 f86b 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200000d4 	.word	0x200000d4

08001728 <LCD_Service>:
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
 800172c:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <LCD_Service+0xbc>)
 800172e:	7b1b      	ldrb	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d03b      	beq.n	80017ac <LCD_Service+0x84>
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <LCD_Service+0xbc>)
 8001736:	7c1b      	ldrb	r3, [r3, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01a      	beq.n	8001772 <LCD_Service+0x4a>
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <LCD_Service+0xbc>)
 800173e:	2200      	movs	r2, #0
 8001740:	761a      	strb	r2, [r3, #24]
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <LCD_Service+0xbc>)
 8001744:	2200      	movs	r2, #0
 8001746:	765a      	strb	r2, [r3, #25]
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <LCD_Service+0xbc>)
 800174a:	2200      	movs	r2, #0
 800174c:	769a      	strb	r2, [r3, #26]
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <LCD_Service+0xbc>)
 8001750:	2200      	movs	r2, #0
 8001752:	741a      	strb	r2, [r3, #16]
 8001754:	2220      	movs	r2, #32
 8001756:	2100      	movs	r1, #0
 8001758:	4823      	ldr	r0, [pc, #140]	; (80017e8 <LCD_Service+0xc0>)
 800175a:	f002 fdfb 	bl	8004354 <memset>
 800175e:	2220      	movs	r2, #32
 8001760:	2100      	movs	r1, #0
 8001762:	4822      	ldr	r0, [pc, #136]	; (80017ec <LCD_Service+0xc4>)
 8001764:	f002 fdf6 	bl	8004354 <memset>
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <LCD_Service+0xbc>)
 800176a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176c:	4618      	mov	r0, r3
 800176e:	f002 fde9 	bl	8004344 <free>
 8001772:	f000 fb2f 	bl	8001dd4 <Get_Sys_Time>
 8001776:	4602      	mov	r2, r0
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <LCD_Service+0xbc>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	bf8c      	ite	hi
 8001786:	2301      	movhi	r3, #1
 8001788:	2300      	movls	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <LCD_Service+0x7c>
 8001790:	f000 fb20 	bl	8001dd4 <Get_Sys_Time>
 8001794:	4602      	mov	r2, r0
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <LCD_Service+0xbc>)
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <LCD_Service+0xbc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4798      	blx	r3
 80017a0:	f7ff fe88 	bl	80014b4 <_ZL18Communication_Initv>
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <LCD_Service+0xc8>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e01a      	b.n	80017e2 <LCD_Service+0xba>
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <LCD_Service+0xc8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <LCD_Service+0x9e>
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <LCD_Service+0xc8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <LCD_Service+0xbc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4798      	blx	r3
 80017c0:	f7ff fe78 	bl	80014b4 <_ZL18Communication_Initv>
 80017c4:	e00d      	b.n	80017e2 <LCD_Service+0xba>
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <LCD_Service+0xbc>)
 80017c8:	7c1b      	ldrb	r3, [r3, #16]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d102      	bne.n	80017d4 <LCD_Service+0xac>
 80017ce:	f000 f91f 	bl	8001a10 <_ZL24Separately_Lines_Servicev>
 80017d2:	e006      	b.n	80017e2 <LCD_Service+0xba>
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <LCD_Service+0xbc>)
 80017d6:	7c1b      	ldrb	r3, [r3, #16]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d102      	bne.n	80017e2 <LCD_Service+0xba>
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 f983 	bl	8001ae8 <_ZL18Multi_Line_Serviceh>
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200000d4 	.word	0x200000d4
 80017e8:	200000ef 	.word	0x200000ef
 80017ec:	2000010f 	.word	0x2000010f
 80017f0:	20000134 	.word	0x20000134

080017f4 <_ZL12LCD_Send_Cmdh>:
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f023 030f 	bic.w	r3, r3, #15
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	73bb      	strb	r3, [r7, #14]
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	f043 030c 	orr.w	r3, r3, #12
 8001812:	b2db      	uxtb	r3, r3
 8001814:	723b      	strb	r3, [r7, #8]
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	b2db      	uxtb	r3, r3
 800181e:	727b      	strb	r3, [r7, #9]
 8001820:	7bbb      	ldrb	r3, [r7, #14]
 8001822:	f043 030c 	orr.w	r3, r3, #12
 8001826:	b2db      	uxtb	r3, r3
 8001828:	72bb      	strb	r3, [r7, #10]
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	b2db      	uxtb	r3, r3
 8001832:	72fb      	strb	r3, [r7, #11]
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <_ZL12LCD_Send_Cmdh+0x80>)
 8001836:	681c      	ldr	r4, [r3, #0]
 8001838:	f107 0108 	add.w	r1, r7, #8
 800183c:	23c8      	movs	r3, #200	; 0xc8
 800183e:	2204      	movs	r2, #4
 8001840:	207e      	movs	r0, #126	; 0x7e
 8001842:	47a0      	blx	r4
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <_ZL12LCD_Send_Cmdh+0x80>)
 800184a:	731a      	strb	r2, [r3, #12]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d002      	beq.n	8001858 <_ZL12LCD_Send_Cmdh+0x64>
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d104      	bne.n	8001862 <_ZL12LCD_Send_Cmdh+0x6e>
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <_ZL12LCD_Send_Cmdh+0x80>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2006      	movs	r0, #6
 800185e:	4798      	blx	r3
 8001860:	e003      	b.n	800186a <_ZL12LCD_Send_Cmdh+0x76>
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <_ZL12LCD_Send_Cmdh+0x80>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2001      	movs	r0, #1
 8001868:	4798      	blx	r3
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	200000d4 	.word	0x200000d4

08001878 <_ZL13LCD_Send_Datac>:
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f023 030f 	bic.w	r3, r3, #15
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	73bb      	strb	r3, [r7, #14]
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	f043 030d 	orr.w	r3, r3, #13
 8001896:	b2db      	uxtb	r3, r3
 8001898:	723b      	strb	r3, [r7, #8]
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	f043 0309 	orr.w	r3, r3, #9
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	727b      	strb	r3, [r7, #9]
 80018a4:	7bbb      	ldrb	r3, [r7, #14]
 80018a6:	f043 030d 	orr.w	r3, r3, #13
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	72bb      	strb	r3, [r7, #10]
 80018ae:	7bbb      	ldrb	r3, [r7, #14]
 80018b0:	f043 0309 	orr.w	r3, r3, #9
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	72fb      	strb	r3, [r7, #11]
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_ZL13LCD_Send_Datac+0x60>)
 80018ba:	681c      	ldr	r4, [r3, #0]
 80018bc:	f107 0108 	add.w	r1, r7, #8
 80018c0:	23c8      	movs	r3, #200	; 0xc8
 80018c2:	2204      	movs	r2, #4
 80018c4:	207e      	movs	r0, #126	; 0x7e
 80018c6:	47a0      	blx	r4
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <_ZL13LCD_Send_Datac+0x60>)
 80018ce:	731a      	strb	r2, [r3, #12]
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	200000d4 	.word	0x200000d4

080018dc <_ZL15LCD_Send_StringPKc>:
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d04f      	beq.n	8001994 <_ZL15LCD_Send_StringPKc+0xb8>
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2ba5      	cmp	r3, #165	; 0xa5
 80018fe:	d019      	beq.n	8001934 <_ZL15LCD_Send_StringPKc+0x58>
 8001900:	2ba5      	cmp	r3, #165	; 0xa5
 8001902:	dc0b      	bgt.n	800191c <_ZL15LCD_Send_StringPKc+0x40>
 8001904:	2b88      	cmp	r3, #136	; 0x88
 8001906:	d021      	beq.n	800194c <_ZL15LCD_Send_StringPKc+0x70>
 8001908:	2b88      	cmp	r3, #136	; 0x88
 800190a:	dc02      	bgt.n	8001912 <_ZL15LCD_Send_StringPKc+0x36>
 800190c:	2b86      	cmp	r3, #134	; 0x86
 800190e:	d015      	beq.n	800193c <_ZL15LCD_Send_StringPKc+0x60>
 8001910:	e034      	b.n	800197c <_ZL15LCD_Send_StringPKc+0xa0>
 8001912:	2b98      	cmp	r3, #152	; 0x98
 8001914:	d026      	beq.n	8001964 <_ZL15LCD_Send_StringPKc+0x88>
 8001916:	2ba2      	cmp	r3, #162	; 0xa2
 8001918:	d020      	beq.n	800195c <_ZL15LCD_Send_StringPKc+0x80>
 800191a:	e02f      	b.n	800197c <_ZL15LCD_Send_StringPKc+0xa0>
 800191c:	2bab      	cmp	r3, #171	; 0xab
 800191e:	d025      	beq.n	800196c <_ZL15LCD_Send_StringPKc+0x90>
 8001920:	2bab      	cmp	r3, #171	; 0xab
 8001922:	dc02      	bgt.n	800192a <_ZL15LCD_Send_StringPKc+0x4e>
 8001924:	2ba9      	cmp	r3, #169	; 0xa9
 8001926:	d00d      	beq.n	8001944 <_ZL15LCD_Send_StringPKc+0x68>
 8001928:	e028      	b.n	800197c <_ZL15LCD_Send_StringPKc+0xa0>
 800192a:	2bbe      	cmp	r3, #190	; 0xbe
 800192c:	d022      	beq.n	8001974 <_ZL15LCD_Send_StringPKc+0x98>
 800192e:	2be4      	cmp	r3, #228	; 0xe4
 8001930:	d010      	beq.n	8001954 <_ZL15LCD_Send_StringPKc+0x78>
 8001932:	e023      	b.n	800197c <_ZL15LCD_Send_StringPKc+0xa0>
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff ff9f 	bl	8001878 <_ZL13LCD_Send_Datac>
 800193a:	e027      	b.n	800198c <_ZL15LCD_Send_StringPKc+0xb0>
 800193c:	2001      	movs	r0, #1
 800193e:	f7ff ff9b 	bl	8001878 <_ZL13LCD_Send_Datac>
 8001942:	e023      	b.n	800198c <_ZL15LCD_Send_StringPKc+0xb0>
 8001944:	2002      	movs	r0, #2
 8001946:	f7ff ff97 	bl	8001878 <_ZL13LCD_Send_Datac>
 800194a:	e01f      	b.n	800198c <_ZL15LCD_Send_StringPKc+0xb0>
 800194c:	2003      	movs	r0, #3
 800194e:	f7ff ff93 	bl	8001878 <_ZL13LCD_Send_Datac>
 8001952:	e01b      	b.n	800198c <_ZL15LCD_Send_StringPKc+0xb0>
 8001954:	2004      	movs	r0, #4
 8001956:	f7ff ff8f 	bl	8001878 <_ZL13LCD_Send_Datac>
 800195a:	e017      	b.n	800198c <_ZL15LCD_Send_StringPKc+0xb0>
 800195c:	2005      	movs	r0, #5
 800195e:	f7ff ff8b 	bl	8001878 <_ZL13LCD_Send_Datac>
 8001962:	e013      	b.n	800198c <_ZL15LCD_Send_StringPKc+0xb0>
 8001964:	2006      	movs	r0, #6
 8001966:	f7ff ff87 	bl	8001878 <_ZL13LCD_Send_Datac>
 800196a:	e00f      	b.n	800198c <_ZL15LCD_Send_StringPKc+0xb0>
 800196c:	2007      	movs	r0, #7
 800196e:	f7ff ff83 	bl	8001878 <_ZL13LCD_Send_Datac>
 8001972:	e00b      	b.n	800198c <_ZL15LCD_Send_StringPKc+0xb0>
 8001974:	2007      	movs	r0, #7
 8001976:	f7ff ff7f 	bl	8001878 <_ZL13LCD_Send_Datac>
 800197a:	e007      	b.n	800198c <_ZL15LCD_Send_StringPKc+0xb0>
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff77 	bl	8001878 <_ZL13LCD_Send_Datac>
 800198a:	bf00      	nop
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	3301      	adds	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	e7a9      	b.n	80018e8 <_ZL15LCD_Send_StringPKc+0xc>
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_ZL17LCD_Send_String_2PKch>:
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00a      	beq.n	80019c4 <_ZL17LCD_Send_String_2PKch+0x28>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff5e 	bl	8001878 <_ZL13LCD_Send_Datac>
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	3b01      	subs	r3, #1
 80019c0:	70fb      	strb	r3, [r7, #3]
 80019c2:	e7f1      	b.n	80019a8 <_ZL17LCD_Send_String_2PKch+0xc>
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZL14Set_Blank_Lineh>:
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d103      	bne.n	80019e4 <_ZL14Set_Blank_Lineh+0x18>
 80019dc:	20c0      	movs	r0, #192	; 0xc0
 80019de:	f7ff ff09 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 80019e2:	e002      	b.n	80019ea <_ZL14Set_Blank_Lineh+0x1e>
 80019e4:	2002      	movs	r0, #2
 80019e6:	f7ff ff05 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d806      	bhi.n	8001a02 <_ZL14Set_Blank_Lineh+0x36>
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <_ZL14Set_Blank_Lineh+0x40>)
 80019f6:	f7ff ff71 	bl	80018dc <_ZL15LCD_Send_StringPKc>
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	3301      	adds	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e7f5      	b.n	80019ee <_ZL14Set_Blank_Lineh+0x22>
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	08004428 	.word	0x08004428

08001a10 <_ZL24Separately_Lines_Servicev>:
 8001a10:	b598      	push	{r3, r4, r7, lr}
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a16:	89db      	ldrh	r3, [r3, #14]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d05d      	beq.n	8001ad8 <_ZL24Separately_Lines_Servicev+0xc8>
 8001a1c:	f000 f9da 	bl	8001dd4 <Get_Sys_Time>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a2a:	89d2      	ldrh	r2, [r2, #14]
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	bf2c      	ite	cs
 8001a30:	2301      	movcs	r3, #1
 8001a32:	2300      	movcc	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d04f      	beq.n	8001ada <_ZL24Separately_Lines_Servicev+0xca>
 8001a3a:	f000 f9cb 	bl	8001dd4 <Get_Sys_Time>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b26      	ldr	r3, [pc, #152]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a46:	7edb      	ldrb	r3, [r3, #27]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01f      	beq.n	8001a8c <_ZL24Separately_Lines_Servicev+0x7c>
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a4e:	7e1b      	ldrb	r3, [r3, #24]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a56:	761a      	strb	r2, [r3, #24]
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a5a:	7e1b      	ldrb	r3, [r3, #24]
 8001a5c:	f103 0410 	add.w	r4, r3, #16
 8001a60:	481f      	ldr	r0, [pc, #124]	; (8001ae0 <_ZL24Separately_Lines_Servicev+0xd0>)
 8001a62:	f7fe fb73 	bl	800014c <strlen>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	429c      	cmp	r4, r3
 8001a6c:	dd02      	ble.n	8001a74 <_ZL24Separately_Lines_Servicev+0x64>
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	761a      	strb	r2, [r3, #24]
 8001a74:	2002      	movs	r0, #2
 8001a76:	f7ff febd 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a7c:	7e1b      	ldrb	r3, [r3, #24]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <_ZL24Separately_Lines_Servicev+0xd0>)
 8001a82:	4413      	add	r3, r2
 8001a84:	2110      	movs	r1, #16
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff88 	bl	800199c <_ZL17LCD_Send_String_2PKch>
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a8e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d021      	beq.n	8001ada <_ZL24Separately_Lines_Servicev+0xca>
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001a98:	7e5b      	ldrb	r3, [r3, #25]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001aa0:	765a      	strb	r2, [r3, #25]
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001aa4:	7e5b      	ldrb	r3, [r3, #25]
 8001aa6:	f103 0410 	add.w	r4, r3, #16
 8001aaa:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <_ZL24Separately_Lines_Servicev+0xd4>)
 8001aac:	f7fe fb4e 	bl	800014c <strlen>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	dd02      	ble.n	8001abe <_ZL24Separately_Lines_Servicev+0xae>
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	765a      	strb	r2, [r3, #25]
 8001abe:	20c0      	movs	r0, #192	; 0xc0
 8001ac0:	f7ff fe98 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <_ZL24Separately_Lines_Servicev+0xcc>)
 8001ac6:	7e5b      	ldrb	r3, [r3, #25]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <_ZL24Separately_Lines_Servicev+0xd4>)
 8001acc:	4413      	add	r3, r2
 8001ace:	2110      	movs	r1, #16
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff63 	bl	800199c <_ZL17LCD_Send_String_2PKch>
 8001ad6:	e000      	b.n	8001ada <_ZL24Separately_Lines_Servicev+0xca>
 8001ad8:	bf00      	nop
 8001ada:	bd98      	pop	{r3, r4, r7, pc}
 8001adc:	200000d4 	.word	0x200000d4
 8001ae0:	200000ef 	.word	0x200000ef
 8001ae4:	2000010f 	.word	0x2000010f

08001ae8 <_ZL18Multi_Line_Serviceh>:
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	2300      	movs	r3, #0
 8001af8:	73bb      	strb	r3, [r7, #14]
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001afc:	89db      	ldrh	r3, [r3, #14]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d076      	beq.n	8001bf0 <_ZL18Multi_Line_Serviceh+0x108>
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d072      	beq.n	8001bf0 <_ZL18Multi_Line_Serviceh+0x108>
 8001b0a:	f000 f963 	bl	8001dd4 <Get_Sys_Time>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	4a38      	ldr	r2, [pc, #224]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001b18:	89d2      	ldrh	r2, [r2, #14]
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d202      	bcs.n	8001b24 <_ZL18Multi_Line_Serviceh+0x3c>
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <_ZL18Multi_Line_Serviceh+0x40>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <_ZL18Multi_Line_Serviceh+0x42>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d061      	beq.n	8001bf2 <_ZL18Multi_Line_Serviceh+0x10a>
 8001b2e:	f000 f951 	bl	8001dd4 <Get_Sys_Time>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001b36:	615a      	str	r2, [r3, #20]
 8001b38:	f7ff fde8 	bl	800170c <LCD_Clear>
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001b3e:	7e9b      	ldrb	r3, [r3, #26]
 8001b40:	737b      	strb	r3, [r7, #13]
 8001b42:	7b7c      	ldrb	r4, [r7, #13]
 8001b44:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe faff 	bl	800014c <strlen>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	429c      	cmp	r4, r3
 8001b52:	d23b      	bcs.n	8001bcc <_ZL18Multi_Line_Serviceh+0xe4>
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <_ZL18Multi_Line_Serviceh+0x7c>
 8001b5a:	7b7b      	ldrb	r3, [r7, #13]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001b62:	769a      	strb	r2, [r3, #26]
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001b66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b68:	7b7b      	ldrb	r3, [r7, #13]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b0a      	cmp	r3, #10
 8001b70:	d10b      	bne.n	8001b8a <_ZL18Multi_Line_Serviceh+0xa2>
 8001b72:	2300      	movs	r3, #0
 8001b74:	73bb      	strb	r3, [r7, #14]
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_ZL18Multi_Line_Serviceh+0x9a>
 8001b7c:	20c0      	movs	r0, #192	; 0xc0
 8001b7e:	f7ff fe39 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	3301      	adds	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e01b      	b.n	8001bc2 <_ZL18Multi_Line_Serviceh+0xda>
 8001b8a:	7bbb      	ldrb	r3, [r7, #14]
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d10a      	bne.n	8001ba6 <_ZL18Multi_Line_Serviceh+0xbe>
 8001b90:	2300      	movs	r3, #0
 8001b92:	73bb      	strb	r3, [r7, #14]
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <_ZL18Multi_Line_Serviceh+0xb8>
 8001b9a:	20c0      	movs	r0, #192	; 0xc0
 8001b9c:	f7ff fe2a 	bl	80017f4 <_ZL12LCD_Send_Cmdh>
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d80e      	bhi.n	8001bca <_ZL18Multi_Line_Serviceh+0xe2>
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001bae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb0:	7b7b      	ldrb	r3, [r7, #13]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fe5e 	bl	8001878 <_ZL13LCD_Send_Datac>
 8001bbc:	7bbb      	ldrb	r3, [r7, #14]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	73bb      	strb	r3, [r7, #14]
 8001bc2:	7b7b      	ldrb	r3, [r7, #13]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	737b      	strb	r3, [r7, #13]
 8001bc8:	e7bb      	b.n	8001b42 <_ZL18Multi_Line_Serviceh+0x5a>
 8001bca:	bf00      	nop
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001bce:	7e9b      	ldrb	r3, [r3, #26]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	461c      	mov	r4, r3
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fab5 	bl	800014c <strlen>
 8001be2:	4603      	mov	r3, r0
 8001be4:	429c      	cmp	r4, r3
 8001be6:	d304      	bcc.n	8001bf2 <_ZL18Multi_Line_Serviceh+0x10a>
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <_ZL18Multi_Line_Serviceh+0x110>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	769a      	strb	r2, [r3, #26]
 8001bee:	e000      	b.n	8001bf2 <_ZL18Multi_Line_Serviceh+0x10a>
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd90      	pop	{r4, r7, pc}
 8001bf8:	200000d4 	.word	0x200000d4

08001bfc <Initialize>:
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	f7ff fb31 	bl	8001268 <Hardware_Init>
 8001c06:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <Initialize+0x3c>)
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <Initialize+0x40>)
 8001c0a:	480d      	ldr	r0, [pc, #52]	; (8001c40 <Initialize+0x44>)
 8001c0c:	f7ff fca2 	bl	8001554 <LCD_I2C_Init>
 8001c10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c14:	f7ff fcb6 	bl	8001584 <LCD_Set_Shifting_Time>
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <Initialize+0x48>)
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <Initialize+0x4c>)
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <Initialize+0x50>)
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <Initialize+0x54>)
 8001c24:	490b      	ldr	r1, [pc, #44]	; (8001c54 <Initialize+0x58>)
 8001c26:	480c      	ldr	r0, [pc, #48]	; (8001c58 <Initialize+0x5c>)
 8001c28:	f7ff f952 	bl	8000ed0 <DS18B20_Init>
 8001c2c:	f7ff fd6e 	bl	800170c <LCD_Clear>
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	0800132d 	.word	0x0800132d
 8001c3c:	08001315 	.word	0x08001315
 8001c40:	080012e1 	.word	0x080012e1
 8001c44:	08001dd5 	.word	0x08001dd5
 8001c48:	08001479 	.word	0x08001479
 8001c4c:	08001439 	.word	0x08001439
 8001c50:	08001355 	.word	0x08001355
 8001c54:	08001391 	.word	0x08001391
 8001c58:	080013e5 	.word	0x080013e5

08001c5c <Main_Loop>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	f000 f8c2 	bl	8001de8 <Get_Sys_Seconds>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <Main_Loop+0x4c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <Main_Loop+0x3e>
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <Main_Loop+0x50>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <Main_Loop+0x2e>
 8001c80:	f000 f8b2 	bl	8001de8 <Get_Sys_Seconds>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <Main_Loop+0x4c>)
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4808      	ldr	r0, [pc, #32]	; (8001cb0 <Main_Loop+0x54>)
 8001c8e:	f7ff fc89 	bl	80015a4 <LCD_Print_In_Separately_Line>
 8001c92:	2101      	movs	r1, #1
 8001c94:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <Main_Loop+0x54>)
 8001c96:	f7ff fc85 	bl	80015a4 <LCD_Print_In_Separately_Line>
 8001c9a:	f7ff fa89 	bl	80011b0 <DS18B20_Service>
 8001c9e:	f7ff fd43 	bl	8001728 <LCD_Service>
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000138 	.word	0x20000138
 8001cac:	200000cc 	.word	0x200000cc
 8001cb0:	0800442c 	.word	0x0800442c

08001cb4 <Temperature_Service>:
 8001cb4:	b5b0      	push	{r4, r5, r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <Temperature_Service+0xa0>)
 8001cbe:	88db      	ldrh	r3, [r3, #6]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <Temperature_Service+0xa0>)
 8001cc6:	80da      	strh	r2, [r3, #6]
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <Temperature_Service+0xa4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fba9 	bl	8000424 <__aeabi_f2d>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	460d      	mov	r5, r1
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe ff14 	bl	8000b04 <__aeabi_ui2f>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	491f      	ldr	r1, [pc, #124]	; (8001d5c <Temperature_Service+0xa8>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe ff67 	bl	8000bb4 <__aeabi_fmul>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fb9b 	bl	8000424 <__aeabi_f2d>
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <Temperature_Service+0xac>)
 8001cf4:	f7fe fbee 	bl	80004d4 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f7fe fa32 	bl	8000168 <__adddf3>
 8001d04:	4603      	mov	r3, r0
 8001d06:	460c      	mov	r4, r1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	f7fe fdf4 	bl	80008f8 <__aeabi_d2f>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <Temperature_Service+0xa4>)
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <Temperature_Service+0xa0>)
 8001d18:	88db      	ldrh	r3, [r3, #6]
 8001d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d113      	bne.n	8001d4a <Temperature_Service+0x96>
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <Temperature_Service+0xa0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	80da      	strh	r2, [r3, #6]
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <Temperature_Service+0xa4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	490d      	ldr	r1, [pc, #52]	; (8001d64 <Temperature_Service+0xb0>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fff4 	bl	8000d1c <__aeabi_fdiv>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <Temperature_Service+0xa0>)
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <Temperature_Service+0xa0>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	711a      	strb	r2, [r3, #4]
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <Temperature_Service+0xa4>)
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000013c 	.word	0x2000013c
 8001d58:	20000144 	.word	0x20000144
 8001d5c:	3a534067 	.word	0x3a534067
 8001d60:	40590000 	.word	0x40590000
 8001d64:	477fff00 	.word	0x477fff00

08001d68 <Time_Service>:
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <Time_Service+0x60>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	330a      	adds	r3, #10
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <Time_Service+0x60>)
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <Time_Service+0x60>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <Time_Service+0x64>)
 8001d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d116      	bne.n	8001dbe <Time_Service+0x56>
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <Time_Service+0x60>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	3301      	adds	r3, #1
 8001d96:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <Time_Service+0x60>)
 8001d98:	6053      	str	r3, [r2, #4]
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <Time_Service+0x60>)
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <Time_Service+0x68>)
 8001da0:	fba3 2301 	umull	r2, r3, r3, r1
 8001da4:	095a      	lsrs	r2, r3, #5
 8001da6:	4613      	mov	r3, r2
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	1aca      	subs	r2, r1, r3
 8001db0:	2a00      	cmp	r2, #0
 8001db2:	d104      	bne.n	8001dbe <Time_Service+0x56>
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <Time_Service+0x60>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	3301      	adds	r3, #1
 8001dba:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <Time_Service+0x60>)
 8001dbc:	6093      	str	r3, [r2, #8]
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000148 	.word	0x20000148
 8001dcc:	10624dd3 	.word	0x10624dd3
 8001dd0:	88888889 	.word	0x88888889

08001dd4 <Get_Sys_Time>:
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4b02      	ldr	r3, [pc, #8]	; (8001de4 <Get_Sys_Time+0x10>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	20000148 	.word	0x20000148

08001de8 <Get_Sys_Seconds>:
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <Get_Sys_Seconds+0x10>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	20000148 	.word	0x20000148

08001dfc <main>:
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	f000 fbf6 	bl	80025f0 <HAL_Init>
 8001e04:	f000 f811 	bl	8001e2a <_Z18SystemClock_Configv>
 8001e08:	f000 f9e2 	bl	80021d0 <_ZL12MX_GPIO_Initv>
 8001e0c:	f000 f9c2 	bl	8002194 <_ZL11MX_DMA_Initv>
 8001e10:	f000 f906 	bl	8002020 <_ZL12MX_TIM2_Initv>
 8001e14:	f000 f962 	bl	80020dc <_ZL12MX_TIM3_Initv>
 8001e18:	f000 f8ce 	bl	8001fb8 <_ZL12MX_I2C1_Initv>
 8001e1c:	f000 f870 	bl	8001f00 <_ZL12MX_ADC1_Initv>
 8001e20:	f7ff feec 	bl	8001bfc <Initialize>
 8001e24:	f7ff ff1a 	bl	8001c5c <Main_Loop>
 8001e28:	e7fc      	b.n	8001e24 <main+0x28>

08001e2a <_Z18SystemClock_Configv>:
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b094      	sub	sp, #80	; 0x50
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e34:	2228      	movs	r2, #40	; 0x28
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 fa8b 	bl	8004354 <memset>
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
 8001e68:	2301      	movs	r3, #1
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e76:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 fc6f 	bl	8003764 <HAL_RCC_OscConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <_Z18SystemClock_Configv+0x70>
 8001e96:	f000 fa53 	bl	8002340 <Error_Handler>
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 fe94 	bl	8003be4 <HAL_RCC_ClockConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <_Z18SystemClock_Configv+0xa6>
 8001ecc:	f000 fa38 	bl	8002340 <Error_Handler>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 ff4b 	bl	8003d78 <HAL_RCCEx_PeriphCLKConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <_Z18SystemClock_Configv+0xcc>
 8001ef2:	f000 fa25 	bl	8002340 <Error_Handler>
 8001ef6:	bf00      	nop
 8001ef8:	3750      	adds	r7, #80	; 0x50
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <_ZL12MX_ADC1_Initv>:
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f12:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <_ZL12MX_ADC1_Initv+0xb4>)
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	731a      	strb	r2, [r3, #12]
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	751a      	strb	r2, [r3, #20]
 8001f2a:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f2c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f30:	61da      	str	r2, [r3, #28]
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	481c      	ldr	r0, [pc, #112]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f40:	f000 fd68 	bl	8002a14 <HAL_ADC_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf14      	ite	ne
 8001f4a:	2301      	movne	r3, #1
 8001f4c:	2300      	moveq	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <_ZL12MX_ADC1_Initv+0x58>
 8001f54:	f000 f9f4 	bl	8002340 <Error_Handler>
 8001f58:	230e      	movs	r3, #14
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	2307      	movs	r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	4619      	mov	r1, r3
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f6a:	f000 fbb9 	bl	80026e0 <HAL_ADC_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <_ZL12MX_ADC1_Initv+0x82>
 8001f7e:	f000 f9df 	bl	8002340 <Error_Handler>
 8001f82:	2310      	movs	r3, #16
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	2302      	movs	r3, #2
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001f90:	f000 fba6 	bl	80026e0 <HAL_ADC_ConfigChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <_ZL12MX_ADC1_Initv+0xa8>
 8001fa4:	f000 f9cc 	bl	8002340 <Error_Handler>
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000154 	.word	0x20000154
 8001fb4:	40012400 	.word	0x40012400

08001fb8 <_ZL12MX_I2C1_Initv>:
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001fbe:	4a16      	ldr	r2, [pc, #88]	; (8002018 <_ZL12MX_I2C1_Initv+0x60>)
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001fc4:	4a15      	ldr	r2, [pc, #84]	; (800201c <_ZL12MX_I2C1_Initv+0x64>)
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ff6:	f001 f9f1 	bl	80033dc <HAL_I2C_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <_ZL12MX_I2C1_Initv+0x56>
 800200a:	f000 f999 	bl	8002340 <Error_Handler>
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200001c8 	.word	0x200001c8
 8002018:	40005400 	.word	0x40005400
 800201c:	000186a0 	.word	0x000186a0

08002020 <_ZL12MX_TIM2_Initv>:
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	463b      	mov	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 800203e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002046:	2247      	movs	r2, #71	; 0x47
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	619a      	str	r2, [r3, #24]
 8002064:	481c      	ldr	r0, [pc, #112]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002066:	f002 f86f 	bl	8004148 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_ZL12MX_TIM2_Initv+0x5e>
 800207a:	f000 f961 	bl	8002340 <Error_Handler>
 800207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	4619      	mov	r1, r3
 800208a:	4813      	ldr	r0, [pc, #76]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 800208c:	f002 f892 	bl	80041b4 <HAL_TIM_ConfigClockSource>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <_ZL12MX_TIM2_Initv+0x84>
 80020a0:	f000 f94e 	bl	8002340 <Error_Handler>
 80020a4:	2300      	movs	r3, #0
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	463b      	mov	r3, r7
 80020ae:	4619      	mov	r1, r3
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 80020b2:	f002 f8ed 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <_ZL12MX_TIM2_Initv+0xaa>
 80020c6:	f000 f93b 	bl	8002340 <Error_Handler>
 80020ca:	4803      	ldr	r0, [pc, #12]	; (80020d8 <_ZL12MX_TIM2_Initv+0xb8>)
 80020cc:	f001 ff0c 	bl	8003ee8 <HAL_TIM_Base_Start_IT>
 80020d0:	bf00      	nop
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	2000021c 	.word	0x2000021c

080020dc <_ZL12MX_TIM3_Initv>:
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	463b      	mov	r3, r7
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <_ZL12MX_TIM3_Initv+0xb0>)
 80020fa:	4a25      	ldr	r2, [pc, #148]	; (8002190 <_ZL12MX_TIM3_Initv+0xb4>)
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <_ZL12MX_TIM3_Initv+0xb0>)
 8002100:	2247      	movs	r2, #71	; 0x47
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <_ZL12MX_TIM3_Initv+0xb0>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <_ZL12MX_TIM3_Initv+0xb0>)
 800210c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <_ZL12MX_TIM3_Initv+0xb0>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <_ZL12MX_TIM3_Initv+0xb0>)
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	619a      	str	r2, [r3, #24]
 800211e:	481b      	ldr	r0, [pc, #108]	; (800218c <_ZL12MX_TIM3_Initv+0xb0>)
 8002120:	f002 f812 	bl	8004148 <HAL_TIM_Base_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <_ZL12MX_TIM3_Initv+0x5c>
 8002134:	f000 f904 	bl	8002340 <Error_Handler>
 8002138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	4619      	mov	r1, r3
 8002144:	4811      	ldr	r0, [pc, #68]	; (800218c <_ZL12MX_TIM3_Initv+0xb0>)
 8002146:	f002 f835 	bl	80041b4 <HAL_TIM_ConfigClockSource>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <_ZL12MX_TIM3_Initv+0x82>
 800215a:	f000 f8f1 	bl	8002340 <Error_Handler>
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	463b      	mov	r3, r7
 8002168:	4619      	mov	r1, r3
 800216a:	4808      	ldr	r0, [pc, #32]	; (800218c <_ZL12MX_TIM3_Initv+0xb0>)
 800216c:	f002 f890 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf14      	ite	ne
 8002176:	2301      	movne	r3, #1
 8002178:	2300      	moveq	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <_ZL12MX_TIM3_Initv+0xa8>
 8002180:	f000 f8de 	bl	8002340 <Error_Handler>
 8002184:	bf00      	nop
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000264 	.word	0x20000264
 8002190:	40000400 	.word	0x40000400

08002194 <_ZL11MX_DMA_Initv>:
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <_ZL11MX_DMA_Initv+0x38>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <_ZL11MX_DMA_Initv+0x38>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6153      	str	r3, [r2, #20]
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <_ZL11MX_DMA_Initv+0x38>)
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	200b      	movs	r0, #11
 80021b8:	f000 fcc6 	bl	8002b48 <HAL_NVIC_SetPriority>
 80021bc:	200b      	movs	r0, #11
 80021be:	f000 fcf7 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000

080021d0 <_ZL12MX_GPIO_Initv>:
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a42      	ldr	r2, [pc, #264]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 80021ea:	f043 0320 	orr.w	r3, r3, #32
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a3c      	ldr	r2, [pc, #240]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <_ZL12MX_GPIO_Initv+0x124>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800224a:	482b      	ldr	r0, [pc, #172]	; (80022f8 <_ZL12MX_GPIO_Initv+0x128>)
 800224c:	f000 ff6b 	bl	8003126 <HAL_GPIO_WritePin>
 8002250:	2200      	movs	r2, #0
 8002252:	2104      	movs	r1, #4
 8002254:	4829      	ldr	r0, [pc, #164]	; (80022fc <_ZL12MX_GPIO_Initv+0x12c>)
 8002256:	f000 ff66 	bl	8003126 <HAL_GPIO_WritePin>
 800225a:	2200      	movs	r2, #0
 800225c:	2120      	movs	r1, #32
 800225e:	4828      	ldr	r0, [pc, #160]	; (8002300 <_ZL12MX_GPIO_Initv+0x130>)
 8002260:	f000 ff61 	bl	8003126 <HAL_GPIO_WritePin>
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	4b26      	ldr	r3, [pc, #152]	; (8002304 <_ZL12MX_GPIO_Initv+0x134>)
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4619      	mov	r1, r3
 8002276:	4824      	ldr	r0, [pc, #144]	; (8002308 <_ZL12MX_GPIO_Initv+0x138>)
 8002278:	f000 fde6 	bl	8002e48 <HAL_GPIO_Init>
 800227c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <_ZL12MX_GPIO_Initv+0x134>)
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4619      	mov	r1, r3
 8002290:	4819      	ldr	r0, [pc, #100]	; (80022f8 <_ZL12MX_GPIO_Initv+0x128>)
 8002292:	f000 fdd9 	bl	8002e48 <HAL_GPIO_Init>
 8002296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	2301      	movs	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	2302      	movs	r3, #2
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	f107 0310 	add.w	r3, r7, #16
 80022ac:	4619      	mov	r1, r3
 80022ae:	4812      	ldr	r0, [pc, #72]	; (80022f8 <_ZL12MX_GPIO_Initv+0x128>)
 80022b0:	f000 fdca 	bl	8002e48 <HAL_GPIO_Init>
 80022b4:	2304      	movs	r3, #4
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	2301      	movs	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	2302      	movs	r3, #2
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	4619      	mov	r1, r3
 80022ca:	480c      	ldr	r0, [pc, #48]	; (80022fc <_ZL12MX_GPIO_Initv+0x12c>)
 80022cc:	f000 fdbc 	bl	8002e48 <HAL_GPIO_Init>
 80022d0:	2320      	movs	r3, #32
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	2301      	movs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	2302      	movs	r3, #2
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <_ZL12MX_GPIO_Initv+0x130>)
 80022e8:	f000 fdae 	bl	8002e48 <HAL_GPIO_Init>
 80022ec:	bf00      	nop
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40010800 	.word	0x40010800
 80022fc:	40011400 	.word	0x40011400
 8002300:	40010c00 	.word	0x40010c00
 8002304:	10110000 	.word	0x10110000
 8002308:	40011000 	.word	0x40011000

0800230c <HAL_TIM_PeriodElapsedCallback>:
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7fe ffd1 	bl	80012bc <Timers_Callback_Service>
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_ADC_ConvCpltCallback>:
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f998 	bl	8002660 <HAL_ADC_GetValue>
 8002330:	4603      	mov	r3, r0
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fcbe 	bl	8001cb4 <Temperature_Service>
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <Error_Handler>:
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800234c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_MspInit+0x3c>)
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	619a      	str	r2, [r3, #24]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	f002 0201 	and.w	r2, r2, #1
 800235e:	9200      	str	r2, [sp, #0]
 8002360:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002368:	61da      	str	r2, [r3, #28]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002374:	4a05      	ldr	r2, [pc, #20]	; (800238c <HAL_MspInit+0x40>)
 8002376:	6853      	ldr	r3, [r2, #4]
 8002378:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800237c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002382:	b002      	add	sp, #8
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	40010000 	.word	0x40010000

08002390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002390:	b510      	push	{r4, lr}
 8002392:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	2300      	movs	r3, #0
 8002396:	9302      	str	r3, [sp, #8]
 8002398:	9303      	str	r3, [sp, #12]
 800239a:	9304      	str	r3, [sp, #16]
 800239c:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 800239e:	6802      	ldr	r2, [r0, #0]
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_ADC_MspInit+0x8c>)
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d001      	beq.n	80023aa <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023a6:	b006      	add	sp, #24
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ac:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	619a      	str	r2, [r3, #24]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80023be:	9200      	str	r2, [sp, #0]
 80023c0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	f042 0210 	orr.w	r2, r2, #16
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LM35_IN_Pin;
 80023d4:	2310      	movs	r3, #16
 80023d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023d8:	2303      	movs	r3, #3
 80023da:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 80023dc:	a902      	add	r1, sp, #8
 80023de:	4810      	ldr	r0, [pc, #64]	; (8002420 <HAL_ADC_MspInit+0x90>)
 80023e0:	f000 fd32 	bl	8002e48 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80023e4:	480f      	ldr	r0, [pc, #60]	; (8002424 <HAL_ADC_MspInit+0x94>)
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_ADC_MspInit+0x98>)
 80023e8:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ea:	2300      	movs	r3, #0
 80023ec:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ee:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f8:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023fe:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002400:	2220      	movs	r2, #32
 8002402:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002404:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002406:	f000 fc0d 	bl	8002c24 <HAL_DMA_Init>
 800240a:	b918      	cbnz	r0, 8002414 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_ADC_MspInit+0x94>)
 800240e:	6223      	str	r3, [r4, #32]
 8002410:	625c      	str	r4, [r3, #36]	; 0x24
}
 8002412:	e7c8      	b.n	80023a6 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8002414:	f7ff ff94 	bl	8002340 <Error_Handler>
 8002418:	e7f8      	b.n	800240c <HAL_ADC_MspInit+0x7c>
 800241a:	bf00      	nop
 800241c:	40012400 	.word	0x40012400
 8002420:	40011000 	.word	0x40011000
 8002424:	20000184 	.word	0x20000184
 8002428:	40020008 	.word	0x40020008

0800242c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800242c:	b510      	push	{r4, lr}
 800242e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	2300      	movs	r3, #0
 8002432:	9302      	str	r3, [sp, #8]
 8002434:	9303      	str	r3, [sp, #12]
 8002436:	9304      	str	r3, [sp, #16]
 8002438:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800243a:	6802      	ldr	r2, [r0, #0]
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_I2C_MspInit+0x58>)
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002442:	b006      	add	sp, #24
 8002444:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	4c10      	ldr	r4, [pc, #64]	; (8002488 <HAL_I2C_MspInit+0x5c>)
 8002448:	69a3      	ldr	r3, [r4, #24]
 800244a:	f043 0308 	orr.w	r3, r3, #8
 800244e:	61a3      	str	r3, [r4, #24]
 8002450:	69a3      	ldr	r3, [r4, #24]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800245a:	23c0      	movs	r3, #192	; 0xc0
 800245c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245e:	2312      	movs	r3, #18
 8002460:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002466:	a902      	add	r1, sp, #8
 8002468:	4808      	ldr	r0, [pc, #32]	; (800248c <HAL_I2C_MspInit+0x60>)
 800246a:	f000 fced 	bl	8002e48 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800246e:	69e3      	ldr	r3, [r4, #28]
 8002470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002474:	61e3      	str	r3, [r4, #28]
 8002476:	69e3      	ldr	r3, [r4, #28]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	9b01      	ldr	r3, [sp, #4]
}
 8002480:	e7df      	b.n	8002442 <HAL_I2C_MspInit+0x16>
 8002482:	bf00      	nop
 8002484:	40005400 	.word	0x40005400
 8002488:	40021000 	.word	0x40021000
 800248c:	40010c00 	.word	0x40010c00

08002490 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002490:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8002492:	6802      	ldr	r2, [r0, #0]
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_I2C_MspDeInit+0x20>)
 8002496:	429a      	cmp	r2, r3
 8002498:	d000      	beq.n	800249c <HAL_I2C_MspDeInit+0xc>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800249a:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 800249c:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <HAL_I2C_MspDeInit+0x24>)
 800249e:	69d3      	ldr	r3, [r2, #28]
 80024a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024a4:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, LCD_SCL_Pin|LCD_SDA_Pin);
 80024a6:	21c0      	movs	r1, #192	; 0xc0
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <HAL_I2C_MspDeInit+0x28>)
 80024aa:	f000 fdb9 	bl	8003020 <HAL_GPIO_DeInit>
}
 80024ae:	e7f4      	b.n	800249a <HAL_I2C_MspDeInit+0xa>
 80024b0:	40005400 	.word	0x40005400
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010c00 	.word	0x40010c00

080024bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024bc:	b500      	push	{lr}
 80024be:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 80024c0:	6803      	ldr	r3, [r0, #0]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c6:	d005      	beq.n	80024d4 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80024c8:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_TIM_Base_MspInit+0x58>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00e      	beq.n	80024ec <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024ce:	b003      	add	sp, #12
 80024d0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	61da      	str	r2, [r3, #28]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	9b00      	ldr	r3, [sp, #0]
 80024ea:	e7f0      	b.n	80024ce <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_TIM_Base_MspInit+0x5c>)
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	f042 0202 	orr.w	r2, r2, #2
 80024f4:	61da      	str	r2, [r3, #28]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	4611      	mov	r1, r2
 8002504:	201d      	movs	r0, #29
 8002506:	f000 fb1f 	bl	8002b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800250a:	201d      	movs	r0, #29
 800250c:	f000 fb50 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 8002510:	e7dd      	b.n	80024ce <HAL_TIM_Base_MspInit+0x12>
 8002512:	bf00      	nop
 8002514:	40000400 	.word	0x40000400
 8002518:	40021000 	.word	0x40021000

0800251c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800251c:	4770      	bx	lr

0800251e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251e:	e7fe      	b.n	800251e <HardFault_Handler>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	e7fe      	b.n	8002520 <MemManage_Handler>

08002522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002522:	e7fe      	b.n	8002522 <BusFault_Handler>

08002524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002524:	e7fe      	b.n	8002524 <UsageFault_Handler>

08002526 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002526:	4770      	bx	lr

08002528 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002528:	4770      	bx	lr

0800252a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252a:	4770      	bx	lr

0800252c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800252c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252e:	f000 f871 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002532:	bd08      	pop	{r3, pc}

08002534 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002534:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002536:	4802      	ldr	r0, [pc, #8]	; (8002540 <DMA1_Channel1_IRQHandler+0xc>)
 8002538:	f000 fbe4 	bl	8002d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800253c:	bd08      	pop	{r3, pc}
 800253e:	bf00      	nop
 8002540:	20000184 	.word	0x20000184

08002544 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002544:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002546:	4802      	ldr	r0, [pc, #8]	; (8002550 <TIM3_IRQHandler+0xc>)
 8002548:	f001 fd06 	bl	8003f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800254c:	bd08      	pop	{r3, pc}
 800254e:	bf00      	nop
 8002550:	20000264 	.word	0x20000264

08002554 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	4770      	bx	lr
	...

08002558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002558:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800255a:	e003      	b.n	8002564 <LoopCopyDataInit>

0800255c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800255e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002560:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002562:	3104      	adds	r1, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002564:	480a      	ldr	r0, [pc, #40]	; (8002590 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002568:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800256a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800256c:	d3f6      	bcc.n	800255c <CopyDataInit>
  ldr r2, =_sbss
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002570:	e002      	b.n	8002578 <LoopFillZerobss>

08002572 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002574:	f842 3b04 	str.w	r3, [r2], #4

08002578 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800257a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800257c:	d3f9      	bcc.n	8002572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800257e:	f7ff ffe9 	bl	8002554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002582:	f001 febb 	bl	80042fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002586:	f7ff fc39 	bl	8001dfc <main>
  bx lr
 800258a:	4770      	bx	lr
  ldr r3, =_sidata
 800258c:	08004468 	.word	0x08004468
  ldr r0, =_sdata
 8002590:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002594:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8002598:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 800259c:	200002b4 	.word	0x200002b4

080025a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025a0:	e7fe      	b.n	80025a0 <ADC1_2_IRQHandler>
	...

080025a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a4:	b510      	push	{r4, lr}
 80025a6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_InitTick+0x40>)
 80025aa:	7818      	ldrb	r0, [r3, #0]
 80025ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b0:	fbb3 f3f0 	udiv	r3, r3, r0
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_InitTick+0x44>)
 80025b6:	6810      	ldr	r0, [r2, #0]
 80025b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80025bc:	f000 fb06 	bl	8002bcc <HAL_SYSTICK_Config>
 80025c0:	b968      	cbnz	r0, 80025de <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c2:	2c0f      	cmp	r4, #15
 80025c4:	d901      	bls.n	80025ca <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
 80025c8:	e00a      	b.n	80025e0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ca:	2200      	movs	r2, #0
 80025cc:	4621      	mov	r1, r4
 80025ce:	f04f 30ff 	mov.w	r0, #4294967295
 80025d2:	f000 fab9 	bl	8002b48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_InitTick+0x48>)
 80025d8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025da:	2000      	movs	r0, #0
 80025dc:	e000      	b.n	80025e0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80025de:	2001      	movs	r0, #1
}
 80025e0:	bd10      	pop	{r4, pc}
 80025e2:	bf00      	nop
 80025e4:	20000014 	.word	0x20000014
 80025e8:	20000010 	.word	0x20000010
 80025ec:	20000018 	.word	0x20000018

080025f0 <HAL_Init>:
{
 80025f0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f2:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_Init+0x20>)
 80025f4:	6813      	ldr	r3, [r2, #0]
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f000 fa91 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002602:	2000      	movs	r0, #0
 8002604:	f7ff ffce 	bl	80025a4 <HAL_InitTick>
  HAL_MspInit();
 8002608:	f7ff fea0 	bl	800234c <HAL_MspInit>
}
 800260c:	2000      	movs	r0, #0
 800260e:	bd08      	pop	{r3, pc}
 8002610:	40022000 	.word	0x40022000

08002614 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002614:	4a03      	ldr	r2, [pc, #12]	; (8002624 <HAL_IncTick+0x10>)
 8002616:	6811      	ldr	r1, [r2, #0]
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_IncTick+0x14>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	440b      	add	r3, r1
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	200002b0 	.word	0x200002b0
 8002628:	20000014 	.word	0x20000014

0800262c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800262c:	4b01      	ldr	r3, [pc, #4]	; (8002634 <HAL_GetTick+0x8>)
 800262e:	6818      	ldr	r0, [r3, #0]
}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	200002b0 	.word	0x200002b0

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b538      	push	{r3, r4, r5, lr}
 800263a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800263c:	f7ff fff6 	bl	800262c <HAL_GetTick>
 8002640:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002642:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002646:	d002      	beq.n	800264e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_Delay+0x24>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800264e:	f7ff ffed 	bl	800262c <HAL_GetTick>
 8002652:	1b40      	subs	r0, r0, r5
 8002654:	42a0      	cmp	r0, r4
 8002656:	d3fa      	bcc.n	800264e <HAL_Delay+0x16>
  {
  }
}
 8002658:	bd38      	pop	{r3, r4, r5, pc}
 800265a:	bf00      	nop
 800265c:	20000014 	.word	0x20000014

08002660 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002660:	6803      	ldr	r3, [r0, #0]
 8002662:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002664:	4770      	bx	lr

08002666 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002666:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002668:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800266a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800266c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002670:	d003      	beq.n	800267a <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4798      	blx	r3
  }
}
 8002678:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800267c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	6892      	ldr	r2, [r2, #8]
 8002686:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800268a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800268e:	d003      	beq.n	8002698 <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe46 	bl	8002322 <HAL_ADC_ConvCpltCallback>
 8002696:	e7ef      	b.n	8002678 <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002698:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800269a:	2a00      	cmp	r2, #0
 800269c:	d1f8      	bne.n	8002690 <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800269e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80026ac:	d1f0      	bne.n	8002690 <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
 80026b6:	e7eb      	b.n	8002690 <ADC_DMAConvCplt+0x2a>

080026b8 <HAL_ADC_ConvHalfCpltCallback>:
}
 80026b8:	4770      	bx	lr

080026ba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026ba:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80026be:	f7ff fffb 	bl	80026b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026c2:	bd08      	pop	{r3, pc}

080026c4 <HAL_ADC_ErrorCallback>:
}
 80026c4:	4770      	bx	lr

080026c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026c6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d0:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026da:	f7ff fff3 	bl	80026c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026de:	bd08      	pop	{r3, pc}

080026e0 <HAL_ADC_ConfigChannel>:
{ 
 80026e0:	b430      	push	{r4, r5}
 80026e2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80026e8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f000 808b 	beq.w	8002808 <HAL_ADC_ConfigChannel+0x128>
 80026f2:	4602      	mov	r2, r0
 80026f4:	2301      	movs	r3, #1
 80026f6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80026fa:	684b      	ldr	r3, [r1, #4]
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d829      	bhi.n	8002754 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002700:	6805      	ldr	r5, [r0, #0]
 8002702:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8002704:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002708:	3b05      	subs	r3, #5
 800270a:	241f      	movs	r4, #31
 800270c:	409c      	lsls	r4, r3
 800270e:	ea20 0004 	bic.w	r0, r0, r4
 8002712:	680c      	ldr	r4, [r1, #0]
 8002714:	fa04 f303 	lsl.w	r3, r4, r3
 8002718:	4303      	orrs	r3, r0
 800271a:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800271c:	680b      	ldr	r3, [r1, #0]
 800271e:	2b09      	cmp	r3, #9
 8002720:	d938      	bls.n	8002794 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002722:	6815      	ldr	r5, [r2, #0]
 8002724:	68e8      	ldr	r0, [r5, #12]
 8002726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800272a:	3b1e      	subs	r3, #30
 800272c:	2407      	movs	r4, #7
 800272e:	409c      	lsls	r4, r3
 8002730:	ea20 0004 	bic.w	r0, r0, r4
 8002734:	688c      	ldr	r4, [r1, #8]
 8002736:	fa04 f303 	lsl.w	r3, r4, r3
 800273a:	4303      	orrs	r3, r0
 800273c:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800273e:	680b      	ldr	r3, [r1, #0]
 8002740:	3b10      	subs	r3, #16
 8002742:	2b01      	cmp	r3, #1
 8002744:	d934      	bls.n	80027b0 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002746:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002748:	2300      	movs	r3, #0
 800274a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 800274e:	b002      	add	sp, #8
 8002750:	bc30      	pop	{r4, r5}
 8002752:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d80e      	bhi.n	8002776 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002758:	6805      	ldr	r5, [r0, #0]
 800275a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800275c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002760:	3b23      	subs	r3, #35	; 0x23
 8002762:	241f      	movs	r4, #31
 8002764:	409c      	lsls	r4, r3
 8002766:	ea20 0004 	bic.w	r0, r0, r4
 800276a:	680c      	ldr	r4, [r1, #0]
 800276c:	fa04 f303 	lsl.w	r3, r4, r3
 8002770:	4303      	orrs	r3, r0
 8002772:	632b      	str	r3, [r5, #48]	; 0x30
 8002774:	e7d2      	b.n	800271c <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002776:	6805      	ldr	r5, [r0, #0]
 8002778:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800277a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800277e:	3b41      	subs	r3, #65	; 0x41
 8002780:	241f      	movs	r4, #31
 8002782:	409c      	lsls	r4, r3
 8002784:	ea20 0004 	bic.w	r0, r0, r4
 8002788:	680c      	ldr	r4, [r1, #0]
 800278a:	fa04 f303 	lsl.w	r3, r4, r3
 800278e:	4303      	orrs	r3, r0
 8002790:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002792:	e7c3      	b.n	800271c <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002794:	6815      	ldr	r5, [r2, #0]
 8002796:	6928      	ldr	r0, [r5, #16]
 8002798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800279c:	2407      	movs	r4, #7
 800279e:	409c      	lsls	r4, r3
 80027a0:	ea20 0004 	bic.w	r0, r0, r4
 80027a4:	688c      	ldr	r4, [r1, #8]
 80027a6:	fa04 f303 	lsl.w	r3, r4, r3
 80027aa:	4303      	orrs	r3, r0
 80027ac:	612b      	str	r3, [r5, #16]
 80027ae:	e7c6      	b.n	800273e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80027b0:	6813      	ldr	r3, [r2, #0]
 80027b2:	4816      	ldr	r0, [pc, #88]	; (800280c <HAL_ADC_ConfigChannel+0x12c>)
 80027b4:	4283      	cmp	r3, r0
 80027b6:	d005      	beq.n	80027c4 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80027ba:	f043 0320 	orr.w	r3, r3, #32
 80027be:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80027c0:	2001      	movs	r0, #1
 80027c2:	e7c1      	b.n	8002748 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027c4:	6898      	ldr	r0, [r3, #8]
 80027c6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80027ca:	d11b      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027cc:	6898      	ldr	r0, [r3, #8]
 80027ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80027d2:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80027d4:	680b      	ldr	r3, [r1, #0]
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d001      	beq.n	80027de <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027da:	2000      	movs	r0, #0
 80027dc:	e7b4      	b.n	8002748 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_ADC_ConfigChannel+0x130>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	490c      	ldr	r1, [pc, #48]	; (8002814 <HAL_ADC_ConfigChannel+0x134>)
 80027e4:	fba1 1303 	umull	r1, r3, r1, r3
 80027e8:	0c9b      	lsrs	r3, r3, #18
 80027ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027ee:	0059      	lsls	r1, r3, #1
 80027f0:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80027f2:	e002      	b.n	80027fa <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 80027f4:	9b01      	ldr	r3, [sp, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80027fa:	9b01      	ldr	r3, [sp, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002800:	2000      	movs	r0, #0
 8002802:	e7a1      	b.n	8002748 <HAL_ADC_ConfigChannel+0x68>
 8002804:	2000      	movs	r0, #0
 8002806:	e79f      	b.n	8002748 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8002808:	2002      	movs	r0, #2
 800280a:	e7a0      	b.n	800274e <HAL_ADC_ConfigChannel+0x6e>
 800280c:	40012400 	.word	0x40012400
 8002810:	20000010 	.word	0x20000010
 8002814:	431bde83 	.word	0x431bde83

08002818 <ADC_Enable>:
{
 8002818:	b530      	push	{r4, r5, lr}
 800281a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002820:	6803      	ldr	r3, [r0, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	f012 0f01 	tst.w	r2, #1
 8002828:	d12e      	bne.n	8002888 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <ADC_Enable+0x78>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a17      	ldr	r2, [pc, #92]	; (8002894 <ADC_Enable+0x7c>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002840:	e002      	b.n	8002848 <ADC_Enable+0x30>
      wait_loop_index--;
 8002842:	9b01      	ldr	r3, [sp, #4]
 8002844:	3b01      	subs	r3, #1
 8002846:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002848:	9b01      	ldr	r3, [sp, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f9      	bne.n	8002842 <ADC_Enable+0x2a>
 800284e:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002850:	f7ff feec 	bl	800262c <HAL_GetTick>
 8002854:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f013 0f01 	tst.w	r3, #1
 800285e:	d111      	bne.n	8002884 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002860:	f7ff fee4 	bl	800262c <HAL_GetTick>
 8002864:	1b40      	subs	r0, r0, r5
 8002866:	2802      	cmp	r0, #2
 8002868:	d9f5      	bls.n	8002856 <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002872:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800287a:	2300      	movs	r3, #0
 800287c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8002880:	2001      	movs	r0, #1
 8002882:	e002      	b.n	800288a <ADC_Enable+0x72>
  return HAL_OK;
 8002884:	2000      	movs	r0, #0
 8002886:	e000      	b.n	800288a <ADC_Enable+0x72>
 8002888:	2000      	movs	r0, #0
}
 800288a:	b003      	add	sp, #12
 800288c:	bd30      	pop	{r4, r5, pc}
 800288e:	bf00      	nop
 8002890:	20000010 	.word	0x20000010
 8002894:	431bde83 	.word	0x431bde83

08002898 <HAL_ADC_Start_DMA>:
{
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800289a:	6804      	ldr	r4, [r0, #0]
 800289c:	4d45      	ldr	r5, [pc, #276]	; (80029b4 <HAL_ADC_Start_DMA+0x11c>)
 800289e:	42ac      	cmp	r4, r5
 80028a0:	d05b      	beq.n	800295a <HAL_ADC_Start_DMA+0xc2>
 80028a2:	4b45      	ldr	r3, [pc, #276]	; (80029b8 <HAL_ADC_Start_DMA+0x120>)
 80028a4:	429c      	cmp	r4, r3
 80028a6:	d058      	beq.n	800295a <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 80028a8:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80028ac:	2c01      	cmp	r4, #1
 80028ae:	d07e      	beq.n	80029ae <HAL_ADC_Start_DMA+0x116>
 80028b0:	4616      	mov	r6, r2
 80028b2:	460d      	mov	r5, r1
 80028b4:	4604      	mov	r4, r0
 80028b6:	2301      	movs	r3, #1
 80028b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80028bc:	f7ff ffac 	bl	8002818 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80028c0:	4607      	mov	r7, r0
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d16e      	bne.n	80029a4 <HAL_ADC_Start_DMA+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 80028c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028d6:	6822      	ldr	r2, [r4, #0]
 80028d8:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_ADC_Start_DMA+0x120>)
 80028da:	429a      	cmp	r2, r3
 80028dc:	d044      	beq.n	8002968 <HAL_ADC_Start_DMA+0xd0>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028e4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028e6:	6853      	ldr	r3, [r2, #4]
 80028e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80028ec:	d005      	beq.n	80028fa <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028f8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002900:	d048      	beq.n	8002994 <HAL_ADC_Start_DMA+0xfc>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002902:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002904:	f023 0306 	bic.w	r3, r3, #6
 8002908:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800290a:	2300      	movs	r3, #0
 800290c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002910:	6a23      	ldr	r3, [r4, #32]
 8002912:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <HAL_ADC_Start_DMA+0x124>)
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002916:	6a23      	ldr	r3, [r4, #32]
 8002918:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <HAL_ADC_Start_DMA+0x128>)
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800291c:	6a23      	ldr	r3, [r4, #32]
 800291e:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <HAL_ADC_Start_DMA+0x12c>)
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	f06f 0202 	mvn.w	r2, #2
 8002928:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800292a:	6822      	ldr	r2, [r4, #0]
 800292c:	6893      	ldr	r3, [r2, #8]
 800292e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002932:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002934:	6821      	ldr	r1, [r4, #0]
 8002936:	4633      	mov	r3, r6
 8002938:	462a      	mov	r2, r5
 800293a:	314c      	adds	r1, #76	; 0x4c
 800293c:	6a20      	ldr	r0, [r4, #32]
 800293e:	f000 f9a7 	bl	8002c90 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	6893      	ldr	r3, [r2, #8]
 8002946:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800294a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800294e:	d024      	beq.n	800299a <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002950:	6893      	ldr	r3, [r2, #8]
 8002952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002956:	6093      	str	r3, [r2, #8]
 8002958:	e027      	b.n	80029aa <HAL_ADC_Start_DMA+0x112>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <HAL_ADC_Start_DMA+0x11c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002962:	d0a1      	beq.n	80028a8 <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_ERROR;
 8002964:	2701      	movs	r7, #1
 8002966:	e020      	b.n	80029aa <HAL_ADC_Start_DMA+0x112>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002968:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002972:	d0b4      	beq.n	80028de <HAL_ADC_Start_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002974:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_ADC_Start_DMA+0x11c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002984:	d0b9      	beq.n	80028fa <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800298c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002990:	62a3      	str	r3, [r4, #40]	; 0x28
 8002992:	e7b2      	b.n	80028fa <HAL_ADC_Start_DMA+0x62>
        ADC_CLEAR_ERRORCODE(hadc);
 8002994:	2300      	movs	r3, #0
 8002996:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002998:	e7b7      	b.n	800290a <HAL_ADC_Start_DMA+0x72>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800299a:	6893      	ldr	r3, [r2, #8]
 800299c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80029a0:	6093      	str	r3, [r2, #8]
 80029a2:	e002      	b.n	80029aa <HAL_ADC_Start_DMA+0x112>
      __HAL_UNLOCK(hadc);
 80029a4:	2300      	movs	r3, #0
 80029a6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80029aa:	4638      	mov	r0, r7
 80029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80029ae:	2702      	movs	r7, #2
 80029b0:	e7fb      	b.n	80029aa <HAL_ADC_Start_DMA+0x112>
 80029b2:	bf00      	nop
 80029b4:	40012400 	.word	0x40012400
 80029b8:	40012800 	.word	0x40012800
 80029bc:	08002667 	.word	0x08002667
 80029c0:	080026bb 	.word	0x080026bb
 80029c4:	080026c7 	.word	0x080026c7

080029c8 <ADC_ConversionStop_Disable>:
{
 80029c8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029ca:	6803      	ldr	r3, [r0, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	f012 0f01 	tst.w	r2, #1
 80029d2:	d101      	bne.n	80029d8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80029d4:	2000      	movs	r0, #0
}
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80029e2:	f7ff fe23 	bl	800262c <HAL_GetTick>
 80029e6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f013 0f01 	tst.w	r3, #1
 80029f0:	d00e      	beq.n	8002a10 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029f2:	f7ff fe1b 	bl	800262c <HAL_GetTick>
 80029f6:	1b40      	subs	r0, r0, r5
 80029f8:	2802      	cmp	r0, #2
 80029fa:	d9f5      	bls.n	80029e8 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029fe:	f043 0310 	orr.w	r3, r3, #16
 8002a02:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	e7e2      	b.n	80029d6 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002a10:	2000      	movs	r0, #0
 8002a12:	e7e0      	b.n	80029d6 <ADC_ConversionStop_Disable+0xe>

08002a14 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d07f      	beq.n	8002b18 <HAL_ADC_Init+0x104>
{
 8002a18:	b538      	push	{r3, r4, r5, lr}
 8002a1a:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d033      	beq.n	8002a8a <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff ffd0 	bl	80029c8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a2a:	f013 0310 	ands.w	r3, r3, #16
 8002a2e:	d16d      	bne.n	8002b0c <HAL_ADC_Init+0xf8>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d16b      	bne.n	8002b0c <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 8002a34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a36:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002a3a:	f022 0202 	bic.w	r2, r2, #2
 8002a3e:	f042 0202 	orr.w	r2, r2, #2
 8002a42:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a44:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a46:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a48:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a4a:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a4c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a50:	68a1      	ldr	r1, [r4, #8]
 8002a52:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002a56:	d021      	beq.n	8002a9c <HAL_ADC_Init+0x88>
 8002a58:	2901      	cmp	r1, #1
 8002a5a:	d01c      	beq.n	8002a96 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a5c:	7d21      	ldrb	r1, [r4, #20]
 8002a5e:	2901      	cmp	r1, #1
 8002a60:	d01f      	beq.n	8002aa2 <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 8002a62:	6825      	ldr	r5, [r4, #0]
 8002a64:	6869      	ldr	r1, [r5, #4]
 8002a66:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002a6e:	6821      	ldr	r1, [r4, #0]
 8002a70:	688d      	ldr	r5, [r1, #8]
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_ADC_Init+0x108>)
 8002a74:	402b      	ands	r3, r5
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a7a:	68a3      	ldr	r3, [r4, #8]
 8002a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a80:	d020      	beq.n	8002ac4 <HAL_ADC_Init+0xb0>
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d01e      	beq.n	8002ac4 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 8002a86:	2100      	movs	r1, #0
 8002a88:	e01f      	b.n	8002aca <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a8a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002a8c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002a90:	f7ff fc7e 	bl	8002390 <HAL_ADC_MspInit>
 8002a94:	e7c5      	b.n	8002a22 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a9a:	e7df      	b.n	8002a5c <HAL_ADC_Init+0x48>
 8002a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa0:	e7dc      	b.n	8002a5c <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002aa2:	b935      	cbnz	r5, 8002ab2 <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002aa4:	69a1      	ldr	r1, [r4, #24]
 8002aa6:	3901      	subs	r1, #1
 8002aa8:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8002aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ab0:	e7d7      	b.n	8002a62 <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ab4:	f041 0120 	orr.w	r1, r1, #32
 8002ab8:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002abc:	f041 0101 	orr.w	r1, r1, #1
 8002ac0:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002ac2:	e7ce      	b.n	8002a62 <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ac4:	6923      	ldr	r3, [r4, #16]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002aca:	6825      	ldr	r5, [r4, #0]
 8002acc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_ADC_Init+0x10c>)
 8002adc:	400b      	ands	r3, r1
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d00b      	beq.n	8002afa <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 8002ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ae4:	f023 0312 	bic.w	r3, r3, #18
 8002ae8:	f043 0310 	orr.w	r3, r3, #16
 8002aec:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8002af6:	2001      	movs	r0, #1
 8002af8:	e00d      	b.n	8002b16 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8002afa:	2300      	movs	r3, #0
 8002afc:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b00:	f023 0303 	bic.w	r3, r3, #3
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b0a:	e004      	b.n	8002b16 <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b0e:	f043 0310 	orr.w	r3, r3, #16
 8002b12:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
}
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002b18:	2001      	movs	r0, #1
}
 8002b1a:	4770      	bx	lr
 8002b1c:	ffe1f7fd 	.word	0xffe1f7fd
 8002b20:	ff1f0efe 	.word	0xff1f0efe

08002b24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b26:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b30:	0200      	lsls	r0, r0, #8
 8002b32:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b36:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002b38:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002b3c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b40:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b48:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_NVIC_SetPriority+0x60>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b52:	f1c3 0407 	rsb	r4, r3, #7
 8002b56:	2c04      	cmp	r4, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5c:	1d1d      	adds	r5, r3, #4
 8002b5e:	2d06      	cmp	r5, #6
 8002b60:	d918      	bls.n	8002b94 <HAL_NVIC_SetPriority+0x4c>
 8002b62:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 35ff 	mov.w	r5, #4294967295
 8002b68:	fa05 f404 	lsl.w	r4, r5, r4
 8002b6c:	ea21 0104 	bic.w	r1, r1, r4
 8002b70:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b72:	fa05 f303 	lsl.w	r3, r5, r3
 8002b76:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	db0b      	blt.n	8002b98 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	0109      	lsls	r1, r1, #4
 8002b82:	b2c9      	uxtb	r1, r1
 8002b84:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b88:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b8c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b90:	bc30      	pop	{r4, r5}
 8002b92:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b94:	2300      	movs	r3, #0
 8002b96:	e7e5      	b.n	8002b64 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	f000 000f 	and.w	r0, r0, #15
 8002b9c:	0109      	lsls	r1, r1, #4
 8002b9e:	b2c9      	uxtb	r1, r1
 8002ba0:	4b02      	ldr	r3, [pc, #8]	; (8002bac <HAL_NVIC_SetPriority+0x64>)
 8002ba2:	5419      	strb	r1, [r3, r0]
 8002ba4:	e7f4      	b.n	8002b90 <HAL_NVIC_SetPriority+0x48>
 8002ba6:	bf00      	nop
 8002ba8:	e000ed00 	.word	0xe000ed00
 8002bac:	e000ed14 	.word	0xe000ed14

08002bb0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	db07      	blt.n	8002bc4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb4:	f000 021f 	and.w	r2, r0, #31
 8002bb8:	0940      	lsrs	r0, r0, #5
 8002bba:	2301      	movs	r3, #1
 8002bbc:	4093      	lsls	r3, r2
 8002bbe:	4a02      	ldr	r2, [pc, #8]	; (8002bc8 <HAL_NVIC_EnableIRQ+0x18>)
 8002bc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	3801      	subs	r0, #1
 8002bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002bd2:	d20a      	bcs.n	8002bea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_SYSTICK_Config+0x24>)
 8002bd6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <HAL_SYSTICK_Config+0x28>)
 8002bda:	21f0      	movs	r1, #240	; 0xf0
 8002bdc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be0:	2000      	movs	r0, #0
 8002be2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000e010 	.word	0xe000e010
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf8:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bfa:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002bfc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002bfe:	2401      	movs	r4, #1
 8002c00:	40b4      	lsls	r4, r6
 8002c02:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c04:	6804      	ldr	r4, [r0, #0]
 8002c06:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c08:	6843      	ldr	r3, [r0, #4]
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d005      	beq.n	8002c1a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c0e:	6803      	ldr	r3, [r0, #0]
 8002c10:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c12:	6803      	ldr	r3, [r0, #0]
 8002c14:	60da      	str	r2, [r3, #12]
  }
}
 8002c16:	bc70      	pop	{r4, r5, r6}
 8002c18:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002c1a:	6803      	ldr	r3, [r0, #0]
 8002c1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c1e:	6803      	ldr	r3, [r0, #0]
 8002c20:	60d9      	str	r1, [r3, #12]
 8002c22:	e7f8      	b.n	8002c16 <DMA_SetConfig+0x1e>

08002c24 <HAL_DMA_Init>:
  if(hdma == NULL)
 8002c24:	b360      	cbz	r0, 8002c80 <HAL_DMA_Init+0x5c>
{
 8002c26:	b410      	push	{r4}
 8002c28:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c2a:	6801      	ldr	r1, [r0, #0]
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_DMA_Init+0x60>)
 8002c2e:	440b      	add	r3, r1
 8002c30:	4815      	ldr	r0, [pc, #84]	; (8002c88 <HAL_DMA_Init+0x64>)
 8002c32:	fba0 0303 	umull	r0, r3, r0, r3
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_DMA_Init+0x68>)
 8002c3e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c40:	2302      	movs	r3, #2
 8002c42:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002c46:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c48:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8002c4c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8002c50:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c52:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 8002c54:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	68d4      	ldr	r4, [r2, #12]
 8002c58:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5a:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5e:	6954      	ldr	r4, [r2, #20]
 8002c60:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c62:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c64:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c66:	69d4      	ldr	r4, [r2, #28]
 8002c68:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002c6a:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8002c6c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6e:	2000      	movs	r0, #0
 8002c70:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002c78:	f882 0020 	strb.w	r0, [r2, #32]
}
 8002c7c:	bc10      	pop	{r4}
 8002c7e:	4770      	bx	lr
    return HAL_ERROR;
 8002c80:	2001      	movs	r0, #1
}
 8002c82:	4770      	bx	lr
 8002c84:	bffdfff8 	.word	0xbffdfff8
 8002c88:	cccccccd 	.word	0xcccccccd
 8002c8c:	40020000 	.word	0x40020000

08002c90 <HAL_DMA_Start_IT>:
{
 8002c90:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8002c92:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002c96:	2c01      	cmp	r4, #1
 8002c98:	d032      	beq.n	8002d00 <HAL_DMA_Start_IT+0x70>
 8002c9a:	2401      	movs	r4, #1
 8002c9c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ca0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8002ca4:	2c01      	cmp	r4, #1
 8002ca6:	d004      	beq.n	8002cb2 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8002cae:	2002      	movs	r0, #2
}
 8002cb0:	bd38      	pop	{r3, r4, r5, pc}
 8002cb2:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cba:	2000      	movs	r0, #0
 8002cbc:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002cbe:	6825      	ldr	r5, [r4, #0]
 8002cc0:	6828      	ldr	r0, [r5, #0]
 8002cc2:	f020 0001 	bic.w	r0, r0, #1
 8002cc6:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f7ff ff95 	bl	8002bf8 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8002cce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cd0:	b15b      	cbz	r3, 8002cea <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	6813      	ldr	r3, [r2, #0]
 8002cd6:	f043 030e 	orr.w	r3, r3, #14
 8002cda:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002cdc:	6822      	ldr	r2, [r4, #0]
 8002cde:	6813      	ldr	r3, [r2, #0]
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	e7e2      	b.n	8002cb0 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cea:	6822      	ldr	r2, [r4, #0]
 8002cec:	6813      	ldr	r3, [r2, #0]
 8002cee:	f023 0304 	bic.w	r3, r3, #4
 8002cf2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cf4:	6822      	ldr	r2, [r4, #0]
 8002cf6:	6813      	ldr	r3, [r2, #0]
 8002cf8:	f043 030a 	orr.w	r3, r3, #10
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e7ed      	b.n	8002cdc <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002d00:	2002      	movs	r0, #2
 8002d02:	e7d5      	b.n	8002cb0 <HAL_DMA_Start_IT+0x20>

08002d04 <HAL_DMA_IRQHandler>:
{
 8002d04:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d06:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002d08:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002d0a:	6804      	ldr	r4, [r0, #0]
 8002d0c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d0e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002d10:	2304      	movs	r3, #4
 8002d12:	408b      	lsls	r3, r1
 8002d14:	4213      	tst	r3, r2
 8002d16:	d035      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x80>
 8002d18:	f015 0f04 	tst.w	r5, #4
 8002d1c:	d032      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	f013 0f20 	tst.w	r3, #32
 8002d24:	d103      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d2e:	6803      	ldr	r3, [r0, #0]
 8002d30:	4a43      	ldr	r2, [pc, #268]	; (8002e40 <HAL_DMA_IRQHandler+0x13c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d014      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x5c>
 8002d36:	3214      	adds	r2, #20
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d018      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x6a>
 8002d3c:	3214      	adds	r2, #20
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d017      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x6e>
 8002d42:	3214      	adds	r2, #20
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d017      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x74>
 8002d48:	3214      	adds	r2, #20
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d017      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x7a>
 8002d4e:	3214      	adds	r2, #20
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d002      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x56>
 8002d54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d58:	e003      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5e>
 8002d5a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002d5e:	e000      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5e>
 8002d60:	2204      	movs	r2, #4
 8002d62:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <HAL_DMA_IRQHandler+0x140>)
 8002d64:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002d66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d68:	b103      	cbz	r3, 8002d6c <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8002d6a:	4798      	blx	r3
}
 8002d6c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d6e:	2240      	movs	r2, #64	; 0x40
 8002d70:	e7f7      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5e>
 8002d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d76:	e7f4      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5e>
 8002d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d7c:	e7f1      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5e>
 8002d7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d82:	e7ee      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d84:	2302      	movs	r3, #2
 8002d86:	408b      	lsls	r3, r1
 8002d88:	4213      	tst	r3, r2
 8002d8a:	d03c      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x102>
 8002d8c:	f015 0f02 	tst.w	r5, #2
 8002d90:	d039      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	f013 0f20 	tst.w	r3, #32
 8002d98:	d106      	bne.n	8002da8 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	f023 030a 	bic.w	r3, r3, #10
 8002da0:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002da8:	6803      	ldr	r3, [r0, #0]
 8002daa:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <HAL_DMA_IRQHandler+0x13c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d014      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd6>
 8002db0:	3214      	adds	r2, #20
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01c      	beq.n	8002df0 <HAL_DMA_IRQHandler+0xec>
 8002db6:	3214      	adds	r2, #20
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d01b      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xf0>
 8002dbc:	3214      	adds	r2, #20
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01b      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xf6>
 8002dc2:	3214      	adds	r2, #20
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01b      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xfc>
 8002dc8:	3214      	adds	r2, #20
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d002      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0xd0>
 8002dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd2:	e003      	b.n	8002ddc <HAL_DMA_IRQHandler+0xd8>
 8002dd4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002dd8:	e000      	b.n	8002ddc <HAL_DMA_IRQHandler+0xd8>
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_DMA_IRQHandler+0x140>)
 8002dde:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002de0:	2300      	movs	r3, #0
 8002de2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002de6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0bf      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8002dec:	4798      	blx	r3
 8002dee:	e7bd      	b.n	8002d6c <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002df0:	2220      	movs	r2, #32
 8002df2:	e7f3      	b.n	8002ddc <HAL_DMA_IRQHandler+0xd8>
 8002df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df8:	e7f0      	b.n	8002ddc <HAL_DMA_IRQHandler+0xd8>
 8002dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dfe:	e7ed      	b.n	8002ddc <HAL_DMA_IRQHandler+0xd8>
 8002e00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e04:	e7ea      	b.n	8002ddc <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e06:	2308      	movs	r3, #8
 8002e08:	fa03 f101 	lsl.w	r1, r3, r1
 8002e0c:	4211      	tst	r1, r2
 8002e0e:	d0ad      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x68>
 8002e10:	f015 0f08 	tst.w	r5, #8
 8002e14:	d0aa      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	f023 030e 	bic.w	r3, r3, #14
 8002e1c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e1e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002e20:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002e22:	2301      	movs	r3, #1
 8002e24:	fa03 f202 	lsl.w	r2, r3, r2
 8002e28:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e2a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002e30:	2300      	movs	r3, #0
 8002e32:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002e36:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d097      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8002e3c:	4798      	blx	r3
  return;
 8002e3e:	e795      	b.n	8002d6c <HAL_DMA_IRQHandler+0x68>
 8002e40:	40020008 	.word	0x40020008
 8002e44:	40020000 	.word	0x40020000

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b4f0      	push	{r4, r5, r6, r7}
 8002e4a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e4c:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8002e4e:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e50:	e0a2      	b.n	8002f98 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e52:	2d00      	cmp	r5, #0
 8002e54:	d05a      	beq.n	8002f0c <HAL_GPIO_Init+0xc4>
 8002e56:	2d01      	cmp	r5, #1
 8002e58:	d100      	bne.n	8002e5c <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e5a:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e5c:	2bff      	cmp	r3, #255	; 0xff
 8002e5e:	d869      	bhi.n	8002f34 <HAL_GPIO_Init+0xec>
 8002e60:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e62:	2bff      	cmp	r3, #255	; 0xff
 8002e64:	d869      	bhi.n	8002f3a <HAL_GPIO_Init+0xf2>
 8002e66:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e68:	f8dc 4000 	ldr.w	r4, [ip]
 8002e6c:	270f      	movs	r7, #15
 8002e6e:	40af      	lsls	r7, r5
 8002e70:	ea24 0407 	bic.w	r4, r4, r7
 8002e74:	fa06 f505 	lsl.w	r5, r6, r5
 8002e78:	432c      	orrs	r4, r5
 8002e7a:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e7e:	684c      	ldr	r4, [r1, #4]
 8002e80:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002e84:	f000 8087 	beq.w	8002f96 <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e88:	4c5f      	ldr	r4, [pc, #380]	; (8003008 <HAL_GPIO_Init+0x1c0>)
 8002e8a:	69a5      	ldr	r5, [r4, #24]
 8002e8c:	f045 0501 	orr.w	r5, r5, #1
 8002e90:	61a5      	str	r5, [r4, #24]
 8002e92:	69a4      	ldr	r4, [r4, #24]
 8002e94:	f004 0401 	and.w	r4, r4, #1
 8002e98:	9401      	str	r4, [sp, #4]
 8002e9a:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002e9c:	0895      	lsrs	r5, r2, #2
 8002e9e:	1caf      	adds	r7, r5, #2
 8002ea0:	4c5a      	ldr	r4, [pc, #360]	; (800300c <HAL_GPIO_Init+0x1c4>)
 8002ea2:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ea6:	f002 0703 	and.w	r7, r2, #3
 8002eaa:	00bf      	lsls	r7, r7, #2
 8002eac:	f04f 0c0f 	mov.w	ip, #15
 8002eb0:	fa0c fc07 	lsl.w	ip, ip, r7
 8002eb4:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002eb8:	4c55      	ldr	r4, [pc, #340]	; (8003010 <HAL_GPIO_Init+0x1c8>)
 8002eba:	42a0      	cmp	r0, r4
 8002ebc:	d043      	beq.n	8002f46 <HAL_GPIO_Init+0xfe>
 8002ebe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ec2:	42a0      	cmp	r0, r4
 8002ec4:	f000 8081 	beq.w	8002fca <HAL_GPIO_Init+0x182>
 8002ec8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ecc:	42a0      	cmp	r0, r4
 8002ece:	d07e      	beq.n	8002fce <HAL_GPIO_Init+0x186>
 8002ed0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ed4:	42a0      	cmp	r0, r4
 8002ed6:	d034      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002ed8:	2404      	movs	r4, #4
 8002eda:	e035      	b.n	8002f48 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8002edc:	4f4d      	ldr	r7, [pc, #308]	; (8003014 <HAL_GPIO_Init+0x1cc>)
 8002ede:	42bd      	cmp	r5, r7
 8002ee0:	d014      	beq.n	8002f0c <HAL_GPIO_Init+0xc4>
 8002ee2:	d90b      	bls.n	8002efc <HAL_GPIO_Init+0xb4>
 8002ee4:	4f4c      	ldr	r7, [pc, #304]	; (8003018 <HAL_GPIO_Init+0x1d0>)
 8002ee6:	42bd      	cmp	r5, r7
 8002ee8:	d010      	beq.n	8002f0c <HAL_GPIO_Init+0xc4>
 8002eea:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002eee:	42bd      	cmp	r5, r7
 8002ef0:	d00c      	beq.n	8002f0c <HAL_GPIO_Init+0xc4>
 8002ef2:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002ef6:	42bd      	cmp	r5, r7
 8002ef8:	d1b0      	bne.n	8002e5c <HAL_GPIO_Init+0x14>
 8002efa:	e007      	b.n	8002f0c <HAL_GPIO_Init+0xc4>
 8002efc:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002f00:	42bd      	cmp	r5, r7
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0xc4>
 8002f04:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002f08:	42bd      	cmp	r5, r7
 8002f0a:	d1a7      	bne.n	8002e5c <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f0c:	688d      	ldr	r5, [r1, #8]
 8002f0e:	b17d      	cbz	r5, 8002f30 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f10:	2d01      	cmp	r5, #1
 8002f12:	d008      	beq.n	8002f26 <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8002f14:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f16:	2608      	movs	r6, #8
 8002f18:	e7a0      	b.n	8002e5c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f1a:	68ce      	ldr	r6, [r1, #12]
 8002f1c:	3608      	adds	r6, #8
          break;
 8002f1e:	e79d      	b.n	8002e5c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f20:	68ce      	ldr	r6, [r1, #12]
 8002f22:	360c      	adds	r6, #12
          break;
 8002f24:	e79a      	b.n	8002e5c <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8002f26:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f28:	2608      	movs	r6, #8
 8002f2a:	e797      	b.n	8002e5c <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f2c:	2600      	movs	r6, #0
 8002f2e:	e795      	b.n	8002e5c <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f30:	2604      	movs	r6, #4
 8002f32:	e793      	b.n	8002e5c <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f34:	f100 0c04 	add.w	ip, r0, #4
 8002f38:	e793      	b.n	8002e62 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f3a:	f1a2 0508 	sub.w	r5, r2, #8
 8002f3e:	00ad      	lsls	r5, r5, #2
 8002f40:	e792      	b.n	8002e68 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f42:	2403      	movs	r4, #3
 8002f44:	e000      	b.n	8002f48 <HAL_GPIO_Init+0x100>
 8002f46:	2400      	movs	r4, #0
 8002f48:	40bc      	lsls	r4, r7
 8002f4a:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8002f4e:	3502      	adds	r5, #2
 8002f50:	4f2e      	ldr	r7, [pc, #184]	; (800300c <HAL_GPIO_Init+0x1c4>)
 8002f52:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f56:	684c      	ldr	r4, [r1, #4]
 8002f58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8002f5c:	d039      	beq.n	8002fd2 <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f5e:	4d2f      	ldr	r5, [pc, #188]	; (800301c <HAL_GPIO_Init+0x1d4>)
 8002f60:	682c      	ldr	r4, [r5, #0]
 8002f62:	431c      	orrs	r4, r3
 8002f64:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f66:	684c      	ldr	r4, [r1, #4]
 8002f68:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8002f6c:	d037      	beq.n	8002fde <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f6e:	4d2b      	ldr	r5, [pc, #172]	; (800301c <HAL_GPIO_Init+0x1d4>)
 8002f70:	686c      	ldr	r4, [r5, #4]
 8002f72:	431c      	orrs	r4, r3
 8002f74:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f76:	684c      	ldr	r4, [r1, #4]
 8002f78:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8002f7c:	d035      	beq.n	8002fea <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f7e:	4d27      	ldr	r5, [pc, #156]	; (800301c <HAL_GPIO_Init+0x1d4>)
 8002f80:	68ac      	ldr	r4, [r5, #8]
 8002f82:	431c      	orrs	r4, r3
 8002f84:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f86:	684c      	ldr	r4, [r1, #4]
 8002f88:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8002f8c:	d033      	beq.n	8002ff6 <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f8e:	4d23      	ldr	r5, [pc, #140]	; (800301c <HAL_GPIO_Init+0x1d4>)
 8002f90:	68ec      	ldr	r4, [r5, #12]
 8002f92:	4323      	orrs	r3, r4
 8002f94:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8002f96:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f98:	680b      	ldr	r3, [r1, #0]
 8002f9a:	fa33 f402 	lsrs.w	r4, r3, r2
 8002f9e:	d030      	beq.n	8003002 <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8002fa0:	2401      	movs	r4, #1
 8002fa2:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa4:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8002fa6:	429c      	cmp	r4, r3
 8002fa8:	d1f5      	bne.n	8002f96 <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 8002faa:	684d      	ldr	r5, [r1, #4]
 8002fac:	2d12      	cmp	r5, #18
 8002fae:	d0b7      	beq.n	8002f20 <HAL_GPIO_Init+0xd8>
 8002fb0:	d894      	bhi.n	8002edc <HAL_GPIO_Init+0x94>
 8002fb2:	2d02      	cmp	r5, #2
 8002fb4:	d0b1      	beq.n	8002f1a <HAL_GPIO_Init+0xd2>
 8002fb6:	f67f af4c 	bls.w	8002e52 <HAL_GPIO_Init+0xa>
 8002fba:	2d03      	cmp	r5, #3
 8002fbc:	d0b6      	beq.n	8002f2c <HAL_GPIO_Init+0xe4>
 8002fbe:	2d11      	cmp	r5, #17
 8002fc0:	f47f af4c 	bne.w	8002e5c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fc4:	68ce      	ldr	r6, [r1, #12]
 8002fc6:	3604      	adds	r6, #4
          break;
 8002fc8:	e748      	b.n	8002e5c <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fca:	2401      	movs	r4, #1
 8002fcc:	e7bc      	b.n	8002f48 <HAL_GPIO_Init+0x100>
 8002fce:	2402      	movs	r4, #2
 8002fd0:	e7ba      	b.n	8002f48 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fd2:	4d12      	ldr	r5, [pc, #72]	; (800301c <HAL_GPIO_Init+0x1d4>)
 8002fd4:	682c      	ldr	r4, [r5, #0]
 8002fd6:	ea24 0403 	bic.w	r4, r4, r3
 8002fda:	602c      	str	r4, [r5, #0]
 8002fdc:	e7c3      	b.n	8002f66 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fde:	4d0f      	ldr	r5, [pc, #60]	; (800301c <HAL_GPIO_Init+0x1d4>)
 8002fe0:	686c      	ldr	r4, [r5, #4]
 8002fe2:	ea24 0403 	bic.w	r4, r4, r3
 8002fe6:	606c      	str	r4, [r5, #4]
 8002fe8:	e7c5      	b.n	8002f76 <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fea:	4d0c      	ldr	r5, [pc, #48]	; (800301c <HAL_GPIO_Init+0x1d4>)
 8002fec:	68ac      	ldr	r4, [r5, #8]
 8002fee:	ea24 0403 	bic.w	r4, r4, r3
 8002ff2:	60ac      	str	r4, [r5, #8]
 8002ff4:	e7c7      	b.n	8002f86 <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ff6:	4d09      	ldr	r5, [pc, #36]	; (800301c <HAL_GPIO_Init+0x1d4>)
 8002ff8:	68ec      	ldr	r4, [r5, #12]
 8002ffa:	ea24 0303 	bic.w	r3, r4, r3
 8002ffe:	60eb      	str	r3, [r5, #12]
 8003000:	e7c9      	b.n	8002f96 <HAL_GPIO_Init+0x14e>
  }
}
 8003002:	b002      	add	sp, #8
 8003004:	bcf0      	pop	{r4, r5, r6, r7}
 8003006:	4770      	bx	lr
 8003008:	40021000 	.word	0x40021000
 800300c:	40010000 	.word	0x40010000
 8003010:	40010800 	.word	0x40010800
 8003014:	10210000 	.word	0x10210000
 8003018:	10310000 	.word	0x10310000
 800301c:	40010400 	.word	0x40010400

08003020 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003020:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003022:	e068      	b.n	80030f6 <HAL_GPIO_DeInit+0xd6>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003024:	2603      	movs	r6, #3
 8003026:	e000      	b.n	800302a <HAL_GPIO_DeInit+0xa>
 8003028:	2600      	movs	r6, #0
 800302a:	fa06 f404 	lsl.w	r4, r6, r4
 800302e:	42ac      	cmp	r4, r5
 8003030:	d03f      	beq.n	80030b2 <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003032:	2bff      	cmp	r3, #255	; 0xff
 8003034:	d855      	bhi.n	80030e2 <HAL_GPIO_DeInit+0xc2>
 8003036:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003038:	2bff      	cmp	r3, #255	; 0xff
 800303a:	d855      	bhi.n	80030e8 <HAL_GPIO_DeInit+0xc8>
 800303c:	0097      	lsls	r7, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800303e:	f8dc 4000 	ldr.w	r4, [ip]
 8003042:	260f      	movs	r6, #15
 8003044:	40be      	lsls	r6, r7
 8003046:	ea24 0406 	bic.w	r4, r4, r6
 800304a:	2504      	movs	r5, #4
 800304c:	40bd      	lsls	r5, r7
 800304e:	432c      	orrs	r4, r5
 8003050:	f8cc 4000 	str.w	r4, [ip]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003054:	68c4      	ldr	r4, [r0, #12]
 8003056:	ea24 0303 	bic.w	r3, r4, r3
 800305a:	60c3      	str	r3, [r0, #12]
    }

    position++;
 800305c:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 800305e:	fa31 f302 	lsrs.w	r3, r1, r2
 8003062:	d045      	beq.n	80030f0 <HAL_GPIO_DeInit+0xd0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003064:	2301      	movs	r3, #1
 8003066:	4093      	lsls	r3, r2
    if (iocurrent)
 8003068:	400b      	ands	r3, r1
 800306a:	d0f7      	beq.n	800305c <HAL_GPIO_DeInit+0x3c>
      tmp = AFIO->EXTICR[position >> 2u];
 800306c:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8003070:	f10c 0502 	add.w	r5, ip, #2
 8003074:	4c25      	ldr	r4, [pc, #148]	; (800310c <HAL_GPIO_DeInit+0xec>)
 8003076:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800307a:	f002 0403 	and.w	r4, r2, #3
 800307e:	00a4      	lsls	r4, r4, #2
 8003080:	260f      	movs	r6, #15
 8003082:	fa06 f704 	lsl.w	r7, r6, r4
 8003086:	403d      	ands	r5, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003088:	4e21      	ldr	r6, [pc, #132]	; (8003110 <HAL_GPIO_DeInit+0xf0>)
 800308a:	42b0      	cmp	r0, r6
 800308c:	d0cc      	beq.n	8003028 <HAL_GPIO_DeInit+0x8>
 800308e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003092:	42b0      	cmp	r0, r6
 8003094:	d009      	beq.n	80030aa <HAL_GPIO_DeInit+0x8a>
 8003096:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800309a:	42b0      	cmp	r0, r6
 800309c:	d007      	beq.n	80030ae <HAL_GPIO_DeInit+0x8e>
 800309e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80030a2:	42b0      	cmp	r0, r6
 80030a4:	d0be      	beq.n	8003024 <HAL_GPIO_DeInit+0x4>
 80030a6:	2604      	movs	r6, #4
 80030a8:	e7bf      	b.n	800302a <HAL_GPIO_DeInit+0xa>
 80030aa:	2601      	movs	r6, #1
 80030ac:	e7bd      	b.n	800302a <HAL_GPIO_DeInit+0xa>
 80030ae:	2602      	movs	r6, #2
 80030b0:	e7bb      	b.n	800302a <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80030b2:	4d16      	ldr	r5, [pc, #88]	; (800310c <HAL_GPIO_DeInit+0xec>)
 80030b4:	f10c 0402 	add.w	r4, ip, #2
 80030b8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80030bc:	ea26 0607 	bic.w	r6, r6, r7
 80030c0:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80030c4:	4c13      	ldr	r4, [pc, #76]	; (8003114 <HAL_GPIO_DeInit+0xf4>)
 80030c6:	6826      	ldr	r6, [r4, #0]
 80030c8:	43dd      	mvns	r5, r3
 80030ca:	402e      	ands	r6, r5
 80030cc:	6026      	str	r6, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80030ce:	6866      	ldr	r6, [r4, #4]
 80030d0:	402e      	ands	r6, r5
 80030d2:	6066      	str	r6, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80030d4:	68a6      	ldr	r6, [r4, #8]
 80030d6:	402e      	ands	r6, r5
 80030d8:	60a6      	str	r6, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80030da:	68e6      	ldr	r6, [r4, #12]
 80030dc:	4035      	ands	r5, r6
 80030de:	60e5      	str	r5, [r4, #12]
 80030e0:	e7a7      	b.n	8003032 <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030e2:	f100 0c04 	add.w	ip, r0, #4
 80030e6:	e7a7      	b.n	8003038 <HAL_GPIO_DeInit+0x18>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030e8:	f1a2 0508 	sub.w	r5, r2, #8
 80030ec:	00af      	lsls	r7, r5, #2
 80030ee:	e7a6      	b.n	800303e <HAL_GPIO_DeInit+0x1e>
  }
}
 80030f0:	bcf0      	pop	{r4, r5, r6, r7}
 80030f2:	4770      	bx	lr
    position++;
 80030f4:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 80030f6:	fa31 f302 	lsrs.w	r3, r1, r2
 80030fa:	d005      	beq.n	8003108 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80030fc:	2301      	movs	r3, #1
 80030fe:	4093      	lsls	r3, r2
    if (iocurrent)
 8003100:	400b      	ands	r3, r1
 8003102:	d0f7      	beq.n	80030f4 <HAL_GPIO_DeInit+0xd4>
{
 8003104:	b4f0      	push	{r4, r5, r6, r7}
 8003106:	e7b1      	b.n	800306c <HAL_GPIO_DeInit+0x4c>
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40010000 	.word	0x40010000
 8003110:	40010800 	.word	0x40010800
 8003114:	40010400 	.word	0x40010400

08003118 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003118:	6883      	ldr	r3, [r0, #8]
 800311a:	4219      	tst	r1, r3
 800311c:	d101      	bne.n	8003122 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800311e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003120:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8003122:	2001      	movs	r0, #1
 8003124:	4770      	bx	lr

08003126 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003126:	b912      	cbnz	r2, 800312e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003128:	0409      	lsls	r1, r1, #16
 800312a:	6101      	str	r1, [r0, #16]
  }
}
 800312c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800312e:	6101      	str	r1, [r0, #16]
 8003130:	4770      	bx	lr

08003132 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003132:	6803      	ldr	r3, [r0, #0]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800313a:	d011      	beq.n	8003160 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003140:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	2300      	movs	r3, #0
 8003144:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003146:	2220      	movs	r2, #32
 8003148:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003150:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003152:	f042 0204 	orr.w	r2, r2, #4
 8003156:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003158:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 800315c:	2001      	movs	r0, #1
 800315e:	4770      	bx	lr
  }
  return HAL_OK;
 8003160:	2000      	movs	r0, #0
}
 8003162:	4770      	bx	lr

08003164 <I2C_WaitOnFlagUntilTimeout>:
{
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	4606      	mov	r6, r0
 8003168:	460c      	mov	r4, r1
 800316a:	4617      	mov	r7, r2
 800316c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800316e:	e022      	b.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003170:	f7ff fa5c 	bl	800262c <HAL_GetTick>
 8003174:	9b06      	ldr	r3, [sp, #24]
 8003176:	1ac0      	subs	r0, r0, r3
 8003178:	42a8      	cmp	r0, r5
 800317a:	d800      	bhi.n	800317e <I2C_WaitOnFlagUntilTimeout+0x1a>
 800317c:	b9dd      	cbnz	r5, 80031b6 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800317e:	2300      	movs	r3, #0
 8003180:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003182:	2220      	movs	r2, #32
 8003184:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003188:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003194:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8003198:	2001      	movs	r0, #1
 800319a:	e01a      	b.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319c:	6833      	ldr	r3, [r6, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	ea24 0303 	bic.w	r3, r4, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	429f      	cmp	r7, r3
 80031ae:	d10f      	bne.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80031b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80031b4:	d1dc      	bne.n	8003170 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b6:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d0ee      	beq.n	800319c <I2C_WaitOnFlagUntilTimeout+0x38>
 80031be:	6833      	ldr	r3, [r6, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	ea24 0303 	bic.w	r3, r4, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	e7ed      	b.n	80031ac <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 80031d0:	2000      	movs	r0, #0
}
 80031d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	4604      	mov	r4, r0
 80031d8:	460d      	mov	r5, r1
 80031da:	4616      	mov	r6, r2
 80031dc:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031de:	e03c      	b.n	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ee:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f4:	2220      	movs	r2, #32
 80031f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003200:	f042 0204 	orr.w	r2, r2, #4
 8003204:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003206:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800320a:	2001      	movs	r0, #1
 800320c:	e033      	b.n	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7ff fa0d 	bl	800262c <HAL_GetTick>
 8003212:	1bc0      	subs	r0, r0, r7
 8003214:	42b0      	cmp	r0, r6
 8003216:	d800      	bhi.n	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8003218:	b9fe      	cbnz	r6, 800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	2300      	movs	r3, #0
 800321c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800321e:	2220      	movs	r2, #32
 8003220:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003224:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800322a:	f042 0220 	orr.w	r2, r2, #32
 800322e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003230:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003234:	2001      	movs	r0, #1
 8003236:	e01e      	b.n	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	ea25 0303 	bic.w	r3, r5, r3
 8003240:	b29b      	uxth	r3, r3
 8003242:	3300      	adds	r3, #0
 8003244:	bf18      	it	ne
 8003246:	2301      	movne	r3, #1
 8003248:	b1a3      	cbz	r3, 8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003252:	d1c5      	bne.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8003254:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003258:	d1d9      	bne.n	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800325a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800325e:	2b01      	cmp	r3, #1
 8003260:	d0ea      	beq.n	8003238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	ea25 0303 	bic.w	r3, r5, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	3300      	adds	r3, #0
 800326e:	bf18      	it	ne
 8003270:	2301      	movne	r3, #1
 8003272:	e7e9      	b.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8003274:	2000      	movs	r0, #0
}
 8003276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003278 <I2C_MasterRequestWrite>:
{
 8003278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327a:	b083      	sub	sp, #12
 800327c:	4604      	mov	r4, r0
 800327e:	460f      	mov	r7, r1
 8003280:	4615      	mov	r5, r2
 8003282:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003284:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003286:	2b08      	cmp	r3, #8
 8003288:	d00d      	beq.n	80032a6 <I2C_MasterRequestWrite+0x2e>
 800328a:	2b01      	cmp	r3, #1
 800328c:	d00b      	beq.n	80032a6 <I2C_MasterRequestWrite+0x2e>
 800328e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003292:	d008      	beq.n	80032a6 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003294:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003296:	2b12      	cmp	r3, #18
 8003298:	d10a      	bne.n	80032b0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329a:	6802      	ldr	r2, [r0, #0]
 800329c:	6813      	ldr	r3, [r2, #0]
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	e004      	b.n	80032b0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	6813      	ldr	r3, [r2, #0]
 80032aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ae:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b0:	9600      	str	r6, [sp, #0]
 80032b2:	462b      	mov	r3, r5
 80032b4:	2200      	movs	r2, #0
 80032b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ba:	4620      	mov	r0, r4
 80032bc:	f7ff ff52 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	b158      	cbz	r0, 80032da <I2C_MasterRequestWrite+0x62>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032ca:	d02b      	beq.n	8003324 <I2C_MasterRequestWrite+0xac>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	b003      	add	sp, #12
 80032d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032da:	6923      	ldr	r3, [r4, #16]
 80032dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e0:	d10e      	bne.n	8003300 <I2C_MasterRequestWrite+0x88>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80032e8:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ea:	4633      	mov	r3, r6
 80032ec:	462a      	mov	r2, r5
 80032ee:	490f      	ldr	r1, [pc, #60]	; (800332c <I2C_MasterRequestWrite+0xb4>)
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff ff6f 	bl	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d0eb      	beq.n	80032d4 <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e7e9      	b.n	80032d4 <I2C_MasterRequestWrite+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003300:	11fb      	asrs	r3, r7, #7
 8003302:	6822      	ldr	r2, [r4, #0]
 8003304:	f003 0306 	and.w	r3, r3, #6
 8003308:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800330c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800330e:	4633      	mov	r3, r6
 8003310:	462a      	mov	r2, r5
 8003312:	4907      	ldr	r1, [pc, #28]	; (8003330 <I2C_MasterRequestWrite+0xb8>)
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff ff5d 	bl	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331a:	b928      	cbnz	r0, 8003328 <I2C_MasterRequestWrite+0xb0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	b2ff      	uxtb	r7, r7
 8003320:	611f      	str	r7, [r3, #16]
 8003322:	e7e2      	b.n	80032ea <I2C_MasterRequestWrite+0x72>
    return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e7d5      	b.n	80032d4 <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e7d3      	b.n	80032d4 <I2C_MasterRequestWrite+0x5c>
 800332c:	00010002 	.word	0x00010002
 8003330:	00010008 	.word	0x00010008

08003334 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4604      	mov	r4, r0
 8003338:	460d      	mov	r5, r1
 800333a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003344:	d11c      	bne.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003346:	4620      	mov	r0, r4
 8003348:	f7ff fef3 	bl	8003132 <I2C_IsAcknowledgeFailed>
 800334c:	b9d0      	cbnz	r0, 8003384 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800334e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003352:	d0f3      	beq.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7ff f96a 	bl	800262c <HAL_GetTick>
 8003358:	1b80      	subs	r0, r0, r6
 800335a:	42a8      	cmp	r0, r5
 800335c:	d801      	bhi.n	8003362 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800335e:	2d00      	cmp	r5, #0
 8003360:	d1ec      	bne.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003362:	2300      	movs	r3, #0
 8003364:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003366:	2220      	movs	r2, #32
 8003368:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003372:	f042 0220 	orr.w	r2, r2, #32
 8003376:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003378:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800337c:	2001      	movs	r0, #1
 800337e:	e000      	b.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003380:	2000      	movs	r0, #0
}
 8003382:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003384:	2001      	movs	r0, #1
 8003386:	e7fc      	b.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08003388 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	4604      	mov	r4, r0
 800338c:	460d      	mov	r5, r1
 800338e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f013 0f04 	tst.w	r3, #4
 8003398:	d11c      	bne.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800339a:	4620      	mov	r0, r4
 800339c:	f7ff fec9 	bl	8003132 <I2C_IsAcknowledgeFailed>
 80033a0:	b9d0      	cbnz	r0, 80033d8 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80033a6:	d0f3      	beq.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a8:	f7ff f940 	bl	800262c <HAL_GetTick>
 80033ac:	1b80      	subs	r0, r0, r6
 80033ae:	42a8      	cmp	r0, r5
 80033b0:	d801      	bhi.n	80033b6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80033b2:	2d00      	cmp	r5, #0
 80033b4:	d1ec      	bne.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ba:	2220      	movs	r2, #32
 80033bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033c6:	f042 0220 	orr.w	r2, r2, #32
 80033ca:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80033d0:	2001      	movs	r0, #1
 80033d2:	e000      	b.n	80033d6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80033d4:	2000      	movs	r0, #0
}
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80033d8:	2001      	movs	r0, #1
 80033da:	e7fc      	b.n	80033d6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080033dc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80033dc:	2800      	cmp	r0, #0
 80033de:	f000 80c8 	beq.w	8003572 <HAL_I2C_Init+0x196>
{
 80033e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d075      	beq.n	80034da <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ee:	2324      	movs	r3, #36	; 0x24
 80033f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80033f4:	6822      	ldr	r2, [r4, #0]
 80033f6:	6813      	ldr	r3, [r2, #0]
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	6813      	ldr	r3, [r2, #0]
 8003402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003406:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	6813      	ldr	r3, [r2, #0]
 800340c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003410:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003412:	f000 fca1 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003416:	6862      	ldr	r2, [r4, #4]
 8003418:	4b58      	ldr	r3, [pc, #352]	; (800357c <HAL_I2C_Init+0x1a0>)
 800341a:	429a      	cmp	r2, r3
 800341c:	d862      	bhi.n	80034e4 <HAL_I2C_Init+0x108>
 800341e:	4b58      	ldr	r3, [pc, #352]	; (8003580 <HAL_I2C_Init+0x1a4>)
 8003420:	4298      	cmp	r0, r3
 8003422:	bf8c      	ite	hi
 8003424:	2300      	movhi	r3, #0
 8003426:	2301      	movls	r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 80a4 	bne.w	8003576 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 800342e:	4b55      	ldr	r3, [pc, #340]	; (8003584 <HAL_I2C_Init+0x1a8>)
 8003430:	fba3 2300 	umull	r2, r3, r3, r0
 8003434:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003436:	6821      	ldr	r1, [r4, #0]
 8003438:	684a      	ldr	r2, [r1, #4]
 800343a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800343e:	431a      	orrs	r2, r3
 8003440:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003442:	6825      	ldr	r5, [r4, #0]
 8003444:	6a2a      	ldr	r2, [r5, #32]
 8003446:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800344a:	6866      	ldr	r6, [r4, #4]
 800344c:	494b      	ldr	r1, [pc, #300]	; (800357c <HAL_I2C_Init+0x1a0>)
 800344e:	428e      	cmp	r6, r1
 8003450:	d84e      	bhi.n	80034f0 <HAL_I2C_Init+0x114>
 8003452:	3301      	adds	r3, #1
 8003454:	4313      	orrs	r3, r2
 8003456:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003458:	6825      	ldr	r5, [r4, #0]
 800345a:	69e9      	ldr	r1, [r5, #28]
 800345c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003460:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003464:	6863      	ldr	r3, [r4, #4]
 8003466:	4a45      	ldr	r2, [pc, #276]	; (800357c <HAL_I2C_Init+0x1a0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d84b      	bhi.n	8003504 <HAL_I2C_Init+0x128>
 800346c:	3801      	subs	r0, #1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fbb0 f3f3 	udiv	r3, r0, r3
 8003474:	3301      	adds	r3, #1
 8003476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf38      	it	cc
 800347e:	2304      	movcc	r3, #4
 8003480:	430b      	orrs	r3, r1
 8003482:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003484:	6821      	ldr	r1, [r4, #0]
 8003486:	680b      	ldr	r3, [r1, #0]
 8003488:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800348c:	69e2      	ldr	r2, [r4, #28]
 800348e:	6a20      	ldr	r0, [r4, #32]
 8003490:	4302      	orrs	r2, r0
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003496:	6821      	ldr	r1, [r4, #0]
 8003498:	688b      	ldr	r3, [r1, #8]
 800349a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800349e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034a2:	6922      	ldr	r2, [r4, #16]
 80034a4:	68e0      	ldr	r0, [r4, #12]
 80034a6:	4302      	orrs	r2, r0
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ac:	6821      	ldr	r1, [r4, #0]
 80034ae:	68cb      	ldr	r3, [r1, #12]
 80034b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034b4:	6962      	ldr	r2, [r4, #20]
 80034b6:	69a0      	ldr	r0, [r4, #24]
 80034b8:	4302      	orrs	r2, r0
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	6813      	ldr	r3, [r2, #0]
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c8:	2000      	movs	r0, #0
 80034ca:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034cc:	2320      	movs	r3, #32
 80034ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80034d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80034da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80034de:	f7fe ffa5 	bl	800242c <HAL_I2C_MspInit>
 80034e2:	e784      	b.n	80033ee <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e4:	4b28      	ldr	r3, [pc, #160]	; (8003588 <HAL_I2C_Init+0x1ac>)
 80034e6:	4298      	cmp	r0, r3
 80034e8:	bf8c      	ite	hi
 80034ea:	2300      	movhi	r3, #0
 80034ec:	2301      	movls	r3, #1
 80034ee:	e79b      	b.n	8003428 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034f0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4924      	ldr	r1, [pc, #144]	; (800358c <HAL_I2C_Init+0x1b0>)
 80034fa:	fba1 1303 	umull	r1, r3, r1, r3
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	3301      	adds	r3, #1
 8003502:	e7a7      	b.n	8003454 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003504:	68a2      	ldr	r2, [r4, #8]
 8003506:	b9ba      	cbnz	r2, 8003538 <HAL_I2C_Init+0x15c>
 8003508:	1e46      	subs	r6, r0, #1
 800350a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800350e:	fbb6 f6f7 	udiv	r6, r6, r7
 8003512:	3601      	adds	r6, #1
 8003514:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003518:	fab6 f686 	clz	r6, r6
 800351c:	0976      	lsrs	r6, r6, #5
 800351e:	bb36      	cbnz	r6, 800356e <HAL_I2C_Init+0x192>
 8003520:	b9c2      	cbnz	r2, 8003554 <HAL_I2C_Init+0x178>
 8003522:	3801      	subs	r0, #1
 8003524:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003528:	fbb0 f3f3 	udiv	r3, r0, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003532:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003536:	e7a3      	b.n	8003480 <HAL_I2C_Init+0xa4>
 8003538:	1e46      	subs	r6, r0, #1
 800353a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800353e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003542:	fbb6 f6f7 	udiv	r6, r6, r7
 8003546:	3601      	adds	r6, #1
 8003548:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800354c:	fab6 f686 	clz	r6, r6
 8003550:	0976      	lsrs	r6, r6, #5
 8003552:	e7e4      	b.n	800351e <HAL_I2C_Init+0x142>
 8003554:	3801      	subs	r0, #1
 8003556:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800355a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800355e:	fbb0 f2f3 	udiv	r2, r0, r3
 8003562:	3201      	adds	r2, #1
 8003564:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003568:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 800356c:	e788      	b.n	8003480 <HAL_I2C_Init+0xa4>
 800356e:	2301      	movs	r3, #1
 8003570:	e786      	b.n	8003480 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8003572:	2001      	movs	r0, #1
}
 8003574:	4770      	bx	lr
    return HAL_ERROR;
 8003576:	2001      	movs	r0, #1
 8003578:	e7ae      	b.n	80034d8 <HAL_I2C_Init+0xfc>
 800357a:	bf00      	nop
 800357c:	000186a0 	.word	0x000186a0
 8003580:	001e847f 	.word	0x001e847f
 8003584:	431bde83 	.word	0x431bde83
 8003588:	003d08ff 	.word	0x003d08ff
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8003590:	b1a8      	cbz	r0, 80035be <HAL_I2C_DeInit+0x2e>
{
 8003592:	b510      	push	{r4, lr}
 8003594:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003596:	2324      	movs	r3, #36	; 0x24
 8003598:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800359c:	6802      	ldr	r2, [r0, #0]
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80035a6:	f7fe ff73 	bl	8002490 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035aa:	2000      	movs	r0, #0
 80035ac:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80035ae:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035b4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 80035b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80035bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035be:	2001      	movs	r0, #1
}
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_I2C_Master_Transmit>:
{
 80035c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	4604      	mov	r4, r0
 80035cc:	460e      	mov	r6, r1
 80035ce:	4690      	mov	r8, r2
 80035d0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80035d2:	f7ff f82b 	bl	800262c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d004      	beq.n	80035ea <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 80035e0:	2602      	movs	r6, #2
}
 80035e2:	4630      	mov	r0, r6
 80035e4:	b004      	add	sp, #16
 80035e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ea:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ec:	9000      	str	r0, [sp, #0]
 80035ee:	2319      	movs	r3, #25
 80035f0:	2201      	movs	r2, #1
 80035f2:	494f      	ldr	r1, [pc, #316]	; (8003730 <HAL_I2C_Master_Transmit+0x16c>)
 80035f4:	4620      	mov	r0, r4
 80035f6:	f7ff fdb5 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	f040 8091 	bne.w	8003722 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003600:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	f000 808e 	beq.w	8003726 <HAL_I2C_Master_Transmit+0x162>
 800360a:	2301      	movs	r3, #1
 800360c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	f012 0f01 	tst.w	r2, #1
 8003618:	d103      	bne.n	8003622 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800362a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800362c:	2321      	movs	r3, #33	; 0x21
 800362e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003632:	2310      	movs	r3, #16
 8003634:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003638:	2300      	movs	r3, #0
 800363a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800363c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003640:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003642:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003644:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_I2C_Master_Transmit+0x170>)
 8003648:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800364a:	462b      	mov	r3, r5
 800364c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800364e:	4631      	mov	r1, r6
 8003650:	4620      	mov	r0, r4
 8003652:	f7ff fe11 	bl	8003278 <I2C_MasterRequestWrite>
 8003656:	4606      	mov	r6, r0
 8003658:	2800      	cmp	r0, #0
 800365a:	d166      	bne.n	800372a <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365c:	2300      	movs	r3, #0
 800365e:	9303      	str	r3, [sp, #12]
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	9203      	str	r2, [sp, #12]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	9303      	str	r3, [sp, #12]
 800366a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800366c:	e012      	b.n	8003694 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003670:	2b04      	cmp	r3, #4
 8003672:	d001      	beq.n	8003678 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8003674:	2601      	movs	r6, #1
 8003676:	e7b4      	b.n	80035e2 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	6822      	ldr	r2, [r4, #0]
 800367a:	6813      	ldr	r3, [r2, #0]
 800367c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003680:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003682:	2601      	movs	r6, #1
 8003684:	e7ad      	b.n	80035e2 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003686:	462a      	mov	r2, r5
 8003688:	990a      	ldr	r1, [sp, #40]	; 0x28
 800368a:	4620      	mov	r0, r4
 800368c:	f7ff fe7c 	bl	8003388 <I2C_WaitOnBTFFlagUntilTimeout>
 8003690:	2800      	cmp	r0, #0
 8003692:	d12c      	bne.n	80036ee <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8003694:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d035      	beq.n	8003706 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	462a      	mov	r2, r5
 800369c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff fe48 	bl	8003334 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d1e2      	bne.n	800366e <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80036b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80036b2:	1c4b      	adds	r3, r1, #1
 80036b4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80036b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80036be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	6950      	ldr	r0, [r2, #20]
 80036ca:	f010 0f04 	tst.w	r0, #4
 80036ce:	d0da      	beq.n	8003686 <HAL_I2C_Master_Transmit+0xc2>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0d8      	beq.n	8003686 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d4:	784b      	ldrb	r3, [r1, #1]
 80036d6:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80036d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036da:	3301      	adds	r3, #1
 80036dc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80036de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80036e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	8523      	strh	r3, [r4, #40]	; 0x28
 80036ec:	e7cb      	b.n	8003686 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 80036f4:	2601      	movs	r6, #1
 80036f6:	e774      	b.n	80035e2 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003700:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003702:	2601      	movs	r6, #1
 8003704:	e76d      	b.n	80035e2 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800370e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003710:	2320      	movs	r3, #32
 8003712:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003716:	2300      	movs	r3, #0
 8003718:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800371c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003720:	e75f      	b.n	80035e2 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8003722:	2602      	movs	r6, #2
 8003724:	e75d      	b.n	80035e2 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003726:	2602      	movs	r6, #2
 8003728:	e75b      	b.n	80035e2 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 800372a:	2601      	movs	r6, #1
 800372c:	e759      	b.n	80035e2 <HAL_I2C_Master_Transmit+0x1e>
 800372e:	bf00      	nop
 8003730:	00100002 	.word	0x00100002
 8003734:	ffff0000 	.word	0xffff0000

08003738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003738:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <RCC_Delay+0x24>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <RCC_Delay+0x28>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	0a5b      	lsrs	r3, r3, #9
 8003746:	fb00 f003 	mul.w	r0, r0, r3
 800374a:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 800374c:	bf00      	nop
  }
  while (Delay --);
 800374e:	9b01      	ldr	r3, [sp, #4]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	9201      	str	r2, [sp, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f9      	bne.n	800374c <RCC_Delay+0x14>
}
 8003758:	b002      	add	sp, #8
 800375a:	4770      	bx	lr
 800375c:	20000010 	.word	0x20000010
 8003760:	10624dd3 	.word	0x10624dd3

08003764 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003764:	2800      	cmp	r0, #0
 8003766:	f000 81f5 	beq.w	8003b54 <HAL_RCC_OscConfig+0x3f0>
{
 800376a:	b570      	push	{r4, r5, r6, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003770:	6803      	ldr	r3, [r0, #0]
 8003772:	f013 0f01 	tst.w	r3, #1
 8003776:	d02c      	beq.n	80037d2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003778:	4bab      	ldr	r3, [pc, #684]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b04      	cmp	r3, #4
 8003782:	d01d      	beq.n	80037c0 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003784:	4ba8      	ldr	r3, [pc, #672]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	d012      	beq.n	80037b6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003790:	6863      	ldr	r3, [r4, #4]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d041      	beq.n	800381c <HAL_RCC_OscConfig+0xb8>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d155      	bne.n	8003848 <HAL_RCC_OscConfig+0xe4>
 800379c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e037      	b.n	8003826 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037b6:	4b9c      	ldr	r3, [pc, #624]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037be:	d0e7      	beq.n	8003790 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	4b99      	ldr	r3, [pc, #612]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_OscConfig+0x6e>
 80037ca:	6863      	ldr	r3, [r4, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 81c3 	beq.w	8003b58 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	f013 0f02 	tst.w	r3, #2
 80037d8:	d076      	beq.n	80038c8 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037da:	4b93      	ldr	r3, [pc, #588]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f013 0f0c 	tst.w	r3, #12
 80037e2:	d05f      	beq.n	80038a4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037e4:	4b90      	ldr	r3, [pc, #576]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d054      	beq.n	800389a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f0:	6923      	ldr	r3, [r4, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 808a 	beq.w	800390c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80037f8:	4b8c      	ldr	r3, [pc, #560]	; (8003a2c <HAL_RCC_OscConfig+0x2c8>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037fe:	f7fe ff15 	bl	800262c <HAL_GetTick>
 8003802:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003804:	4b88      	ldr	r3, [pc, #544]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f013 0f02 	tst.w	r3, #2
 800380c:	d175      	bne.n	80038fa <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380e:	f7fe ff0d 	bl	800262c <HAL_GetTick>
 8003812:	1b40      	subs	r0, r0, r5
 8003814:	2802      	cmp	r0, #2
 8003816:	d9f5      	bls.n	8003804 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003818:	2003      	movs	r0, #3
 800381a:	e1a0      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381c:	4a82      	ldr	r2, [pc, #520]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 800381e:	6813      	ldr	r3, [r2, #0]
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003826:	6863      	ldr	r3, [r4, #4]
 8003828:	b343      	cbz	r3, 800387c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800382a:	f7fe feff 	bl	800262c <HAL_GetTick>
 800382e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003830:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003838:	d1cb      	bne.n	80037d2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383a:	f7fe fef7 	bl	800262c <HAL_GetTick>
 800383e:	1b40      	subs	r0, r0, r5
 8003840:	2864      	cmp	r0, #100	; 0x64
 8003842:	d9f5      	bls.n	8003830 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003844:	2003      	movs	r0, #3
 8003846:	e18a      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384c:	d009      	beq.n	8003862 <HAL_RCC_OscConfig+0xfe>
 800384e:	4b76      	ldr	r3, [pc, #472]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e7e1      	b.n	8003826 <HAL_RCC_OscConfig+0xc2>
 8003862:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003866:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e7d4      	b.n	8003826 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800387c:	f7fe fed6 	bl	800262c <HAL_GetTick>
 8003880:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	4b69      	ldr	r3, [pc, #420]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800388a:	d0a2      	beq.n	80037d2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7fe fece 	bl	800262c <HAL_GetTick>
 8003890:	1b40      	subs	r0, r0, r5
 8003892:	2864      	cmp	r0, #100	; 0x64
 8003894:	d9f5      	bls.n	8003882 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003896:	2003      	movs	r0, #3
 8003898:	e161      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80038a2:	d1a5      	bne.n	80037f0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a4:	4b60      	ldr	r3, [pc, #384]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f013 0f02 	tst.w	r3, #2
 80038ac:	d004      	beq.n	80038b8 <HAL_RCC_OscConfig+0x154>
 80038ae:	6923      	ldr	r3, [r4, #16]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 80038b4:	2001      	movs	r0, #1
 80038b6:	e152      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b8:	4a5b      	ldr	r2, [pc, #364]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038c0:	6961      	ldr	r1, [r4, #20]
 80038c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038c6:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	f013 0f08 	tst.w	r3, #8
 80038ce:	d032      	beq.n	8003936 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d0:	69a3      	ldr	r3, [r4, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d05b      	beq.n	800398e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80038d6:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <HAL_RCC_OscConfig+0x2cc>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80038dc:	f7fe fea6 	bl	800262c <HAL_GetTick>
 80038e0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e2:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	f013 0f02 	tst.w	r3, #2
 80038ea:	d121      	bne.n	8003930 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ec:	f7fe fe9e 	bl	800262c <HAL_GetTick>
 80038f0:	1b40      	subs	r0, r0, r5
 80038f2:	2802      	cmp	r0, #2
 80038f4:	d9f5      	bls.n	80038e2 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80038f6:	2003      	movs	r0, #3
 80038f8:	e131      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4a4b      	ldr	r2, [pc, #300]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003902:	6961      	ldr	r1, [r4, #20]
 8003904:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e7dd      	b.n	80038c8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800390c:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_OscConfig+0x2c8>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003912:	f7fe fe8b 	bl	800262c <HAL_GetTick>
 8003916:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003918:	4b43      	ldr	r3, [pc, #268]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f013 0f02 	tst.w	r3, #2
 8003920:	d0d2      	beq.n	80038c8 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003922:	f7fe fe83 	bl	800262c <HAL_GetTick>
 8003926:	1b40      	subs	r0, r0, r5
 8003928:	2802      	cmp	r0, #2
 800392a:	d9f5      	bls.n	8003918 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800392c:	2003      	movs	r0, #3
 800392e:	e116      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8003930:	2001      	movs	r0, #1
 8003932:	f7ff ff01 	bl	8003738 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	f013 0f04 	tst.w	r3, #4
 800393c:	f000 8098 	beq.w	8003a70 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003940:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003948:	d133      	bne.n	80039b2 <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003952:	61da      	str	r2, [r3, #28]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800395e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_RCC_OscConfig+0x2d0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003968:	d025      	beq.n	80039b6 <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800396a:	68e3      	ldr	r3, [r4, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d036      	beq.n	80039de <HAL_RCC_OscConfig+0x27a>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d14c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x2aa>
 8003974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003978:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800397c:	6a1a      	ldr	r2, [r3, #32]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	621a      	str	r2, [r3, #32]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	621a      	str	r2, [r3, #32]
 800398c:	e02c      	b.n	80039e8 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 800398e:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_RCC_OscConfig+0x2cc>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003994:	f7fe fe4a 	bl	800262c <HAL_GetTick>
 8003998:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f013 0f02 	tst.w	r3, #2
 80039a2:	d0c8      	beq.n	8003936 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a4:	f7fe fe42 	bl	800262c <HAL_GetTick>
 80039a8:	1b40      	subs	r0, r0, r5
 80039aa:	2802      	cmp	r0, #2
 80039ac:	d9f5      	bls.n	800399a <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 80039ae:	2003      	movs	r0, #3
 80039b0:	e0d5      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 80039b2:	2500      	movs	r5, #0
 80039b4:	e7d4      	b.n	8003960 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b6:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <HAL_RCC_OscConfig+0x2d0>)
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80039c0:	f7fe fe34 	bl	800262c <HAL_GetTick>
 80039c4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x2d0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039ce:	d1cc      	bne.n	800396a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d0:	f7fe fe2c 	bl	800262c <HAL_GetTick>
 80039d4:	1b80      	subs	r0, r0, r6
 80039d6:	2864      	cmp	r0, #100	; 0x64
 80039d8:	d9f5      	bls.n	80039c6 <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 80039da:	2003      	movs	r0, #3
 80039dc:	e0bf      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80039e0:	6a13      	ldr	r3, [r2, #32]
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e8:	68e3      	ldr	r3, [r4, #12]
 80039ea:	b37b      	cbz	r3, 8003a4c <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 80039ec:	f7fe fe1e 	bl	800262c <HAL_GetTick>
 80039f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f013 0f02 	tst.w	r3, #2
 80039fa:	d138      	bne.n	8003a6e <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe fe16 	bl	800262c <HAL_GetTick>
 8003a00:	1b80      	subs	r0, r0, r6
 8003a02:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a06:	4298      	cmp	r0, r3
 8003a08:	d9f3      	bls.n	80039f2 <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8003a0a:	2003      	movs	r0, #3
 8003a0c:	e0a7      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	d012      	beq.n	8003a38 <HAL_RCC_OscConfig+0x2d4>
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RCC_OscConfig+0x2c4>)
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	621a      	str	r2, [r3, #32]
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	f022 0204 	bic.w	r2, r2, #4
 8003a22:	621a      	str	r2, [r3, #32]
 8003a24:	e7e0      	b.n	80039e8 <HAL_RCC_OscConfig+0x284>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	42420000 	.word	0x42420000
 8003a30:	42420480 	.word	0x42420480
 8003a34:	40007000 	.word	0x40007000
 8003a38:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003a3a:	6a1a      	ldr	r2, [r3, #32]
 8003a3c:	f042 0204 	orr.w	r2, r2, #4
 8003a40:	621a      	str	r2, [r3, #32]
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	621a      	str	r2, [r3, #32]
 8003a4a:	e7cd      	b.n	80039e8 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8003a4c:	f7fe fdee 	bl	800262c <HAL_GetTick>
 8003a50:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a52:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f013 0f02 	tst.w	r3, #2
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fde6 	bl	800262c <HAL_GetTick>
 8003a60:	1b80      	subs	r0, r0, r6
 8003a62:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a66:	4298      	cmp	r0, r3
 8003a68:	d9f3      	bls.n	8003a52 <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8003a6a:	2003      	movs	r0, #3
 8003a6c:	e077      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8003a6e:	b9e5      	cbnz	r5, 8003aaa <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a70:	69e3      	ldr	r3, [r4, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d072      	beq.n	8003b5c <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a76:	4a3d      	ldr	r2, [pc, #244]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003a78:	6852      	ldr	r2, [r2, #4]
 8003a7a:	f002 020c 	and.w	r2, r2, #12
 8003a7e:	2a08      	cmp	r2, #8
 8003a80:	d056      	beq.n	8003b30 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d017      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <HAL_RCC_OscConfig+0x40c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fdce 	bl	800262c <HAL_GetTick>
 8003a90:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a92:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a9a:	d047      	beq.n	8003b2c <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fe fdc6 	bl	800262c <HAL_GetTick>
 8003aa0:	1b00      	subs	r0, r0, r4
 8003aa2:	2802      	cmp	r0, #2
 8003aa4:	d9f5      	bls.n	8003a92 <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8003aa6:	2003      	movs	r0, #3
 8003aa8:	e059      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003aac:	69d3      	ldr	r3, [r2, #28]
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	61d3      	str	r3, [r2, #28]
 8003ab4:	e7dc      	b.n	8003a70 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_RCC_OscConfig+0x40c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003abc:	f7fe fdb6 	bl	800262c <HAL_GetTick>
 8003ac0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003aca:	d006      	beq.n	8003ada <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fe fdae 	bl	800262c <HAL_GetTick>
 8003ad0:	1b40      	subs	r0, r0, r5
 8003ad2:	2802      	cmp	r0, #2
 8003ad4:	d9f5      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8003ad6:	2003      	movs	r0, #3
 8003ad8:	e041      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ada:	6a23      	ldr	r3, [r4, #32]
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d01a      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae2:	4922      	ldr	r1, [pc, #136]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003ae4:	684b      	ldr	r3, [r1, #4]
 8003ae6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003aea:	6a22      	ldr	r2, [r4, #32]
 8003aec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003aee:	4302      	orrs	r2, r0
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003af4:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_RCC_OscConfig+0x40c>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003afa:	f7fe fd97 	bl	800262c <HAL_GetTick>
 8003afe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b08:	d10e      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fe fd8f 	bl	800262c <HAL_GetTick>
 8003b0e:	1b00      	subs	r0, r0, r4
 8003b10:	2802      	cmp	r0, #2
 8003b12:	d9f5      	bls.n	8003b00 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8003b14:	2003      	movs	r0, #3
 8003b16:	e022      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b18:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003b1a:	6853      	ldr	r3, [r2, #4]
 8003b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b20:	68a1      	ldr	r1, [r4, #8]
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6053      	str	r3, [r2, #4]
 8003b26:	e7dc      	b.n	8003ae2 <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8003b28:	2000      	movs	r0, #0
 8003b2a:	e018      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	e016      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d016      	beq.n	8003b62 <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8003b34:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <HAL_RCC_OscConfig+0x408>)
 8003b36:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b38:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003b3c:	6a22      	ldr	r2, [r4, #32]
 8003b3e:	4291      	cmp	r1, r2
 8003b40:	d001      	beq.n	8003b46 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8003b42:	2001      	movs	r0, #1
 8003b44:	e00b      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b46:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8003b50:	2001      	movs	r0, #1
 8003b52:	e004      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8003b54:	2001      	movs	r0, #1
}
 8003b56:	4770      	bx	lr
        return HAL_ERROR;
 8003b58:	2001      	movs	r0, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8003b5c:	2000      	movs	r0, #0
}
 8003b5e:	b002      	add	sp, #8
 8003b60:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003b62:	2001      	movs	r0, #1
 8003b64:	e7fb      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8003b66:	2000      	movs	r0, #0
 8003b68:	e7f9      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fa>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	42420060 	.word	0x42420060

08003b74 <HAL_RCC_GetSysClockFreq>:
{
 8003b74:	b410      	push	{r4}
 8003b76:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b78:	4c16      	ldr	r4, [pc, #88]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x60>)
 8003b7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b7e:	f10d 0c18 	add.w	ip, sp, #24
 8003b82:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b86:	8a23      	ldrh	r3, [r4, #16]
 8003b88:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003b90:	f003 020c 	and.w	r2, r3, #12
 8003b94:	2a08      	cmp	r2, #8
 8003b96:	d11a      	bne.n	8003bce <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b98:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003b9c:	4462      	add	r2, ip
 8003b9e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ba8:	480c      	ldr	r0, [pc, #48]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x68>)
 8003baa:	fb00 f002 	mul.w	r0, r0, r2
}
 8003bae:	b007      	add	sp, #28
 8003bb0:	bc10      	pop	{r4}
 8003bb2:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003bbc:	4463      	add	r3, ip
 8003bbe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bc2:	4807      	ldr	r0, [pc, #28]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003bc4:	fb00 f002 	mul.w	r0, r0, r2
 8003bc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bcc:	e7ef      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8003bce:	4804      	ldr	r0, [pc, #16]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003bd0:	e7ed      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd2:	bf00      	nop
 8003bd4:	08004434 	.word	0x08004434
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	003d0900 	.word	0x003d0900
 8003be0:	007a1200 	.word	0x007a1200

08003be4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003be4:	2800      	cmp	r0, #0
 8003be6:	f000 80a3 	beq.w	8003d30 <HAL_RCC_ClockConfig+0x14c>
{
 8003bea:	b570      	push	{r4, r5, r6, lr}
 8003bec:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bee:	4b52      	ldr	r3, [pc, #328]	; (8003d38 <HAL_RCC_ClockConfig+0x154>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	428b      	cmp	r3, r1
 8003bf8:	d20c      	bcs.n	8003c14 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4a4f      	ldr	r2, [pc, #316]	; (8003d38 <HAL_RCC_ClockConfig+0x154>)
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	f023 0307 	bic.w	r3, r3, #7
 8003c02:	430b      	orrs	r3, r1
 8003c04:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8003c10:	2001      	movs	r0, #1
}
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	f013 0f02 	tst.w	r3, #2
 8003c1a:	d017      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	f013 0f04 	tst.w	r3, #4
 8003c20:	d004      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c22:	4a46      	ldr	r2, [pc, #280]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003c24:	6853      	ldr	r3, [r2, #4]
 8003c26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c2a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	f013 0f08 	tst.w	r3, #8
 8003c32:	d004      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c34:	4a41      	ldr	r2, [pc, #260]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003c36:	6853      	ldr	r3, [r2, #4]
 8003c38:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c3c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3e:	4a3f      	ldr	r2, [pc, #252]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003c40:	6853      	ldr	r3, [r2, #4]
 8003c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c46:	68a0      	ldr	r0, [r4, #8]
 8003c48:	4303      	orrs	r3, r0
 8003c4a:	6053      	str	r3, [r2, #4]
 8003c4c:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	f013 0f01 	tst.w	r3, #1
 8003c54:	d031      	beq.n	8003cba <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c56:	6863      	ldr	r3, [r4, #4]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d025      	beq.n	8003cac <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	4a36      	ldr	r2, [pc, #216]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	f012 0f02 	tst.w	r2, #2
 8003c68:	d064      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6a:	4934      	ldr	r1, [pc, #208]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003c6c:	684a      	ldr	r2, [r1, #4]
 8003c6e:	f022 0203 	bic.w	r2, r2, #3
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003c76:	f7fe fcd9 	bl	800262c <HAL_GetTick>
 8003c7a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7c:	4b2f      	ldr	r3, [pc, #188]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	6862      	ldr	r2, [r4, #4]
 8003c86:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c8a:	d016      	beq.n	8003cba <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fe fcce 	bl	800262c <HAL_GetTick>
 8003c90:	1b80      	subs	r0, r0, r6
 8003c92:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c96:	4298      	cmp	r0, r3
 8003c98:	d9f0      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8003c9a:	2003      	movs	r0, #3
 8003c9c:	e7b9      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003ca6:	d1e0      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003ca8:	2001      	movs	r0, #1
 8003caa:	e7b2      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cac:	4a23      	ldr	r2, [pc, #140]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003cb4:	d1d9      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	e7ab      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cba:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <HAL_RCC_ClockConfig+0x154>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	42ab      	cmp	r3, r5
 8003cc4:	d90c      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <HAL_RCC_ClockConfig+0x154>)
 8003cc8:	6813      	ldr	r3, [r2, #0]
 8003cca:	f023 0307 	bic.w	r3, r3, #7
 8003cce:	432b      	orrs	r3, r5
 8003cd0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	42ab      	cmp	r3, r5
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8003cdc:	2001      	movs	r0, #1
 8003cde:	e798      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	f013 0f04 	tst.w	r3, #4
 8003ce6:	d006      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003cea:	6853      	ldr	r3, [r2, #4]
 8003cec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cf0:	68e1      	ldr	r1, [r4, #12]
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	f013 0f08 	tst.w	r3, #8
 8003cfc:	d007      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cfe:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003d00:	6853      	ldr	r3, [r2, #4]
 8003d02:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003d06:	6921      	ldr	r1, [r4, #16]
 8003d08:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d0c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d0e:	f7ff ff31 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <HAL_RCC_ClockConfig+0x158>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x15c>)
 8003d1c:	5cd3      	ldrb	r3, [r2, r3]
 8003d1e:	40d8      	lsrs	r0, r3
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_RCC_ClockConfig+0x160>)
 8003d22:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_RCC_ClockConfig+0x164>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	f7fe fc3c 	bl	80025a4 <HAL_InitTick>
  return HAL_OK;
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	e770      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003d30:	2001      	movs	r0, #1
}
 8003d32:	4770      	bx	lr
        return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
 8003d36:	e76c      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2e>
 8003d38:	40022000 	.word	0x40022000
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	08004448 	.word	0x08004448
 8003d44:	20000010 	.word	0x20000010
 8003d48:	20000018 	.word	0x20000018

08003d4c <HAL_RCC_GetHCLKFreq>:
}
 8003d4c:	4b01      	ldr	r3, [pc, #4]	; (8003d54 <HAL_RCC_GetHCLKFreq+0x8>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000010 	.word	0x20000010

08003d58 <HAL_RCC_GetPCLK1Freq>:
{
 8003d58:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d5a:	f7ff fff7 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d5e:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003d66:	4a03      	ldr	r2, [pc, #12]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d68:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d6a:	40d8      	lsrs	r0, r3
 8003d6c:	bd08      	pop	{r3, pc}
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08004458 	.word	0x08004458

08003d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d7e:	6803      	ldr	r3, [r0, #0]
 8003d80:	f013 0f01 	tst.w	r3, #1
 8003d84:	d034      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d86:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003d8e:	d148      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d98:	61da      	str	r2, [r3, #28]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003da4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003dae:	d03a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003db4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003db8:	d011      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x66>
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d00c      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc4:	4a2e      	ldr	r2, [pc, #184]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003dc6:	6a13      	ldr	r3, [r2, #32]
 8003dc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dcc:	492e      	ldr	r1, [pc, #184]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003dce:	2601      	movs	r6, #1
 8003dd0:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dd6:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dd8:	f013 0f01 	tst.w	r3, #1
 8003ddc:	d137      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dde:	4a28      	ldr	r2, [pc, #160]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003de0:	6a13      	ldr	r3, [r2, #32]
 8003de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de6:	6861      	ldr	r1, [r4, #4]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dec:	2d00      	cmp	r5, #0
 8003dee:	d13f      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	f013 0f02 	tst.w	r3, #2
 8003df6:	d006      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df8:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003dfa:	6853      	ldr	r3, [r2, #4]
 8003dfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e00:	68a1      	ldr	r1, [r4, #8]
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	f013 0f10 	tst.w	r3, #16
 8003e0c:	d035      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003e10:	6853      	ldr	r3, [r2, #4]
 8003e12:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003e16:	68e1      	ldr	r1, [r4, #12]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e1c:	2000      	movs	r0, #0
}
 8003e1e:	b002      	add	sp, #8
 8003e20:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8003e22:	2500      	movs	r5, #0
 8003e24:	e7bf      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e26:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003e28:	6813      	ldr	r3, [r2, #0]
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003e30:	f7fe fbfc 	bl	800262c <HAL_GetTick>
 8003e34:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e3e:	d1b7      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fe fbf4 	bl	800262c <HAL_GetTick>
 8003e44:	1b80      	subs	r0, r0, r6
 8003e46:	2864      	cmp	r0, #100	; 0x64
 8003e48:	d9f5      	bls.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8003e4a:	2003      	movs	r0, #3
 8003e4c:	e7e7      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8003e4e:	f7fe fbed 	bl	800262c <HAL_GetTick>
 8003e52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f013 0f02 	tst.w	r3, #2
 8003e5c:	d1bf      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fe fbe5 	bl	800262c <HAL_GetTick>
 8003e62:	1b80      	subs	r0, r0, r6
 8003e64:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e68:	4298      	cmp	r0, r3
 8003e6a:	d9f3      	bls.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8003e6c:	2003      	movs	r0, #3
 8003e6e:	e7d6      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e70:	69d3      	ldr	r3, [r2, #28]
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e76:	61d3      	str	r3, [r2, #28]
 8003e78:	e7ba      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e7cf      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42420440 	.word	0x42420440

08003e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e8e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e90:	6a04      	ldr	r4, [r0, #32]
 8003e92:	f024 0401 	bic.w	r4, r4, #1
 8003e96:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e98:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e9a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e9e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003ea6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ea8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003eaa:	6203      	str	r3, [r0, #32]
}
 8003eac:	bc10      	pop	{r4}
 8003eae:	4770      	bx	lr

08003eb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eb2:	6a03      	ldr	r3, [r0, #32]
 8003eb4:	f023 0310 	bic.w	r3, r3, #16
 8003eb8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eba:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003ebc:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ebe:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ec2:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eca:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ece:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ed0:	6203      	str	r3, [r0, #32]
}
 8003ed2:	bc10      	pop	{r4}
 8003ed4:	4770      	bx	lr

08003ed6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003edc:	4319      	orrs	r1, r3
 8003ede:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee2:	6081      	str	r1, [r0, #8]
}
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d001      	beq.n	8003ef6 <HAL_TIM_Base_Start_IT+0xe>
    return HAL_ERROR;
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003efc:	6802      	ldr	r2, [r0, #0]
 8003efe:	68d3      	ldr	r3, [r2, #12]
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f06:	6803      	ldr	r3, [r0, #0]
 8003f08:	4a10      	ldr	r2, [pc, #64]	; (8003f4c <HAL_TIM_Base_Start_IT+0x64>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d010      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x48>
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f12:	d00d      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x48>
 8003f14:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d009      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x48>
 8003f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d005      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x48>
    __HAL_TIM_ENABLE(htim);
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f36:	2a06      	cmp	r2, #6
 8003f38:	d005      	beq.n	8003f46 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f42:	2000      	movs	r0, #0
 8003f44:	4770      	bx	lr
 8003f46:	2000      	movs	r0, #0
}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40012c00 	.word	0x40012c00

08003f50 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003f50:	4770      	bx	lr

08003f52 <HAL_TIM_IC_CaptureCallback>:
}
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003f54:	4770      	bx	lr

08003f56 <HAL_TIM_TriggerCallback>:
}
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIM_IRQHandler>:
{
 8003f58:	b510      	push	{r4, lr}
 8003f5a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f5c:	6803      	ldr	r3, [r0, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	f012 0f02 	tst.w	r2, #2
 8003f64:	d011      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	f012 0f02 	tst.w	r2, #2
 8003f6c:	d00d      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f6e:	f06f 0202 	mvn.w	r2, #2
 8003f72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f74:	2301      	movs	r3, #1
 8003f76:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	6803      	ldr	r3, [r0, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f013 0f03 	tst.w	r3, #3
 8003f80:	d070      	beq.n	8004064 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	f7ff ffe6 	bl	8003f52 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	2300      	movs	r3, #0
 8003f88:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	f012 0f04 	tst.w	r2, #4
 8003f92:	d012      	beq.n	8003fba <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	f012 0f04 	tst.w	r2, #4
 8003f9a:	d00e      	beq.n	8003fba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f9c:	f06f 0204 	mvn.w	r2, #4
 8003fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003fae:	d05f      	beq.n	8004070 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f7ff ffce 	bl	8003f52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	f012 0f08 	tst.w	r2, #8
 8003fc2:	d012      	beq.n	8003fea <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	f012 0f08 	tst.w	r2, #8
 8003fca:	d00e      	beq.n	8003fea <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fcc:	f06f 0208 	mvn.w	r2, #8
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f013 0f03 	tst.w	r3, #3
 8003fde:	d04e      	beq.n	800407e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f7ff ffb6 	bl	8003f52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	f012 0f10 	tst.w	r2, #16
 8003ff2:	d012      	beq.n	800401a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	f012 0f10 	tst.w	r2, #16
 8003ffa:	d00e      	beq.n	800401a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ffc:	f06f 0210 	mvn.w	r2, #16
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004002:	2308      	movs	r3, #8
 8004004:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800400e:	d03d      	beq.n	800408c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004010:	4620      	mov	r0, r4
 8004012:	f7ff ff9e 	bl	8003f52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	2300      	movs	r3, #0
 8004018:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	f012 0f01 	tst.w	r2, #1
 8004022:	d003      	beq.n	800402c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	f012 0f01 	tst.w	r2, #1
 800402a:	d136      	bne.n	800409a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004034:	d003      	beq.n	800403e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	f012 0f80 	tst.w	r2, #128	; 0x80
 800403c:	d134      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004046:	d003      	beq.n	8004050 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800404e:	d132      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	f012 0f20 	tst.w	r2, #32
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	f012 0f20 	tst.w	r2, #32
 8004060:	d130      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x16c>
}
 8004062:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004064:	f7ff ff74 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	4620      	mov	r0, r4
 800406a:	f7ff ff73 	bl	8003f54 <HAL_TIM_PWM_PulseFinishedCallback>
 800406e:	e78a      	b.n	8003f86 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004070:	4620      	mov	r0, r4
 8004072:	f7ff ff6d 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004076:	4620      	mov	r0, r4
 8004078:	f7ff ff6c 	bl	8003f54 <HAL_TIM_PWM_PulseFinishedCallback>
 800407c:	e79b      	b.n	8003fb6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	4620      	mov	r0, r4
 8004080:	f7ff ff66 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	4620      	mov	r0, r4
 8004086:	f7ff ff65 	bl	8003f54 <HAL_TIM_PWM_PulseFinishedCallback>
 800408a:	e7ac      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408c:	4620      	mov	r0, r4
 800408e:	f7ff ff5f 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004092:	4620      	mov	r0, r4
 8004094:	f7ff ff5e 	bl	8003f54 <HAL_TIM_PWM_PulseFinishedCallback>
 8004098:	e7bd      	b.n	8004016 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800409a:	f06f 0201 	mvn.w	r2, #1
 800409e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7fe f933 	bl	800230c <HAL_TIM_PeriodElapsedCallback>
 80040a6:	e7c1      	b.n	800402c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80040ae:	4620      	mov	r0, r4
 80040b0:	f000 f923 	bl	80042fa <HAL_TIMEx_BreakCallback>
 80040b4:	e7c3      	b.n	800403e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80040bc:	4620      	mov	r0, r4
 80040be:	f7ff ff4a 	bl	8003f56 <HAL_TIM_TriggerCallback>
 80040c2:	e7c5      	b.n	8004050 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040c4:	f06f 0220 	mvn.w	r2, #32
 80040c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80040ca:	4620      	mov	r0, r4
 80040cc:	f000 f914 	bl	80042f8 <HAL_TIMEx_CommutCallback>
}
 80040d0:	e7c7      	b.n	8004062 <HAL_TIM_IRQHandler+0x10a>
	...

080040d4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80040d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d6:	4a1b      	ldr	r2, [pc, #108]	; (8004144 <TIM_Base_SetConfig+0x70>)
 80040d8:	4290      	cmp	r0, r2
 80040da:	d00a      	beq.n	80040f2 <TIM_Base_SetConfig+0x1e>
 80040dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80040e0:	d007      	beq.n	80040f2 <TIM_Base_SetConfig+0x1e>
 80040e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80040e6:	4290      	cmp	r0, r2
 80040e8:	d003      	beq.n	80040f2 <TIM_Base_SetConfig+0x1e>
 80040ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040ee:	4290      	cmp	r0, r2
 80040f0:	d103      	bne.n	80040fa <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80040f6:	684a      	ldr	r2, [r1, #4]
 80040f8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <TIM_Base_SetConfig+0x70>)
 80040fc:	4290      	cmp	r0, r2
 80040fe:	d00a      	beq.n	8004116 <TIM_Base_SetConfig+0x42>
 8004100:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004104:	d007      	beq.n	8004116 <TIM_Base_SetConfig+0x42>
 8004106:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800410a:	4290      	cmp	r0, r2
 800410c:	d003      	beq.n	8004116 <TIM_Base_SetConfig+0x42>
 800410e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004112:	4290      	cmp	r0, r2
 8004114:	d103      	bne.n	800411e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411a:	68ca      	ldr	r2, [r1, #12]
 800411c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800411e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004122:	694a      	ldr	r2, [r1, #20]
 8004124:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004126:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	688b      	ldr	r3, [r1, #8]
 800412a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800412c:	680b      	ldr	r3, [r1, #0]
 800412e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <TIM_Base_SetConfig+0x70>)
 8004132:	4298      	cmp	r0, r3
 8004134:	d002      	beq.n	800413c <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8004136:	2301      	movs	r3, #1
 8004138:	6143      	str	r3, [r0, #20]
}
 800413a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800413c:	690b      	ldr	r3, [r1, #16]
 800413e:	6303      	str	r3, [r0, #48]	; 0x30
 8004140:	e7f9      	b.n	8004136 <TIM_Base_SetConfig+0x62>
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00

08004148 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004148:	b338      	cbz	r0, 800419a <HAL_TIM_Base_Init+0x52>
{
 800414a:	b510      	push	{r4, lr}
 800414c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800414e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004152:	b1eb      	cbz	r3, 8004190 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	2302      	movs	r3, #2
 8004156:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800415a:	1d21      	adds	r1, r4, #4
 800415c:	6820      	ldr	r0, [r4, #0]
 800415e:	f7ff ffb9 	bl	80040d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004162:	2301      	movs	r3, #1
 8004164:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800416c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004170:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004174:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800417c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004180:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004188:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800418c:	2000      	movs	r0, #0
}
 800418e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004190:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004194:	f7fe f992 	bl	80024bc <HAL_TIM_Base_MspInit>
 8004198:	e7dc      	b.n	8004154 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800419a:	2001      	movs	r0, #1
}
 800419c:	4770      	bx	lr

0800419e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800419e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041a6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80041aa:	430b      	orrs	r3, r1
 80041ac:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ae:	6083      	str	r3, [r0, #8]
}
 80041b0:	bc10      	pop	{r4}
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80041b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d066      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xd6>
{
 80041bc:	b510      	push	{r4, lr}
 80041be:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80041c0:	2301      	movs	r3, #1
 80041c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80041c6:	2302      	movs	r3, #2
 80041c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80041cc:	6802      	ldr	r2, [r0, #0]
 80041ce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80041d8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80041da:	680b      	ldr	r3, [r1, #0]
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d04a      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0xc2>
 80041e0:	d913      	bls.n	800420a <HAL_TIM_ConfigClockSource+0x56>
 80041e2:	2b60      	cmp	r3, #96	; 0x60
 80041e4:	d03d      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0xae>
 80041e6:	d91e      	bls.n	8004226 <HAL_TIM_ConfigClockSource+0x72>
 80041e8:	2b70      	cmp	r3, #112	; 0x70
 80041ea:	d028      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x8a>
 80041ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f0:	d130      	bne.n	8004254 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80041f2:	68cb      	ldr	r3, [r1, #12]
 80041f4:	684a      	ldr	r2, [r1, #4]
 80041f6:	6889      	ldr	r1, [r1, #8]
 80041f8:	6800      	ldr	r0, [r0, #0]
 80041fa:	f7ff ffd0 	bl	800419e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	6893      	ldr	r3, [r2, #8]
 8004202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004206:	6093      	str	r3, [r2, #8]
      break;
 8004208:	e024      	b.n	8004254 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800420a:	2b10      	cmp	r3, #16
 800420c:	d006      	beq.n	800421c <HAL_TIM_ConfigClockSource+0x68>
 800420e:	d904      	bls.n	800421a <HAL_TIM_ConfigClockSource+0x66>
 8004210:	2b20      	cmp	r3, #32
 8004212:	d003      	beq.n	800421c <HAL_TIM_ConfigClockSource+0x68>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d001      	beq.n	800421c <HAL_TIM_ConfigClockSource+0x68>
 8004218:	e01c      	b.n	8004254 <HAL_TIM_ConfigClockSource+0xa0>
 800421a:	b9db      	cbnz	r3, 8004254 <HAL_TIM_ConfigClockSource+0xa0>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800421c:	4619      	mov	r1, r3
 800421e:	6820      	ldr	r0, [r4, #0]
 8004220:	f7ff fe59 	bl	8003ed6 <TIM_ITRx_SetConfig>
        break;
 8004224:	e016      	b.n	8004254 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8004226:	2b50      	cmp	r3, #80	; 0x50
 8004228:	d114      	bne.n	8004254 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800422a:	68ca      	ldr	r2, [r1, #12]
 800422c:	6849      	ldr	r1, [r1, #4]
 800422e:	6800      	ldr	r0, [r0, #0]
 8004230:	f7ff fe2c 	bl	8003e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004234:	2150      	movs	r1, #80	; 0x50
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	f7ff fe4d 	bl	8003ed6 <TIM_ITRx_SetConfig>
      break;
 800423c:	e00a      	b.n	8004254 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800423e:	68cb      	ldr	r3, [r1, #12]
 8004240:	684a      	ldr	r2, [r1, #4]
 8004242:	6889      	ldr	r1, [r1, #8]
 8004244:	6800      	ldr	r0, [r0, #0]
 8004246:	f7ff ffaa 	bl	800419e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004252:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004254:	2301      	movs	r3, #1
 8004256:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800425a:	2000      	movs	r0, #0
 800425c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004260:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004262:	68ca      	ldr	r2, [r1, #12]
 8004264:	6849      	ldr	r1, [r1, #4]
 8004266:	6800      	ldr	r0, [r0, #0]
 8004268:	f7ff fe22 	bl	8003eb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800426c:	2160      	movs	r1, #96	; 0x60
 800426e:	6820      	ldr	r0, [r4, #0]
 8004270:	f7ff fe31 	bl	8003ed6 <TIM_ITRx_SetConfig>
      break;
 8004274:	e7ee      	b.n	8004254 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004276:	68ca      	ldr	r2, [r1, #12]
 8004278:	6849      	ldr	r1, [r1, #4]
 800427a:	6800      	ldr	r0, [r0, #0]
 800427c:	f7ff fe06 	bl	8003e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004280:	2140      	movs	r1, #64	; 0x40
 8004282:	6820      	ldr	r0, [r4, #0]
 8004284:	f7ff fe27 	bl	8003ed6 <TIM_ITRx_SetConfig>
      break;
 8004288:	e7e4      	b.n	8004254 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 800428a:	2002      	movs	r0, #2
}
 800428c:	4770      	bx	lr
	...

08004290 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004290:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d02b      	beq.n	80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8004298:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800429a:	2301      	movs	r3, #1
 800429c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	2302      	movs	r3, #2
 80042a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a6:	6803      	ldr	r3, [r0, #0]
 80042a8:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042aa:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ac:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b0:	680a      	ldr	r2, [r1, #0]
 80042b2:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b6:	6803      	ldr	r3, [r0, #0]
 80042b8:	4a0e      	ldr	r2, [pc, #56]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00a      	beq.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80042be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c2:	d007      	beq.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80042c4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80042cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d104      	bne.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042d4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d8:	684a      	ldr	r2, [r1, #4]
 80042da:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042dc:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042de:	2301      	movs	r3, #1
 80042e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e4:	2300      	movs	r3, #0
 80042e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80042ea:	4618      	mov	r0, r3
}
 80042ec:	bc30      	pop	{r4, r5}
 80042ee:	4770      	bx	lr
  __HAL_LOCK(htim);
 80042f0:	2002      	movs	r0, #2
}
 80042f2:	4770      	bx	lr
 80042f4:	40012c00 	.word	0x40012c00

080042f8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f8:	4770      	bx	lr

080042fa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042fa:	4770      	bx	lr

080042fc <__libc_init_array>:
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	2500      	movs	r5, #0
 8004300:	4e0c      	ldr	r6, [pc, #48]	; (8004334 <__libc_init_array+0x38>)
 8004302:	4c0d      	ldr	r4, [pc, #52]	; (8004338 <__libc_init_array+0x3c>)
 8004304:	1ba4      	subs	r4, r4, r6
 8004306:	10a4      	asrs	r4, r4, #2
 8004308:	42a5      	cmp	r5, r4
 800430a:	d109      	bne.n	8004320 <__libc_init_array+0x24>
 800430c:	f000 f880 	bl	8004410 <_init>
 8004310:	2500      	movs	r5, #0
 8004312:	4e0a      	ldr	r6, [pc, #40]	; (800433c <__libc_init_array+0x40>)
 8004314:	4c0a      	ldr	r4, [pc, #40]	; (8004340 <__libc_init_array+0x44>)
 8004316:	1ba4      	subs	r4, r4, r6
 8004318:	10a4      	asrs	r4, r4, #2
 800431a:	42a5      	cmp	r5, r4
 800431c:	d105      	bne.n	800432a <__libc_init_array+0x2e>
 800431e:	bd70      	pop	{r4, r5, r6, pc}
 8004320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004324:	4798      	blx	r3
 8004326:	3501      	adds	r5, #1
 8004328:	e7ee      	b.n	8004308 <__libc_init_array+0xc>
 800432a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800432e:	4798      	blx	r3
 8004330:	3501      	adds	r5, #1
 8004332:	e7f2      	b.n	800431a <__libc_init_array+0x1e>
 8004334:	08004460 	.word	0x08004460
 8004338:	08004460 	.word	0x08004460
 800433c:	08004460 	.word	0x08004460
 8004340:	08004464 	.word	0x08004464

08004344 <free>:
 8004344:	4b02      	ldr	r3, [pc, #8]	; (8004350 <free+0xc>)
 8004346:	4601      	mov	r1, r0
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	f000 b80b 	b.w	8004364 <_free_r>
 800434e:	bf00      	nop
 8004350:	2000001c 	.word	0x2000001c

08004354 <memset>:
 8004354:	4603      	mov	r3, r0
 8004356:	4402      	add	r2, r0
 8004358:	4293      	cmp	r3, r2
 800435a:	d100      	bne.n	800435e <memset+0xa>
 800435c:	4770      	bx	lr
 800435e:	f803 1b01 	strb.w	r1, [r3], #1
 8004362:	e7f9      	b.n	8004358 <memset+0x4>

08004364 <_free_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4605      	mov	r5, r0
 8004368:	2900      	cmp	r1, #0
 800436a:	d043      	beq.n	80043f4 <_free_r+0x90>
 800436c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004370:	1f0c      	subs	r4, r1, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	bfb8      	it	lt
 8004376:	18e4      	addlt	r4, r4, r3
 8004378:	f000 f848 	bl	800440c <__malloc_lock>
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <_free_r+0x94>)
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	4610      	mov	r0, r2
 8004382:	b933      	cbnz	r3, 8004392 <_free_r+0x2e>
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	6014      	str	r4, [r2, #0]
 8004388:	4628      	mov	r0, r5
 800438a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800438e:	f000 b83e 	b.w	800440e <__malloc_unlock>
 8004392:	42a3      	cmp	r3, r4
 8004394:	d90b      	bls.n	80043ae <_free_r+0x4a>
 8004396:	6821      	ldr	r1, [r4, #0]
 8004398:	1862      	adds	r2, r4, r1
 800439a:	4293      	cmp	r3, r2
 800439c:	bf01      	itttt	eq
 800439e:	681a      	ldreq	r2, [r3, #0]
 80043a0:	685b      	ldreq	r3, [r3, #4]
 80043a2:	1852      	addeq	r2, r2, r1
 80043a4:	6022      	streq	r2, [r4, #0]
 80043a6:	6063      	str	r3, [r4, #4]
 80043a8:	6004      	str	r4, [r0, #0]
 80043aa:	e7ed      	b.n	8004388 <_free_r+0x24>
 80043ac:	4613      	mov	r3, r2
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	b10a      	cbz	r2, 80043b6 <_free_r+0x52>
 80043b2:	42a2      	cmp	r2, r4
 80043b4:	d9fa      	bls.n	80043ac <_free_r+0x48>
 80043b6:	6819      	ldr	r1, [r3, #0]
 80043b8:	1858      	adds	r0, r3, r1
 80043ba:	42a0      	cmp	r0, r4
 80043bc:	d10b      	bne.n	80043d6 <_free_r+0x72>
 80043be:	6820      	ldr	r0, [r4, #0]
 80043c0:	4401      	add	r1, r0
 80043c2:	1858      	adds	r0, r3, r1
 80043c4:	4282      	cmp	r2, r0
 80043c6:	6019      	str	r1, [r3, #0]
 80043c8:	d1de      	bne.n	8004388 <_free_r+0x24>
 80043ca:	6810      	ldr	r0, [r2, #0]
 80043cc:	6852      	ldr	r2, [r2, #4]
 80043ce:	4401      	add	r1, r0
 80043d0:	6019      	str	r1, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	e7d8      	b.n	8004388 <_free_r+0x24>
 80043d6:	d902      	bls.n	80043de <_free_r+0x7a>
 80043d8:	230c      	movs	r3, #12
 80043da:	602b      	str	r3, [r5, #0]
 80043dc:	e7d4      	b.n	8004388 <_free_r+0x24>
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	1821      	adds	r1, r4, r0
 80043e2:	428a      	cmp	r2, r1
 80043e4:	bf01      	itttt	eq
 80043e6:	6811      	ldreq	r1, [r2, #0]
 80043e8:	6852      	ldreq	r2, [r2, #4]
 80043ea:	1809      	addeq	r1, r1, r0
 80043ec:	6021      	streq	r1, [r4, #0]
 80043ee:	6062      	str	r2, [r4, #4]
 80043f0:	605c      	str	r4, [r3, #4]
 80043f2:	e7c9      	b.n	8004388 <_free_r+0x24>
 80043f4:	bd38      	pop	{r3, r4, r5, pc}
 80043f6:	bf00      	nop
 80043f8:	200002ac 	.word	0x200002ac

080043fc <strcpy>:
 80043fc:	4603      	mov	r3, r0
 80043fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004402:	f803 2b01 	strb.w	r2, [r3], #1
 8004406:	2a00      	cmp	r2, #0
 8004408:	d1f9      	bne.n	80043fe <strcpy+0x2>
 800440a:	4770      	bx	lr

0800440c <__malloc_lock>:
 800440c:	4770      	bx	lr

0800440e <__malloc_unlock>:
 800440e:	4770      	bx	lr

08004410 <_init>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	bf00      	nop
 8004414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004416:	bc08      	pop	{r3}
 8004418:	469e      	mov	lr, r3
 800441a:	4770      	bx	lr

0800441c <_fini>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	bf00      	nop
 8004420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004422:	bc08      	pop	{r3}
 8004424:	469e      	mov	lr, r3
 8004426:	4770      	bx	lr
