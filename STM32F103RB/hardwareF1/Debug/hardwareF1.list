
hardwareF1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d88  08003d88  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08003d88  08003d88  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d88  08003d88  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d8c  08003d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000080  08003e10  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08003e10  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e1e  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028e2  00000000  00000000  00033ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c7e4  00000000  00000000  000367a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f40  00000000  00000000  00042f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ee0  00000000  00000000  00043ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00018d4a  00000000  00000000  00044db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d5f1  00000000  00000000  0005dafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00090ba3  00000000  00000000  0006b0eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000fbc8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e08  00000000  00000000  000fbd0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d38 	.word	0x08003d38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003d38 	.word	0x08003d38

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2f>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000900:	bf24      	itt	cs
 8000902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090a:	d90d      	bls.n	8000928 <__aeabi_d2f+0x30>
 800090c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800091c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000920:	bf08      	it	eq
 8000922:	f020 0001 	biceq.w	r0, r0, #1
 8000926:	4770      	bx	lr
 8000928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800092c:	d121      	bne.n	8000972 <__aeabi_d2f+0x7a>
 800092e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000932:	bfbc      	itt	lt
 8000934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000938:	4770      	bxlt	lr
 800093a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000942:	f1c2 0218 	rsb	r2, r2, #24
 8000946:	f1c2 0c20 	rsb	ip, r2, #32
 800094a:	fa10 f30c 	lsls.w	r3, r0, ip
 800094e:	fa20 f002 	lsr.w	r0, r0, r2
 8000952:	bf18      	it	ne
 8000954:	f040 0001 	orrne.w	r0, r0, #1
 8000958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000960:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000964:	ea40 000c 	orr.w	r0, r0, ip
 8000968:	fa23 f302 	lsr.w	r3, r3, r2
 800096c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000970:	e7cc      	b.n	800090c <__aeabi_d2f+0x14>
 8000972:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000976:	d107      	bne.n	8000988 <__aeabi_d2f+0x90>
 8000978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800097c:	bf1e      	ittt	ne
 800097e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000986:	4770      	bxne	lr
 8000988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800098c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_frsub>:
 8000998:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800099c:	e002      	b.n	80009a4 <__addsf3>
 800099e:	bf00      	nop

080009a0 <__aeabi_fsub>:
 80009a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a4 <__addsf3>:
 80009a4:	0042      	lsls	r2, r0, #1
 80009a6:	bf1f      	itttt	ne
 80009a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ac:	ea92 0f03 	teqne	r2, r3
 80009b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b8:	d06a      	beq.n	8000a90 <__addsf3+0xec>
 80009ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c2:	bfc1      	itttt	gt
 80009c4:	18d2      	addgt	r2, r2, r3
 80009c6:	4041      	eorgt	r1, r0
 80009c8:	4048      	eorgt	r0, r1
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	bfb8      	it	lt
 80009ce:	425b      	neglt	r3, r3
 80009d0:	2b19      	cmp	r3, #25
 80009d2:	bf88      	it	hi
 80009d4:	4770      	bxhi	lr
 80009d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4240      	negne	r0, r0
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f2:	bf18      	it	ne
 80009f4:	4249      	negne	r1, r1
 80009f6:	ea92 0f03 	teq	r2, r3
 80009fa:	d03f      	beq.n	8000a7c <__addsf3+0xd8>
 80009fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000a00:	fa41 fc03 	asr.w	ip, r1, r3
 8000a04:	eb10 000c 	adds.w	r0, r0, ip
 8000a08:	f1c3 0320 	rsb	r3, r3, #32
 8000a0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a14:	d502      	bpl.n	8000a1c <__addsf3+0x78>
 8000a16:	4249      	negs	r1, r1
 8000a18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a20:	d313      	bcc.n	8000a4a <__addsf3+0xa6>
 8000a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a26:	d306      	bcc.n	8000a36 <__addsf3+0x92>
 8000a28:	0840      	lsrs	r0, r0, #1
 8000a2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a2e:	f102 0201 	add.w	r2, r2, #1
 8000a32:	2afe      	cmp	r2, #254	; 0xfe
 8000a34:	d251      	bcs.n	8000ada <__addsf3+0x136>
 8000a36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3e:	bf08      	it	eq
 8000a40:	f020 0001 	biceq.w	r0, r0, #1
 8000a44:	ea40 0003 	orr.w	r0, r0, r3
 8000a48:	4770      	bx	lr
 8000a4a:	0049      	lsls	r1, r1, #1
 8000a4c:	eb40 0000 	adc.w	r0, r0, r0
 8000a50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a54:	f1a2 0201 	sub.w	r2, r2, #1
 8000a58:	d1ed      	bne.n	8000a36 <__addsf3+0x92>
 8000a5a:	fab0 fc80 	clz	ip, r0
 8000a5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a62:	ebb2 020c 	subs.w	r2, r2, ip
 8000a66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6a:	bfaa      	itet	ge
 8000a6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a70:	4252      	neglt	r2, r2
 8000a72:	4318      	orrge	r0, r3
 8000a74:	bfbc      	itt	lt
 8000a76:	40d0      	lsrlt	r0, r2
 8000a78:	4318      	orrlt	r0, r3
 8000a7a:	4770      	bx	lr
 8000a7c:	f092 0f00 	teq	r2, #0
 8000a80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a84:	bf06      	itte	eq
 8000a86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8a:	3201      	addeq	r2, #1
 8000a8c:	3b01      	subne	r3, #1
 8000a8e:	e7b5      	b.n	80009fc <__addsf3+0x58>
 8000a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9e:	d021      	beq.n	8000ae4 <__addsf3+0x140>
 8000aa0:	ea92 0f03 	teq	r2, r3
 8000aa4:	d004      	beq.n	8000ab0 <__addsf3+0x10c>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	bf08      	it	eq
 8000aac:	4608      	moveq	r0, r1
 8000aae:	4770      	bx	lr
 8000ab0:	ea90 0f01 	teq	r0, r1
 8000ab4:	bf1c      	itt	ne
 8000ab6:	2000      	movne	r0, #0
 8000ab8:	4770      	bxne	lr
 8000aba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000abe:	d104      	bne.n	8000aca <__addsf3+0x126>
 8000ac0:	0040      	lsls	r0, r0, #1
 8000ac2:	bf28      	it	cs
 8000ac4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	4770      	bx	lr
 8000aca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ace:	bf3c      	itt	cc
 8000ad0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bxcc	lr
 8000ad6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ada:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ae8:	bf16      	itet	ne
 8000aea:	4608      	movne	r0, r1
 8000aec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af0:	4601      	movne	r1, r0
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	bf06      	itte	eq
 8000af6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afa:	ea90 0f01 	teqeq	r0, r1
 8000afe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_ui2f>:
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	e004      	b.n	8000b14 <__aeabi_i2f+0x8>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_i2f>:
 8000b0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	bf48      	it	mi
 8000b12:	4240      	negmi	r0, r0
 8000b14:	ea5f 0c00 	movs.w	ip, r0
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b20:	4601      	mov	r1, r0
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	e01c      	b.n	8000b62 <__aeabi_l2f+0x2a>

08000b28 <__aeabi_ul2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	e00a      	b.n	8000b4c <__aeabi_l2f+0x14>
 8000b36:	bf00      	nop

08000b38 <__aeabi_l2f>:
 8000b38:	ea50 0201 	orrs.w	r2, r0, r1
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__aeabi_l2f+0x14>
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	ea5f 0c01 	movs.w	ip, r1
 8000b50:	bf02      	ittt	eq
 8000b52:	4684      	moveq	ip, r0
 8000b54:	4601      	moveq	r1, r0
 8000b56:	2000      	moveq	r0, #0
 8000b58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b66:	fabc f28c 	clz	r2, ip
 8000b6a:	3a08      	subs	r2, #8
 8000b6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b70:	db10      	blt.n	8000b94 <__aeabi_l2f+0x5c>
 8000b72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b76:	4463      	add	r3, ip
 8000b78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b7c:	f1c2 0220 	rsb	r2, r2, #32
 8000b80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b84:	fa20 f202 	lsr.w	r2, r0, r2
 8000b88:	eb43 0002 	adc.w	r0, r3, r2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f102 0220 	add.w	r2, r2, #32
 8000b98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ba0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ba8:	eb43 0002 	adc.w	r0, r3, r2
 8000bac:	bf08      	it	eq
 8000bae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_fmul>:
 8000bb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc2:	ea92 0f0c 	teqne	r2, ip
 8000bc6:	ea93 0f0c 	teqne	r3, ip
 8000bca:	d06f      	beq.n	8000cac <__aeabi_fmul+0xf8>
 8000bcc:	441a      	add	r2, r3
 8000bce:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd2:	0240      	lsls	r0, r0, #9
 8000bd4:	bf18      	it	ne
 8000bd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bda:	d01e      	beq.n	8000c1a <__aeabi_fmul+0x66>
 8000bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000be8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf4:	bf3e      	ittt	cc
 8000bf6:	0049      	lslcc	r1, r1, #1
 8000bf8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bfc:	005b      	lslcc	r3, r3, #1
 8000bfe:	ea40 0001 	orr.w	r0, r0, r1
 8000c02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c06:	2afd      	cmp	r2, #253	; 0xfd
 8000c08:	d81d      	bhi.n	8000c46 <__aeabi_fmul+0x92>
 8000c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	4770      	bx	lr
 8000c1a:	f090 0f00 	teq	r0, #0
 8000c1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c22:	bf08      	it	eq
 8000c24:	0249      	lsleq	r1, r1, #9
 8000c26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c2e:	3a7f      	subs	r2, #127	; 0x7f
 8000c30:	bfc2      	ittt	gt
 8000c32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3a:	4770      	bxgt	lr
 8000c3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	3a01      	subs	r2, #1
 8000c46:	dc5d      	bgt.n	8000d04 <__aeabi_fmul+0x150>
 8000c48:	f112 0f19 	cmn.w	r2, #25
 8000c4c:	bfdc      	itt	le
 8000c4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c52:	4770      	bxle	lr
 8000c54:	f1c2 0200 	rsb	r2, r2, #0
 8000c58:	0041      	lsls	r1, r0, #1
 8000c5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c5e:	f1c2 0220 	rsb	r2, r2, #32
 8000c62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6a:	f140 0000 	adc.w	r0, r0, #0
 8000c6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c72:	bf08      	it	eq
 8000c74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c78:	4770      	bx	lr
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c82:	bf02      	ittt	eq
 8000c84:	0040      	lsleq	r0, r0, #1
 8000c86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8a:	3a01      	subeq	r2, #1
 8000c8c:	d0f9      	beq.n	8000c82 <__aeabi_fmul+0xce>
 8000c8e:	ea40 000c 	orr.w	r0, r0, ip
 8000c92:	f093 0f00 	teq	r3, #0
 8000c96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0049      	lsleq	r1, r1, #1
 8000c9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca2:	3b01      	subeq	r3, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fmul+0xe6>
 8000ca6:	ea41 010c 	orr.w	r1, r1, ip
 8000caa:	e78f      	b.n	8000bcc <__aeabi_fmul+0x18>
 8000cac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb0:	ea92 0f0c 	teq	r2, ip
 8000cb4:	bf18      	it	ne
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d00a      	beq.n	8000cd2 <__aeabi_fmul+0x11e>
 8000cbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc0:	bf18      	it	ne
 8000cc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cc6:	d1d8      	bne.n	8000c7a <__aeabi_fmul+0xc6>
 8000cc8:	ea80 0001 	eor.w	r0, r0, r1
 8000ccc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f090 0f00 	teq	r0, #0
 8000cd6:	bf17      	itett	ne
 8000cd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	f091 0f00 	teqne	r1, #0
 8000ce2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ce6:	d014      	beq.n	8000d12 <__aeabi_fmul+0x15e>
 8000ce8:	ea92 0f0c 	teq	r2, ip
 8000cec:	d101      	bne.n	8000cf2 <__aeabi_fmul+0x13e>
 8000cee:	0242      	lsls	r2, r0, #9
 8000cf0:	d10f      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000cf2:	ea93 0f0c 	teq	r3, ip
 8000cf6:	d103      	bne.n	8000d00 <__aeabi_fmul+0x14c>
 8000cf8:	024b      	lsls	r3, r1, #9
 8000cfa:	bf18      	it	ne
 8000cfc:	4608      	movne	r0, r1
 8000cfe:	d108      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000d00:	ea80 0001 	eor.w	r0, r0, r1
 8000d04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	4770      	bx	lr
 8000d12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fdiv>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d069      	beq.n	8000e08 <__aeabi_fdiv+0xec>
 8000d34:	eba2 0203 	sub.w	r2, r2, r3
 8000d38:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3c:	0249      	lsls	r1, r1, #9
 8000d3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d42:	d037      	beq.n	8000db4 <__aeabi_fdiv+0x98>
 8000d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf38      	it	cc
 8000d58:	005b      	lslcc	r3, r3, #1
 8000d5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d62:	428b      	cmp	r3, r1
 8000d64:	bf24      	itt	cs
 8000d66:	1a5b      	subcs	r3, r3, r1
 8000d68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d70:	bf24      	itt	cs
 8000d72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d7e:	bf24      	itt	cs
 8000d80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d8c:	bf24      	itt	cs
 8000d8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	bf18      	it	ne
 8000d9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d9e:	d1e0      	bne.n	8000d62 <__aeabi_fdiv+0x46>
 8000da0:	2afd      	cmp	r2, #253	; 0xfd
 8000da2:	f63f af50 	bhi.w	8000c46 <__aeabi_fmul+0x92>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbc:	327f      	adds	r2, #127	; 0x7f
 8000dbe:	bfc2      	ittt	gt
 8000dc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc8:	4770      	bxgt	lr
 8000dca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	e737      	b.n	8000c46 <__aeabi_fmul+0x92>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0040      	lsleq	r0, r0, #1
 8000de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000de6:	3a01      	subeq	r2, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fdiv+0xc2>
 8000dea:	ea40 000c 	orr.w	r0, r0, ip
 8000dee:	f093 0f00 	teq	r3, #0
 8000df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0049      	lsleq	r1, r1, #1
 8000dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dfe:	3b01      	subeq	r3, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fdiv+0xda>
 8000e02:	ea41 010c 	orr.w	r1, r1, ip
 8000e06:	e795      	b.n	8000d34 <__aeabi_fdiv+0x18>
 8000e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d108      	bne.n	8000e24 <__aeabi_fdiv+0x108>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	f47f af7d 	bne.w	8000d12 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	f47f af70 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e776      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e24:	ea93 0f0c 	teq	r3, ip
 8000e28:	d104      	bne.n	8000e34 <__aeabi_fdiv+0x118>
 8000e2a:	024b      	lsls	r3, r1, #9
 8000e2c:	f43f af4c 	beq.w	8000cc8 <__aeabi_fmul+0x114>
 8000e30:	4608      	mov	r0, r1
 8000e32:	e76e      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e38:	bf18      	it	ne
 8000e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	d1ca      	bne.n	8000dd6 <__aeabi_fdiv+0xba>
 8000e40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e44:	f47f af5c 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e4c:	f47f af3c 	bne.w	8000cc8 <__aeabi_fmul+0x114>
 8000e50:	e75f      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e52:	bf00      	nop

08000e54 <DS18B20_Reset>:
static uint8_t DS18B20_Read(void);
static void DS18B20_Read_Scratchpad(void);
static void DS18B20_Convert_Temperature(void);

static uint8_t DS18B20_Reset(void)
{
 8000e54:	b510      	push	{r4, lr}
	uint8_t response = 0;
	DS18B20Service.Set_Pin_Output(DS18B20Service.pinNumber);
 8000e56:	4c10      	ldr	r4, [pc, #64]	; (8000e98 <DS18B20_Reset+0x44>)
 8000e58:	6863      	ldr	r3, [r4, #4]
 8000e5a:	7e60      	ldrb	r0, [r4, #25]
 8000e5c:	4798      	blx	r3
	DS18B20Service.Write_Pin(DS18B20Service.pinNumber, 0);
 8000e5e:	68e3      	ldr	r3, [r4, #12]
 8000e60:	2100      	movs	r1, #0
 8000e62:	7e60      	ldrb	r0, [r4, #25]
 8000e64:	4798      	blx	r3
	DS18B20Service.Delays_us(480);   // delay according to datasheet
 8000e66:	68a3      	ldr	r3, [r4, #8]
 8000e68:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000e6c:	4798      	blx	r3
	DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);    // set the pin as input
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	7e60      	ldrb	r0, [r4, #25]
 8000e72:	4798      	blx	r3
	DS18B20Service.Delays_us(80);    // delay according to datasheet
 8000e74:	68a3      	ldr	r3, [r4, #8]
 8000e76:	2050      	movs	r0, #80	; 0x50
 8000e78:	4798      	blx	r3
	if (!(DS18B20Service.Read_Pin(DS18B20Service.pinNumber)))
 8000e7a:	6923      	ldr	r3, [r4, #16]
 8000e7c:	7e60      	ldrb	r0, [r4, #25]
 8000e7e:	4798      	blx	r3
 8000e80:	b938      	cbnz	r0, 8000e92 <DS18B20_Reset+0x3e>
		response = 1;    // if the pin is low i.e the presence pulse is detected
 8000e82:	2401      	movs	r4, #1

	DS18B20Service.Delays_us(400); // 480 us delay totally.
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <DS18B20_Reset+0x44>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e8c:	4798      	blx	r3

	return response;
}
 8000e8e:	4620      	mov	r0, r4
 8000e90:	bd10      	pop	{r4, pc}
	uint8_t response = 0;
 8000e92:	2400      	movs	r4, #0
 8000e94:	e7f6      	b.n	8000e84 <DS18B20_Reset+0x30>
 8000e96:	bf00      	nop
 8000e98:	200000b0 	.word	0x200000b0

08000e9c <DS18B20_Write>:
		DS18B20_Convert_Temperature();
	}
}

static void DS18B20_Write(uint8_t data)
{
 8000e9c:	b570      	push	{r4, r5, r6, lr}
 8000e9e:	4606      	mov	r6, r0
	DS18B20Service.Set_Pin_Output(DS18B20Service.pinNumber);  // set as output
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <DS18B20_Write+0x68>)
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	7e58      	ldrb	r0, [r3, #25]
 8000ea6:	4790      	blx	r2

	for (int i = 0; i < 8; i++)
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	e011      	b.n	8000ed0 <DS18B20_Write+0x34>
			DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);  // set as input
			DS18B20Service.Delays_us(60);  // wait for 60 us
		}
		else  // if the bit is low
		{
			DS18B20Service.Set_Pin_Output(DS18B20Service.pinNumber);
 8000eac:	4c15      	ldr	r4, [pc, #84]	; (8000f04 <DS18B20_Write+0x68>)
 8000eae:	6863      	ldr	r3, [r4, #4]
 8000eb0:	7e60      	ldrb	r0, [r4, #25]
 8000eb2:	4798      	blx	r3
			DS18B20Service.Write_Pin(DS18B20Service.pinNumber, 0);  // pull the pin LOW
 8000eb4:	68e3      	ldr	r3, [r4, #12]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	7e60      	ldrb	r0, [r4, #25]
 8000eba:	4798      	blx	r3
			DS18B20Service.Delays_us(60);  // wait for 60 us
 8000ebc:	68a3      	ldr	r3, [r4, #8]
 8000ebe:	203c      	movs	r0, #60	; 0x3c
 8000ec0:	4798      	blx	r3
			DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	7e60      	ldrb	r0, [r4, #25]
 8000ec6:	4798      	blx	r3
			DS18B20Service.Delays_us(1);  // wait for 60 us
 8000ec8:	68a3      	ldr	r3, [r4, #8]
 8000eca:	2001      	movs	r0, #1
 8000ecc:	4798      	blx	r3
	for (int i = 0; i < 8; i++)
 8000ece:	3501      	adds	r5, #1
 8000ed0:	2d07      	cmp	r5, #7
 8000ed2:	dc16      	bgt.n	8000f02 <DS18B20_Write+0x66>
		if ((data & (1 << i)) != 0)  // if the bit is high
 8000ed4:	fa46 f305 	asr.w	r3, r6, r5
 8000ed8:	f013 0f01 	tst.w	r3, #1
 8000edc:	d0e6      	beq.n	8000eac <DS18B20_Write+0x10>
			DS18B20Service.Set_Pin_Output(DS18B20Service.pinNumber);  // set as output
 8000ede:	4c09      	ldr	r4, [pc, #36]	; (8000f04 <DS18B20_Write+0x68>)
 8000ee0:	6863      	ldr	r3, [r4, #4]
 8000ee2:	7e60      	ldrb	r0, [r4, #25]
 8000ee4:	4798      	blx	r3
			DS18B20Service.Write_Pin(DS18B20Service.pinNumber, 0);  // pull the pin LOW
 8000ee6:	68e3      	ldr	r3, [r4, #12]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	7e60      	ldrb	r0, [r4, #25]
 8000eec:	4798      	blx	r3
			DS18B20Service.Delays_us(1);  // wait for 1 us
 8000eee:	68a3      	ldr	r3, [r4, #8]
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	4798      	blx	r3
			DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);  // set as input
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	7e60      	ldrb	r0, [r4, #25]
 8000ef8:	4798      	blx	r3
			DS18B20Service.Delays_us(60);  // wait for 60 us
 8000efa:	68a3      	ldr	r3, [r4, #8]
 8000efc:	203c      	movs	r0, #60	; 0x3c
 8000efe:	4798      	blx	r3
 8000f00:	e7e5      	b.n	8000ece <DS18B20_Write+0x32>
		}
	}
}
 8000f02:	bd70      	pop	{r4, r5, r6, pc}
 8000f04:	200000b0 	.word	0x200000b0

08000f08 <DS18B20_Read>:

static uint8_t DS18B20_Read(void)
{
 8000f08:	b570      	push	{r4, r5, r6, lr}
	uint8_t value = 0;
	DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <DS18B20_Read+0x54>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	7e58      	ldrb	r0, [r3, #25]
 8000f10:	4790      	blx	r2

	for (int i = 0; i < 8; i++)
 8000f12:	2500      	movs	r5, #0
	uint8_t value = 0;
 8000f14:	462e      	mov	r6, r5
	for (int i = 0; i < 8; i++)
 8000f16:	e004      	b.n	8000f22 <DS18B20_Read+0x1a>
		DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);  // set as input
		if (DS18B20Service.Read_Pin(DS18B20Service.pinNumber))  // if the pin is HIGH
		{
			value |= 1 << i;  // read = 1
		}
		DS18B20Service.Delays_us(60);  // wait for 60 us
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <DS18B20_Read+0x54>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	203c      	movs	r0, #60	; 0x3c
 8000f1e:	4798      	blx	r3
	for (int i = 0; i < 8; i++)
 8000f20:	3501      	adds	r5, #1
 8000f22:	2d07      	cmp	r5, #7
 8000f24:	dc17      	bgt.n	8000f56 <DS18B20_Read+0x4e>
		DS18B20Service.Set_Pin_Output(DS18B20Service.pinNumber);   // set as output
 8000f26:	4c0d      	ldr	r4, [pc, #52]	; (8000f5c <DS18B20_Read+0x54>)
 8000f28:	6863      	ldr	r3, [r4, #4]
 8000f2a:	7e60      	ldrb	r0, [r4, #25]
 8000f2c:	4798      	blx	r3
		DS18B20Service.Write_Pin(DS18B20Service.pinNumber, 0);  // pull the data pin LOW
 8000f2e:	68e3      	ldr	r3, [r4, #12]
 8000f30:	2100      	movs	r1, #0
 8000f32:	7e60      	ldrb	r0, [r4, #25]
 8000f34:	4798      	blx	r3
		DS18B20Service.Delays_us(2);  // wait for 2 us
 8000f36:	68a3      	ldr	r3, [r4, #8]
 8000f38:	2002      	movs	r0, #2
 8000f3a:	4798      	blx	r3
		DS18B20Service.Set_Pin_Input(DS18B20Service.pinNumber);  // set as input
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	7e60      	ldrb	r0, [r4, #25]
 8000f40:	4798      	blx	r3
		if (DS18B20Service.Read_Pin(DS18B20Service.pinNumber))  // if the pin is HIGH
 8000f42:	6923      	ldr	r3, [r4, #16]
 8000f44:	7e60      	ldrb	r0, [r4, #25]
 8000f46:	4798      	blx	r3
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d0e5      	beq.n	8000f18 <DS18B20_Read+0x10>
			value |= 1 << i;  // read = 1
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	40a8      	lsls	r0, r5
 8000f50:	4330      	orrs	r0, r6
 8000f52:	b2c6      	uxtb	r6, r0
 8000f54:	e7e0      	b.n	8000f18 <DS18B20_Read+0x10>
	}
	return value;
}
 8000f56:	4630      	mov	r0, r6
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000b0 	.word	0x200000b0

08000f60 <DS18B20_Convert_Temperature>:
		}
	}
}

static void DS18B20_Convert_Temperature(void)
{
 8000f60:	b510      	push	{r4, lr}
	DS18B20Service.isResponseFromDevice = DS18B20_Reset();
 8000f62:	f7ff ff77 	bl	8000e54 <DS18B20_Reset>
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <DS18B20_Convert_Temperature+0x2c>)
 8000f68:	7618      	strb	r0, [r3, #24]
	if (DS18B20Service.isResponseFromDevice)
 8000f6a:	b900      	cbnz	r0, 8000f6e <DS18B20_Convert_Temperature+0xe>
		DS18B20_Write(SKIP_ROM_CMD);
		DS18B20_Write(CONVERT_T_CMD);
		DS18B20Service.timeStamp = DS18B20Service.Get_Sys_Time();
		DS18B20Service.waitForReadScratchpad = 1;
	}
}
 8000f6c:	bd10      	pop	{r4, pc}
		DS18B20_Write(SKIP_ROM_CMD);
 8000f6e:	20cc      	movs	r0, #204	; 0xcc
 8000f70:	f7ff ff94 	bl	8000e9c <DS18B20_Write>
		DS18B20_Write(CONVERT_T_CMD);
 8000f74:	2044      	movs	r0, #68	; 0x44
 8000f76:	f7ff ff91 	bl	8000e9c <DS18B20_Write>
		DS18B20Service.timeStamp = DS18B20Service.Get_Sys_Time();
 8000f7a:	4c04      	ldr	r4, [pc, #16]	; (8000f8c <DS18B20_Convert_Temperature+0x2c>)
 8000f7c:	6963      	ldr	r3, [r4, #20]
 8000f7e:	4798      	blx	r3
 8000f80:	61e0      	str	r0, [r4, #28]
		DS18B20Service.waitForReadScratchpad = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000f88:	e7f0      	b.n	8000f6c <DS18B20_Convert_Temperature+0xc>
 8000f8a:	bf00      	nop
 8000f8c:	200000b0 	.word	0x200000b0

08000f90 <DS18B20_Read_Scratchpad>:
{
 8000f90:	b530      	push	{r4, r5, lr}
 8000f92:	b085      	sub	sp, #20
	memset(responseData, 0, sizeof(responseData));
 8000f94:	2300      	movs	r3, #0
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	f88d 300c 	strb.w	r3, [sp, #12]
	DS18B20Service.waitForReadScratchpad = 0;
 8000f9e:	4c21      	ldr	r4, [pc, #132]	; (8001024 <DS18B20_Read_Scratchpad+0x94>)
 8000fa0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	DS18B20Service.isResponseFromDevice = DS18B20_Reset();
 8000fa4:	f7ff ff56 	bl	8000e54 <DS18B20_Reset>
 8000fa8:	7620      	strb	r0, [r4, #24]
	if (DS18B20Service.isResponseFromDevice)
 8000faa:	b908      	cbnz	r0, 8000fb0 <DS18B20_Read_Scratchpad+0x20>
}
 8000fac:	b005      	add	sp, #20
 8000fae:	bd30      	pop	{r4, r5, pc}
		DS18B20_Write(SKIP_ROM_CMD);
 8000fb0:	20cc      	movs	r0, #204	; 0xcc
 8000fb2:	f7ff ff73 	bl	8000e9c <DS18B20_Write>
		DS18B20_Write(READ_SCRATCHPAD_CMD);
 8000fb6:	20be      	movs	r0, #190	; 0xbe
 8000fb8:	f7ff ff70 	bl	8000e9c <DS18B20_Write>
		for (uint8_t i = 0; i < RESPONSE_ARRAY_SIZE; i++)
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	e007      	b.n	8000fd0 <DS18B20_Read_Scratchpad+0x40>
			responseData[i] = DS18B20_Read();
 8000fc0:	f7ff ffa2 	bl	8000f08 <DS18B20_Read>
 8000fc4:	ab04      	add	r3, sp, #16
 8000fc6:	4423      	add	r3, r4
 8000fc8:	f803 0c0c 	strb.w	r0, [r3, #-12]
		for (uint8_t i = 0; i < RESPONSE_ARRAY_SIZE; i++)
 8000fcc:	3401      	adds	r4, #1
 8000fce:	b2e4      	uxtb	r4, r4
 8000fd0:	2c08      	cmp	r4, #8
 8000fd2:	d9f5      	bls.n	8000fc0 <DS18B20_Read_Scratchpad+0x30>
		DS18B20Service.currentTemperature = (float) (responseData[TEMPERATURE_LSB_BYTE] & 0x0F) / 16.0f;	//bity części ułamkowej
 8000fd4:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8000fd8:	f004 000f 	and.w	r0, r4, #15
 8000fdc:	f7ff fd96 	bl	8000b0c <__aeabi_i2f>
 8000fe0:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8000fe4:	f7ff fde6 	bl	8000bb4 <__aeabi_fmul>
 8000fe8:	4605      	mov	r5, r0
		DS18B20Service.currentTemperature += (float) (responseData[TEMPERATURE_LSB_BYTE] >> 4);		//bity części całkowitej mniej znaczącego bajtu
 8000fea:	0920      	lsrs	r0, r4, #4
 8000fec:	f7ff fd8e 	bl	8000b0c <__aeabi_i2f>
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	f7ff fcd6 	bl	80009a4 <__addsf3>
 8000ff8:	4605      	mov	r5, r0
		DS18B20Service.currentTemperature += (float) ((responseData[TEMPERATURE_MSB_BYTE] << 4) & 0x70);//bity części całkowitej bardziej znaczącego bajitu
 8000ffa:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8000ffe:	0120      	lsls	r0, r4, #4
 8001000:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001004:	f7ff fd82 	bl	8000b0c <__aeabi_i2f>
 8001008:	4601      	mov	r1, r0
 800100a:	4628      	mov	r0, r5
 800100c:	f7ff fcca 	bl	80009a4 <__addsf3>
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <DS18B20_Read_Scratchpad+0x94>)
 8001012:	6218      	str	r0, [r3, #32]
		if (responseData[TEMPERATURE_MSB_BYTE] & (0x01 << SIGN_BIT_NUMBER))	//znak (czy temp. dodatnia, czy ujemna)
 8001014:	f014 0f08 	tst.w	r4, #8
 8001018:	d0c8      	beq.n	8000fac <DS18B20_Read_Scratchpad+0x1c>
			DS18B20Service.currentTemperature *= -1;
 800101a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800101e:	6218      	str	r0, [r3, #32]
}
 8001020:	e7c4      	b.n	8000fac <DS18B20_Read_Scratchpad+0x1c>
 8001022:	bf00      	nop
 8001024:	200000b0 	.word	0x200000b0

08001028 <DS18B20_Init>:
{
 8001028:	b510      	push	{r4, lr}
	DS18B20Service.Set_Pin_Input = Set_Pin_Input;
 800102a:	4c0a      	ldr	r4, [pc, #40]	; (8001054 <DS18B20_Init+0x2c>)
 800102c:	6020      	str	r0, [r4, #0]
	DS18B20Service.Set_Pin_Output = Set_Pin_Output;
 800102e:	6061      	str	r1, [r4, #4]
	DS18B20Service.Delays_us = Delays_us;
 8001030:	60a2      	str	r2, [r4, #8]
	DS18B20Service.Write_Pin = Write_Pin;
 8001032:	60e3      	str	r3, [r4, #12]
	DS18B20Service.Read_Pin = Read_Pin;
 8001034:	9b02      	ldr	r3, [sp, #8]
 8001036:	6123      	str	r3, [r4, #16]
	DS18B20Service.pinNumber = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	7663      	strb	r3, [r4, #25]
	DS18B20Service.Get_Sys_Time = Get_Sys_Time;
 800103c:	9b03      	ldr	r3, [sp, #12]
 800103e:	6163      	str	r3, [r4, #20]
	DS18B20Service.currentTemperature = NAN;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <DS18B20_Init+0x30>)
 8001042:	6223      	str	r3, [r4, #32]
	DS18B20Service.isResponseFromDevice = DS18B20_Reset();
 8001044:	f7ff ff06 	bl	8000e54 <DS18B20_Reset>
 8001048:	7620      	strb	r0, [r4, #24]
	if (DS18B20Service.isResponseFromDevice)
 800104a:	b900      	cbnz	r0, 800104e <DS18B20_Init+0x26>
}
 800104c:	bd10      	pop	{r4, pc}
		DS18B20_Convert_Temperature();
 800104e:	f7ff ff87 	bl	8000f60 <DS18B20_Convert_Temperature>
}
 8001052:	e7fb      	b.n	800104c <DS18B20_Init+0x24>
 8001054:	200000b0 	.word	0x200000b0
 8001058:	7fc00000 	.word	0x7fc00000

0800105c <DS18B20_Service>:
	*temperature = DS18B20Service.currentTemperature;
	return 1;
}

void DS18B20_Service(void)
{
 800105c:	b510      	push	{r4, lr}
	if (!DS18B20Service.isResponseFromDevice)
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <DS18B20_Service+0x70>)
 8001060:	7e1b      	ldrb	r3, [r3, #24]
 8001062:	b9a3      	cbnz	r3, 800108e <DS18B20_Service+0x32>
	{
		DS18B20Service.currentTemperature = NAN;
 8001064:	4c19      	ldr	r4, [pc, #100]	; (80010cc <DS18B20_Service+0x70>)
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <DS18B20_Service+0x74>)
 8001068:	6223      	str	r3, [r4, #32]
		DS18B20Service.waitForReadScratchpad = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (DS18B20Service.Get_Sys_Time() - DS18B20Service.timeStamp > RESET_ATTEMPT_INTERVAL)
 8001070:	6963      	ldr	r3, [r4, #20]
 8001072:	4798      	blx	r3
 8001074:	69e3      	ldr	r3, [r4, #28]
 8001076:	1ac0      	subs	r0, r0, r3
 8001078:	f241 3388 	movw	r3, #5000	; 0x1388
 800107c:	4298      	cmp	r0, r3
 800107e:	d800      	bhi.n	8001082 <DS18B20_Service+0x26>
	}
	else if (DS18B20Service.Get_Sys_Time() - DS18B20Service.timeStamp > TIME_REFRESH_TEMPERATURE_VALUE)
	{
		DS18B20_Convert_Temperature();
	}
}
 8001080:	bd10      	pop	{r4, pc}
			DS18B20_Convert_Temperature();
 8001082:	f7ff ff6d 	bl	8000f60 <DS18B20_Convert_Temperature>
			DS18B20Service.timeStamp = DS18B20Service.Get_Sys_Time();
 8001086:	6963      	ldr	r3, [r4, #20]
 8001088:	4798      	blx	r3
 800108a:	61e0      	str	r0, [r4, #28]
 800108c:	e7f8      	b.n	8001080 <DS18B20_Service+0x24>
	else if (DS18B20Service.waitForReadScratchpad)
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <DS18B20_Service+0x70>)
 8001090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001094:	b16b      	cbz	r3, 80010b2 <DS18B20_Service+0x56>
		if (DS18B20Service.Get_Sys_Time() - DS18B20Service.timeStamp > TIME_TEMPERATURE_CONVERSION)
 8001096:	4c0d      	ldr	r4, [pc, #52]	; (80010cc <DS18B20_Service+0x70>)
 8001098:	6963      	ldr	r3, [r4, #20]
 800109a:	4798      	blx	r3
 800109c:	69e3      	ldr	r3, [r4, #28]
 800109e:	1ac0      	subs	r0, r0, r3
 80010a0:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 80010a4:	d9ec      	bls.n	8001080 <DS18B20_Service+0x24>
			DS18B20_Read_Scratchpad();
 80010a6:	f7ff ff73 	bl	8000f90 <DS18B20_Read_Scratchpad>
			DS18B20Service.timeStamp = DS18B20Service.Get_Sys_Time();
 80010aa:	6963      	ldr	r3, [r4, #20]
 80010ac:	4798      	blx	r3
 80010ae:	61e0      	str	r0, [r4, #28]
 80010b0:	e7e6      	b.n	8001080 <DS18B20_Service+0x24>
	else if (DS18B20Service.Get_Sys_Time() - DS18B20Service.timeStamp > TIME_REFRESH_TEMPERATURE_VALUE)
 80010b2:	4c06      	ldr	r4, [pc, #24]	; (80010cc <DS18B20_Service+0x70>)
 80010b4:	6963      	ldr	r3, [r4, #20]
 80010b6:	4798      	blx	r3
 80010b8:	69e3      	ldr	r3, [r4, #28]
 80010ba:	1ac0      	subs	r0, r0, r3
 80010bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80010c0:	4298      	cmp	r0, r3
 80010c2:	d9dd      	bls.n	8001080 <DS18B20_Service+0x24>
		DS18B20_Convert_Temperature();
 80010c4:	f7ff ff4c 	bl	8000f60 <DS18B20_Convert_Temperature>
}
 80010c8:	e7da      	b.n	8001080 <DS18B20_Service+0x24>
 80010ca:	bf00      	nop
 80010cc:	200000b0 	.word	0x200000b0
 80010d0:	7fc00000 	.word	0x7fc00000

080010d4 <Hardware_Init>:
		{ (GPIO_TypeDef*) DS18b20_GPIO_Port, DS18b20_Pin },
		{ (GPIO_TypeDef*) DS18b20_GPIO_Port, DS18b20_Pin }
};

void Hardware_Init(void)
{
 80010d4:	b508      	push	{r3, lr}
	microsecondTimerPtr = &MICROSECOND_TIMER;
 80010d6:	480b      	ldr	r0, [pc, #44]	; (8001104 <Hardware_Init+0x30>)
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <Hardware_Init+0x34>)
 80010da:	6018      	str	r0, [r3, #0]
	i2cForLCDPtr = &I2C_FOR_LCD;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <Hardware_Init+0x38>)
 80010de:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <Hardware_Init+0x3c>)
 80010e0:	601a      	str	r2, [r3, #0]
#if defined(STM32F411xE)
	HAL_TIM_Base_Start_IT(&htim3);
	HAL_TIM_Base_Start_IT(&htim1);
	HAL_ADC_Start_IT(&hadc1);
#elif defined(STM32F103xB)
	HAL_TIM_Base_Start_IT(&htim2);
 80010e2:	f002 fb95 	bl	8003810 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <Hardware_Init+0x40>)
 80010e8:	f002 fb92 	bl	8003810 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, tablicaADC, sizeof(tablicaADC));
 80010ec:	2204      	movs	r2, #4
 80010ee:	490a      	ldr	r1, [pc, #40]	; (8001118 <Hardware_Init+0x44>)
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <Hardware_Init+0x48>)
 80010f2:	f001 f865 	bl	80021c0 <HAL_ADC_Start_DMA>
#endif
	HAL_GPIO_WritePin(TRANSISTOR_BASE_GPIO_Port, TRANSISTOR_BASE_Pin, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2120      	movs	r1, #32
 80010fa:	4809      	ldr	r0, [pc, #36]	; (8001120 <Hardware_Init+0x4c>)
 80010fc:	f001 fca7 	bl	8002a4e <HAL_GPIO_WritePin>
}
 8001100:	bd08      	pop	{r3, pc}
 8001102:	bf00      	nop
 8001104:	20000268 	.word	0x20000268
 8001108:	200000e0 	.word	0x200000e0
 800110c:	200000dc 	.word	0x200000dc
 8001110:	20000158 	.word	0x20000158
 8001114:	200001ac 	.word	0x200001ac
 8001118:	2000009c 	.word	0x2000009c
 800111c:	200001f4 	.word	0x200001f4
 8001120:	40010c00 	.word	0x40010c00

08001124 <Timers_Callback_Service>:

void Timers_Callback_Service(TIM_HandleTypeDef *htim)
{
 8001124:	b508      	push	{r3, lr}
	if (htim->Instance == MILISECOND_CALLBACK_TIMER)
 8001126:	6802      	ldr	r2, [r0, #0]
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <Timers_Callback_Service+0x14>)
 800112a:	429a      	cmp	r2, r3
 800112c:	d000      	beq.n	8001130 <Timers_Callback_Service+0xc>
	{
		Time_Service();
	}
}
 800112e:	bd08      	pop	{r3, pc}
		Time_Service();
 8001130:	f000 fbda 	bl	80018e8 <Time_Service>
}
 8001134:	e7fb      	b.n	800112e <Timers_Callback_Service+0xa>
 8001136:	bf00      	nop
 8001138:	40000400 	.word	0x40000400

0800113c <Transmit_For_LCD>:
		__NOP();
	}
}

uint8_t Transmit_For_LCD(uint16_t deviceAddress, uint8_t *data, size_t dataSize, uint32_t timeout)
{
 800113c:	b510      	push	{r4, lr}
 800113e:	b082      	sub	sp, #8
	return HAL_I2C_Master_Transmit(i2cForLCDPtr, deviceAddress, (uint8_t*) data, dataSize, timeout);
 8001140:	4c05      	ldr	r4, [pc, #20]	; (8001158 <Transmit_For_LCD+0x1c>)
 8001142:	6824      	ldr	r4, [r4, #0]
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	b293      	uxth	r3, r2
 8001148:	460a      	mov	r2, r1
 800114a:	4601      	mov	r1, r0
 800114c:	4620      	mov	r0, r4
 800114e:	f001 fecd 	bl	8002eec <HAL_I2C_Master_Transmit>
}
 8001152:	b002      	add	sp, #8
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	200000dc 	.word	0x200000dc

0800115c <Delay_In_Milis>:

void Delay_In_Milis(uint32_t delay)
{
 800115c:	b508      	push	{r3, lr}
	HAL_Delay(delay);
 800115e:	f000 feff 	bl	8001f60 <HAL_Delay>
}
 8001162:	bd08      	pop	{r3, pc}

08001164 <I2C_Reinit_For_LCD>:

void I2C_Reinit_For_LCD(void)
{
 8001164:	b510      	push	{r4, lr}
	HAL_I2C_DeInit(i2cForLCDPtr);
 8001166:	4c05      	ldr	r4, [pc, #20]	; (800117c <I2C_Reinit_For_LCD+0x18>)
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	f001 fea5 	bl	8002eb8 <HAL_I2C_DeInit>
	HAL_Delay(200);
 800116e:	20c8      	movs	r0, #200	; 0xc8
 8001170:	f000 fef6 	bl	8001f60 <HAL_Delay>
	HAL_I2C_Init(i2cForLCDPtr);
 8001174:	6820      	ldr	r0, [r4, #0]
 8001176:	f001 fdc5 	bl	8002d04 <HAL_I2C_Init>
}
 800117a:	bd10      	pop	{r4, pc}
 800117c:	200000dc 	.word	0x200000dc

08001180 <Delays_us>:

void Delays_us(const uint16_t us_time)
{
	__HAL_TIM_SET_COUNTER(microsecondTimerPtr, 0);
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <Delays_us+0x14>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	6813      	ldr	r3, [r2, #0]
 8001186:	2100      	movs	r1, #0
 8001188:	6259      	str	r1, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(microsecondTimerPtr) < us_time)
 800118a:	6813      	ldr	r3, [r2, #0]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	4283      	cmp	r3, r0
 8001190:	d3fb      	bcc.n	800118a <Delays_us+0xa>
		;
}
 8001192:	4770      	bx	lr
 8001194:	200000e0 	.word	0x200000e0

08001198 <Set_Pin_Output>:

void Set_Pin_Output(uint8_t pinNumber)
{
	if (pinNumber >= sizeof(PinsConfiguration) / sizeof(PinsConfiguration[0]))
 8001198:	2801      	cmp	r0, #1
 800119a:	d900      	bls.n	800119e <Set_Pin_Output+0x6>
 800119c:	4770      	bx	lr
{
 800119e:	b500      	push	{lr}
 80011a0:	b085      	sub	sp, #20
		return;
	GPIO_InitTypeDef GPIO_InitStruct =
 80011a2:	2300      	movs	r3, #0
 80011a4:	9302      	str	r3, [sp, #8]
	{ 0 };
	GPIO_InitStruct.Pin = PinsConfiguration[pinNumber].pin;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <Set_Pin_Output+0x30>)
 80011a8:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80011ac:	6852      	ldr	r2, [r2, #4]
 80011ae:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2201      	movs	r2, #1
 80011b2:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2202      	movs	r2, #2
 80011b6:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(PinsConfiguration[pinNumber].port, &GPIO_InitStruct);
 80011b8:	4669      	mov	r1, sp
 80011ba:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80011be:	f001 fad7 	bl	8002770 <HAL_GPIO_Init>
}
 80011c2:	b005      	add	sp, #20
 80011c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80011c8:	20000000 	.word	0x20000000

080011cc <Set_Pin_Input>:

void Set_Pin_Input(uint8_t pinNumber)
{
	if (pinNumber >= sizeof(PinsConfiguration) / sizeof(PinsConfiguration[0]))
 80011cc:	2801      	cmp	r0, #1
 80011ce:	d900      	bls.n	80011d2 <Set_Pin_Input+0x6>
 80011d0:	4770      	bx	lr
{
 80011d2:	b500      	push	{lr}
 80011d4:	b085      	sub	sp, #20
		return;
	GPIO_InitTypeDef GPIO_InitStruct =
 80011d6:	2300      	movs	r3, #0
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	9303      	str	r3, [sp, #12]
	{ 0 };
	GPIO_InitStruct.Pin = PinsConfiguration[pinNumber].pin;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <Set_Pin_Input+0x30>)
 80011de:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80011e2:	6852      	ldr	r2, [r2, #4]
 80011e4:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e6:	2201      	movs	r2, #1
 80011e8:	9202      	str	r2, [sp, #8]
	HAL_GPIO_Init(PinsConfiguration[pinNumber].port, &GPIO_InitStruct);
 80011ea:	4669      	mov	r1, sp
 80011ec:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80011f0:	f001 fabe 	bl	8002770 <HAL_GPIO_Init>
}
 80011f4:	b005      	add	sp, #20
 80011f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80011fa:	bf00      	nop
 80011fc:	20000000 	.word	0x20000000

08001200 <Write_Pin>:

void Write_Pin(uint8_t pinNumber, uint8_t pinState)
{
	if (pinNumber >= sizeof(PinsConfiguration) / sizeof(PinsConfiguration[0]))
 8001200:	2801      	cmp	r0, #1
 8001202:	d900      	bls.n	8001206 <Write_Pin+0x6>
 8001204:	4770      	bx	lr
{
 8001206:	b508      	push	{r3, lr}
 8001208:	460a      	mov	r2, r1
		return;
	HAL_GPIO_WritePin(PinsConfiguration[pinNumber].port, PinsConfiguration[pinNumber].pin, pinState);
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <Write_Pin+0x1c>)
 800120c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8001210:	8889      	ldrh	r1, [r1, #4]
 8001212:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8001216:	f001 fc1a 	bl	8002a4e <HAL_GPIO_WritePin>
}
 800121a:	bd08      	pop	{r3, pc}
 800121c:	20000000 	.word	0x20000000

08001220 <Read_Pin>:

uint8_t Read_Pin(uint8_t pinNumber)
{
	if (pinNumber >= sizeof(PinsConfiguration) / sizeof(PinsConfiguration[0]))
 8001220:	2801      	cmp	r0, #1
 8001222:	d901      	bls.n	8001228 <Read_Pin+0x8>
		return 0;
 8001224:	2000      	movs	r0, #0
	return HAL_GPIO_ReadPin(PinsConfiguration[pinNumber].port, PinsConfiguration[pinNumber].pin);
}
 8001226:	4770      	bx	lr
{
 8001228:	b508      	push	{r3, lr}
	return HAL_GPIO_ReadPin(PinsConfiguration[pinNumber].port, PinsConfiguration[pinNumber].pin);
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <Read_Pin+0x1c>)
 800122c:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8001230:	8891      	ldrh	r1, [r2, #4]
 8001232:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8001236:	f001 fc03 	bl	8002a40 <HAL_GPIO_ReadPin>
}
 800123a:	bd08      	pop	{r3, pc}
 800123c:	20000000 	.word	0x20000000

08001240 <LCD_Send_Cmd>:
		Multi_Line_Service(0);
	}
}

static void LCD_Send_Cmd(uint8_t cmd)
{
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	4604      	mov	r4, r0
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8001246:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
	data_l = ((cmd << 4) & 0xf0);
 800124a:	0103      	lsls	r3, r0, #4
 800124c:	b2db      	uxtb	r3, r3
	data_t[0] = data_u | (DUMMY_BIT | ENABLE_BIT); //en=1, rs=0
 800124e:	f042 010c 	orr.w	r1, r2, #12
 8001252:	f88d 1004 	strb.w	r1, [sp, #4]
	data_t[1] = data_u | DUMMY_BIT;				   //en=0, rs=0
 8001256:	f042 0208 	orr.w	r2, r2, #8
 800125a:	f88d 2005 	strb.w	r2, [sp, #5]
	data_t[2] = data_l | (DUMMY_BIT | ENABLE_BIT); //en=1, rs=0
 800125e:	f043 020c 	orr.w	r2, r3, #12
 8001262:	f88d 2006 	strb.w	r2, [sp, #6]
	data_t[3] = data_l | DUMMY_BIT;				   //en=0, rs=0
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	f88d 3007 	strb.w	r3, [sp, #7]
	LCDService.communicationStatus = LCDService.Transmit_For_LCD( SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 200);
 800126e:	4d0b      	ldr	r5, [pc, #44]	; (800129c <LCD_Send_Cmd+0x5c>)
 8001270:	682e      	ldr	r6, [r5, #0]
 8001272:	23c8      	movs	r3, #200	; 0xc8
 8001274:	2204      	movs	r2, #4
 8001276:	eb0d 0102 	add.w	r1, sp, r2
 800127a:	207e      	movs	r0, #126	; 0x7e
 800127c:	47b0      	blx	r6
 800127e:	7328      	strb	r0, [r5, #12]
	if (cmd == CLEAR_DISPLAY_CMD || cmd == RETURN_HOME_CMD)
 8001280:	3c01      	subs	r4, #1
 8001282:	b2e4      	uxtb	r4, r4
 8001284:	2c01      	cmp	r4, #1
 8001286:	d905      	bls.n	8001294 <LCD_Send_Cmd+0x54>
		LCDService.Delay(6);
	else
		LCDService.Delay(1);
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <LCD_Send_Cmd+0x5c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2001      	movs	r0, #1
 800128e:	4798      	blx	r3
}
 8001290:	b002      	add	sp, #8
 8001292:	bd70      	pop	{r4, r5, r6, pc}
		LCDService.Delay(6);
 8001294:	686b      	ldr	r3, [r5, #4]
 8001296:	2006      	movs	r0, #6
 8001298:	4798      	blx	r3
 800129a:	e7f9      	b.n	8001290 <LCD_Send_Cmd+0x50>
 800129c:	200000e4 	.word	0x200000e4

080012a0 <LCD_Send_Data>:

static void LCD_Send_Data(char data)
{
 80012a0:	b530      	push	{r4, r5, lr}
 80012a2:	b083      	sub	sp, #12
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80012a4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data << 4) & 0xf0);
 80012a8:	0100      	lsls	r0, r0, #4
 80012aa:	b2c0      	uxtb	r0, r0
	data_t[0] = data_u | (DUMMY_BIT | ENABLE_BIT | RESET_BIT); //en=1, rs=1
 80012ac:	f043 020d 	orr.w	r2, r3, #13
 80012b0:	f88d 2004 	strb.w	r2, [sp, #4]
	data_t[1] = data_u | (DUMMY_BIT | RESET_BIT);			   //en=0, rs=1
 80012b4:	f043 0309 	orr.w	r3, r3, #9
 80012b8:	f88d 3005 	strb.w	r3, [sp, #5]
	data_t[2] = data_l | (DUMMY_BIT | ENABLE_BIT | RESET_BIT); //en=1, rs=1
 80012bc:	f040 030d 	orr.w	r3, r0, #13
 80012c0:	f88d 3006 	strb.w	r3, [sp, #6]
	data_t[3] = data_l | (DUMMY_BIT | RESET_BIT);			   //en=0, rs=1
 80012c4:	f040 0009 	orr.w	r0, r0, #9
 80012c8:	f88d 0007 	strb.w	r0, [sp, #7]
	LCDService.communicationStatus = LCDService.Transmit_For_LCD(SLAVE_ADDRESS_LCD, (uint8_t*) data_t, sizeof(data_t), 200);
 80012cc:	4c05      	ldr	r4, [pc, #20]	; (80012e4 <LCD_Send_Data+0x44>)
 80012ce:	6825      	ldr	r5, [r4, #0]
 80012d0:	23c8      	movs	r3, #200	; 0xc8
 80012d2:	2204      	movs	r2, #4
 80012d4:	eb0d 0102 	add.w	r1, sp, r2
 80012d8:	207e      	movs	r0, #126	; 0x7e
 80012da:	47a8      	blx	r5
 80012dc:	7320      	strb	r0, [r4, #12]
}
 80012de:	b003      	add	sp, #12
 80012e0:	bd30      	pop	{r4, r5, pc}
 80012e2:	bf00      	nop
 80012e4:	200000e4 	.word	0x200000e4

080012e8 <LCD_Send_String>:

static void LCD_Send_String(char *str)
{
 80012e8:	b538      	push	{r3, r4, r5, lr}
 80012ea:	4605      	mov	r5, r0
	uint8_t index = 0;
 80012ec:	2400      	movs	r4, #0
	while (str[index])
 80012ee:	e01b      	b.n	8001328 <LCD_Send_String+0x40>
	{
		switch (str[index])
 80012f0:	2886      	cmp	r0, #134	; 0x86
 80012f2:	d139      	bne.n	8001368 <LCD_Send_String+0x80>
		{
		case '\245':
			LCD_Send_Data(0x0);
			break;
		case '\206':
			LCD_Send_Data(0x01);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff ffd3 	bl	80012a0 <LCD_Send_Data>
			break;
 80012fa:	e013      	b.n	8001324 <LCD_Send_String+0x3c>
		switch (str[index])
 80012fc:	28ab      	cmp	r0, #171	; 0xab
 80012fe:	d02b      	beq.n	8001358 <LCD_Send_String+0x70>
 8001300:	d907      	bls.n	8001312 <LCD_Send_String+0x2a>
 8001302:	28be      	cmp	r0, #190	; 0xbe
 8001304:	d02c      	beq.n	8001360 <LCD_Send_String+0x78>
 8001306:	28e4      	cmp	r0, #228	; 0xe4
 8001308:	d12e      	bne.n	8001368 <LCD_Send_String+0x80>
			break;
		case '\210':
			LCD_Send_Data(0x03);
			break;
		case '\344':
			LCD_Send_Data(0x04);
 800130a:	2004      	movs	r0, #4
 800130c:	f7ff ffc8 	bl	80012a0 <LCD_Send_Data>
			break;
 8001310:	e008      	b.n	8001324 <LCD_Send_String+0x3c>
		switch (str[index])
 8001312:	28a9      	cmp	r0, #169	; 0xa9
 8001314:	d128      	bne.n	8001368 <LCD_Send_String+0x80>
			LCD_Send_Data(0x02);
 8001316:	2002      	movs	r0, #2
 8001318:	f7ff ffc2 	bl	80012a0 <LCD_Send_Data>
			break;
 800131c:	e002      	b.n	8001324 <LCD_Send_String+0x3c>
			LCD_Send_Data(0x0);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff ffbe 	bl	80012a0 <LCD_Send_Data>
			break;
		default:
			LCD_Send_Data(str[index]);
			break;
		}
		index++;
 8001324:	3401      	adds	r4, #1
 8001326:	b2e4      	uxtb	r4, r4
	while (str[index])
 8001328:	5d28      	ldrb	r0, [r5, r4]
 800132a:	b300      	cbz	r0, 800136e <LCD_Send_String+0x86>
		switch (str[index])
 800132c:	28a5      	cmp	r0, #165	; 0xa5
 800132e:	d0f6      	beq.n	800131e <LCD_Send_String+0x36>
 8001330:	d8e4      	bhi.n	80012fc <LCD_Send_String+0x14>
 8001332:	2888      	cmp	r0, #136	; 0x88
 8001334:	d008      	beq.n	8001348 <LCD_Send_String+0x60>
 8001336:	d9db      	bls.n	80012f0 <LCD_Send_String+0x8>
 8001338:	2898      	cmp	r0, #152	; 0x98
 800133a:	d009      	beq.n	8001350 <LCD_Send_String+0x68>
 800133c:	28a2      	cmp	r0, #162	; 0xa2
 800133e:	d113      	bne.n	8001368 <LCD_Send_String+0x80>
			LCD_Send_Data(0x05);
 8001340:	2005      	movs	r0, #5
 8001342:	f7ff ffad 	bl	80012a0 <LCD_Send_Data>
			break;
 8001346:	e7ed      	b.n	8001324 <LCD_Send_String+0x3c>
			LCD_Send_Data(0x03);
 8001348:	2003      	movs	r0, #3
 800134a:	f7ff ffa9 	bl	80012a0 <LCD_Send_Data>
			break;
 800134e:	e7e9      	b.n	8001324 <LCD_Send_String+0x3c>
			LCD_Send_Data(0x06);
 8001350:	2006      	movs	r0, #6
 8001352:	f7ff ffa5 	bl	80012a0 <LCD_Send_Data>
			break;
 8001356:	e7e5      	b.n	8001324 <LCD_Send_String+0x3c>
			LCD_Send_Data(0x07);
 8001358:	2007      	movs	r0, #7
 800135a:	f7ff ffa1 	bl	80012a0 <LCD_Send_Data>
			break;
 800135e:	e7e1      	b.n	8001324 <LCD_Send_String+0x3c>
			LCD_Send_Data(0x07);
 8001360:	2007      	movs	r0, #7
 8001362:	f7ff ff9d 	bl	80012a0 <LCD_Send_Data>
			break;
 8001366:	e7dd      	b.n	8001324 <LCD_Send_String+0x3c>
			LCD_Send_Data(str[index]);
 8001368:	f7ff ff9a 	bl	80012a0 <LCD_Send_Data>
			break;
 800136c:	e7da      	b.n	8001324 <LCD_Send_String+0x3c>
	}
}
 800136e:	bd38      	pop	{r3, r4, r5, pc}

08001370 <LCD_Send_String_2>:

static void LCD_Send_String_2(char *str, uint8_t countOfChars)
{
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	460c      	mov	r4, r1
	while (countOfChars)
 8001374:	e006      	b.n	8001384 <LCD_Send_String_2+0x14>
	{
		LCD_Send_Data(*str++);
 8001376:	1c45      	adds	r5, r0, #1
 8001378:	7800      	ldrb	r0, [r0, #0]
 800137a:	f7ff ff91 	bl	80012a0 <LCD_Send_Data>
		countOfChars--;
 800137e:	3c01      	subs	r4, #1
 8001380:	b2e4      	uxtb	r4, r4
		LCD_Send_Data(*str++);
 8001382:	4628      	mov	r0, r5
	while (countOfChars)
 8001384:	2c00      	cmp	r4, #0
 8001386:	d1f6      	bne.n	8001376 <LCD_Send_String_2+0x6>
	}
}
 8001388:	bd38      	pop	{r3, r4, r5, pc}
	...

0800138c <Set_Blank_Line>:

static void Set_Blank_Line(uint8_t lineNumber)
{
 800138c:	b510      	push	{r4, lr}
	if (lineNumber == 1)
 800138e:	2801      	cmp	r0, #1
 8001390:	d004      	beq.n	800139c <Set_Blank_Line+0x10>
	{
		LCD_Send_Cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
	}
	else
	{
		LCD_Send_Cmd(RETURN_HOME_CMD);
 8001392:	2002      	movs	r0, #2
 8001394:	f7ff ff54 	bl	8001240 <LCD_Send_Cmd>
{
 8001398:	2400      	movs	r4, #0
 800139a:	e008      	b.n	80013ae <Set_Blank_Line+0x22>
		LCD_Send_Cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 800139c:	20c0      	movs	r0, #192	; 0xc0
 800139e:	f7ff ff4f 	bl	8001240 <LCD_Send_Cmd>
 80013a2:	e7f9      	b.n	8001398 <Set_Blank_Line+0xc>
	}
	for (uint8_t i = 0; i < COUNT_OF_LETTERS_IN_ONE_LINE; i++)
	{
		LCD_Send_String(" ");
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <Set_Blank_Line+0x28>)
 80013a6:	f7ff ff9f 	bl	80012e8 <LCD_Send_String>
	for (uint8_t i = 0; i < COUNT_OF_LETTERS_IN_ONE_LINE; i++)
 80013aa:	3401      	adds	r4, #1
 80013ac:	b2e4      	uxtb	r4, r4
 80013ae:	2c0f      	cmp	r4, #15
 80013b0:	d9f8      	bls.n	80013a4 <Set_Blank_Line+0x18>
	}
}
 80013b2:	bd10      	pop	{r4, pc}
 80013b4:	08003d64 	.word	0x08003d64

080013b8 <Two_Lines_Separately_Service>:

static void Two_Lines_Separately_Service(void)
{
	if (LCDService.shiftTime == 0)
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 80013ba:	89db      	ldrh	r3, [r3, #14]
 80013bc:	b903      	cbnz	r3, 80013c0 <Two_Lines_Separately_Service+0x8>
 80013be:	4770      	bx	lr
{
 80013c0:	b510      	push	{r4, lr}
		return;
	if (Get_Sys_Time() - LCDService.previousMilisecond >= LCDService.shiftTime)
 80013c2:	f000 fab7 	bl	8001934 <Get_Sys_Time>
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 80013c8:	6953      	ldr	r3, [r2, #20]
 80013ca:	1ac0      	subs	r0, r0, r3
 80013cc:	89d3      	ldrh	r3, [r2, #14]
 80013ce:	4298      	cmp	r0, r3
 80013d0:	d200      	bcs.n	80013d4 <Two_Lines_Separately_Service+0x1c>
			LCD_Send_Cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
			LCD_Send_String_2(LCDService.secondLineString + LCDService.secondLinePrintPosition,
			COUNT_OF_LETTERS_IN_ONE_LINE);
		}
	}
}
 80013d2:	bd10      	pop	{r4, pc}
		LCDService.previousMilisecond = Get_Sys_Time();
 80013d4:	f000 faae 	bl	8001934 <Get_Sys_Time>
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 80013da:	6158      	str	r0, [r3, #20]
		if (LCDService.firstLineString[0] != 0)
 80013dc:	7edb      	ldrb	r3, [r3, #27]
 80013de:	b1c3      	cbz	r3, 8001412 <Two_Lines_Separately_Service+0x5a>
			LCDService.firstLinePrintPosition++;
 80013e0:	481b      	ldr	r0, [pc, #108]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 80013e2:	7e03      	ldrb	r3, [r0, #24]
 80013e4:	3301      	adds	r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	7603      	strb	r3, [r0, #24]
			if (LCDService.firstLinePrintPosition + COUNT_OF_LETTERS_IN_ONE_LINE > strlen(LCDService.firstLineString))
 80013ea:	f103 0410 	add.w	r4, r3, #16
 80013ee:	301b      	adds	r0, #27
 80013f0:	f7fe feac 	bl	800014c <strlen>
 80013f4:	4284      	cmp	r4, r0
 80013f6:	d902      	bls.n	80013fe <Two_Lines_Separately_Service+0x46>
				LCDService.firstLinePrintPosition = 0;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	761a      	strb	r2, [r3, #24]
			LCD_Send_Cmd(RETURN_HOME_CMD);
 80013fe:	2002      	movs	r0, #2
 8001400:	f7ff ff1e 	bl	8001240 <LCD_Send_Cmd>
			LCD_Send_String_2(LCDService.firstLineString + LCDService.firstLinePrintPosition,
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 8001406:	7e18      	ldrb	r0, [r3, #24]
 8001408:	331b      	adds	r3, #27
 800140a:	2110      	movs	r1, #16
 800140c:	4418      	add	r0, r3
 800140e:	f7ff ffaf 	bl	8001370 <LCD_Send_String_2>
		if (LCDService.secondLineString[0] != 0)
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 8001414:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0da      	beq.n	80013d2 <Two_Lines_Separately_Service+0x1a>
			LCDService.secondLinePrintPosition++;
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 800141e:	7e43      	ldrb	r3, [r0, #25]
 8001420:	3301      	adds	r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	7643      	strb	r3, [r0, #25]
			if (LCDService.secondLinePrintPosition + COUNT_OF_LETTERS_IN_ONE_LINE > strlen(LCDService.secondLineString))
 8001426:	f103 0410 	add.w	r4, r3, #16
 800142a:	303b      	adds	r0, #59	; 0x3b
 800142c:	f7fe fe8e 	bl	800014c <strlen>
 8001430:	4284      	cmp	r4, r0
 8001432:	d902      	bls.n	800143a <Two_Lines_Separately_Service+0x82>
				LCDService.secondLinePrintPosition = 0;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	765a      	strb	r2, [r3, #25]
			LCD_Send_Cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 800143a:	20c0      	movs	r0, #192	; 0xc0
 800143c:	f7ff ff00 	bl	8001240 <LCD_Send_Cmd>
			LCD_Send_String_2(LCDService.secondLineString + LCDService.secondLinePrintPosition,
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <Two_Lines_Separately_Service+0x98>)
 8001442:	7e58      	ldrb	r0, [r3, #25]
 8001444:	333b      	adds	r3, #59	; 0x3b
 8001446:	2110      	movs	r1, #16
 8001448:	4418      	add	r0, r3
 800144a:	f7ff ff91 	bl	8001370 <LCD_Send_String_2>
 800144e:	e7c0      	b.n	80013d2 <Two_Lines_Separately_Service+0x1a>
 8001450:	200000e4 	.word	0x200000e4

08001454 <LCD_Set_Shifting_Time>:
	LCDService.shiftTime = time;
 8001454:	4b01      	ldr	r3, [pc, #4]	; (800145c <LCD_Set_Shifting_Time+0x8>)
 8001456:	81d8      	strh	r0, [r3, #14]
}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	200000e4 	.word	0x200000e4

08001460 <LCD_Print_In_Separately_Line>:
	if (lineNumber >= COUNT_OF_LINES || LCDService.communicationStatus != COMMUNICATION_OK_STATUS)
 8001460:	2901      	cmp	r1, #1
 8001462:	d900      	bls.n	8001466 <LCD_Print_In_Separately_Line+0x6>
 8001464:	4770      	bx	lr
{
 8001466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (lineNumber >= COUNT_OF_LINES || LCDService.communicationStatus != COMMUNICATION_OK_STATUS)
 8001468:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <LCD_Print_In_Separately_Line+0x148>)
 800146a:	7b1b      	ldrb	r3, [r3, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d142      	bne.n	80014f6 <LCD_Print_In_Separately_Line+0x96>
 8001470:	460c      	mov	r4, r1
 8001472:	4605      	mov	r5, r0
	if (LCDService.displayMode != TWO_LINES_SEPARATELY_MODE)
 8001474:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <LCD_Print_In_Separately_Line+0x148>)
 8001476:	7c1b      	ldrb	r3, [r3, #16]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d13d      	bne.n	80014f8 <LCD_Print_In_Separately_Line+0x98>
	Set_Blank_Line(lineNumber);
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff ff85 	bl	800138c <Set_Blank_Line>
	LCD_Send_Cmd(RETURN_HOME_CMD);
 8001482:	2002      	movs	r0, #2
 8001484:	f7ff fedc 	bl	8001240 <LCD_Send_Cmd>
	if (lineNumber == 1)
 8001488:	2c01      	cmp	r4, #1
 800148a:	d046      	beq.n	800151a <LCD_Print_In_Separately_Line+0xba>
	if (!lineNumber)
 800148c:	2c00      	cmp	r4, #0
 800148e:	d153      	bne.n	8001538 <LCD_Print_In_Separately_Line+0xd8>
		if (strlen(textToPrint) > COUNT_OF_LETTERS_IN_ONE_LINE)
 8001490:	4628      	mov	r0, r5
 8001492:	f7fe fe5b 	bl	800014c <strlen>
 8001496:	2810      	cmp	r0, #16
 8001498:	d948      	bls.n	800152c <LCD_Print_In_Separately_Line+0xcc>
			if (strlen(textToPrint) > ONE_LINE_MAX_LENGTH)
 800149a:	2820      	cmp	r0, #32
 800149c:	d941      	bls.n	8001522 <LCD_Print_In_Separately_Line+0xc2>
				memcpy(LCDService.firstLineString, textToPrint,
 800149e:	4a42      	ldr	r2, [pc, #264]	; (80015a8 <LCD_Print_In_Separately_Line+0x148>)
 80014a0:	682e      	ldr	r6, [r5, #0]
 80014a2:	686c      	ldr	r4, [r5, #4]
 80014a4:	68a8      	ldr	r0, [r5, #8]
 80014a6:	68e9      	ldr	r1, [r5, #12]
 80014a8:	f8c2 601b 	str.w	r6, [r2, #27]
 80014ac:	f8c2 401f 	str.w	r4, [r2, #31]
 80014b0:	f8c2 0023 	str.w	r0, [r2, #35]	; 0x23
 80014b4:	f8c2 1027 	str.w	r1, [r2, #39]	; 0x27
 80014b8:	692e      	ldr	r6, [r5, #16]
 80014ba:	696c      	ldr	r4, [r5, #20]
 80014bc:	69a8      	ldr	r0, [r5, #24]
 80014be:	69e9      	ldr	r1, [r5, #28]
 80014c0:	f8c2 602b 	str.w	r6, [r2, #43]	; 0x2b
 80014c4:	f8c2 402f 	str.w	r4, [r2, #47]	; 0x2f
 80014c8:	f8c2 0033 	str.w	r0, [r2, #51]	; 0x33
 80014cc:	f8c2 1037 	str.w	r1, [r2, #55]	; 0x37
				LCDService.firstLineString[ONE_LINE_MAX_LENGTH - 1] = '\0';
 80014d0:	2300      	movs	r3, #0
 80014d2:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
			LCDService.firstLinePrintPosition = 0;
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <LCD_Print_In_Separately_Line+0x148>)
 80014d8:	2200      	movs	r2, #0
 80014da:	761a      	strb	r2, [r3, #24]
	if (strlen(textToPrint) >= COUNT_OF_LETTERS_IN_ONE_LINE)
 80014dc:	4628      	mov	r0, r5
 80014de:	f7fe fe35 	bl	800014c <strlen>
 80014e2:	280f      	cmp	r0, #15
 80014e4:	d95b      	bls.n	800159e <LCD_Print_In_Separately_Line+0x13e>
		LCD_Send_String_2(textToPrint, COUNT_OF_LETTERS_IN_ONE_LINE);
 80014e6:	2110      	movs	r1, #16
 80014e8:	4628      	mov	r0, r5
 80014ea:	f7ff ff41 	bl	8001370 <LCD_Send_String_2>
	LCDService.previousMilisecond = Get_Sys_Time();
 80014ee:	f000 fa21 	bl	8001934 <Get_Sys_Time>
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <LCD_Print_In_Separately_Line+0x148>)
 80014f4:	6158      	str	r0, [r3, #20]
}
 80014f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LCDService.displayMode = TWO_LINES_SEPARATELY_MODE;
 80014f8:	4e2b      	ldr	r6, [pc, #172]	; (80015a8 <LCD_Print_In_Separately_Line+0x148>)
 80014fa:	2302      	movs	r3, #2
 80014fc:	7433      	strb	r3, [r6, #16]
		memset(LCDService.firstLineString, 0, sizeof(LCDService.firstLineString));
 80014fe:	2720      	movs	r7, #32
 8001500:	463a      	mov	r2, r7
 8001502:	2100      	movs	r1, #0
 8001504:	f106 001b 	add.w	r0, r6, #27
 8001508:	f002 fbb8 	bl	8003c7c <memset>
		memset(LCDService.secondLineString, 0, sizeof(LCDService.secondLineString));
 800150c:	463a      	mov	r2, r7
 800150e:	2100      	movs	r1, #0
 8001510:	f106 003b 	add.w	r0, r6, #59	; 0x3b
 8001514:	f002 fbb2 	bl	8003c7c <memset>
 8001518:	e7b0      	b.n	800147c <LCD_Print_In_Separately_Line+0x1c>
		LCD_Send_Cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 800151a:	20c0      	movs	r0, #192	; 0xc0
 800151c:	f7ff fe90 	bl	8001240 <LCD_Send_Cmd>
 8001520:	e7b4      	b.n	800148c <LCD_Print_In_Separately_Line+0x2c>
				strcpy(LCDService.firstLineString, textToPrint);
 8001522:	4629      	mov	r1, r5
 8001524:	4821      	ldr	r0, [pc, #132]	; (80015ac <LCD_Print_In_Separately_Line+0x14c>)
 8001526:	f002 fbfd 	bl	8003d24 <strcpy>
 800152a:	e7d4      	b.n	80014d6 <LCD_Print_In_Separately_Line+0x76>
			memset(LCDService.firstLineString, 0, sizeof(LCDService.firstLineString));
 800152c:	2220      	movs	r2, #32
 800152e:	2100      	movs	r1, #0
 8001530:	481e      	ldr	r0, [pc, #120]	; (80015ac <LCD_Print_In_Separately_Line+0x14c>)
 8001532:	f002 fba3 	bl	8003c7c <memset>
 8001536:	e7d1      	b.n	80014dc <LCD_Print_In_Separately_Line+0x7c>
		if (strlen(textToPrint) > COUNT_OF_LETTERS_IN_ONE_LINE)
 8001538:	4628      	mov	r0, r5
 800153a:	f7fe fe07 	bl	800014c <strlen>
 800153e:	2810      	cmp	r0, #16
 8001540:	d927      	bls.n	8001592 <LCD_Print_In_Separately_Line+0x132>
			if (strlen(textToPrint) > ONE_LINE_MAX_LENGTH)
 8001542:	2820      	cmp	r0, #32
 8001544:	d920      	bls.n	8001588 <LCD_Print_In_Separately_Line+0x128>
				memcpy(LCDService.secondLineString, textToPrint,
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <LCD_Print_In_Separately_Line+0x148>)
 8001548:	682e      	ldr	r6, [r5, #0]
 800154a:	686c      	ldr	r4, [r5, #4]
 800154c:	68a8      	ldr	r0, [r5, #8]
 800154e:	68e9      	ldr	r1, [r5, #12]
 8001550:	f8c2 603b 	str.w	r6, [r2, #59]	; 0x3b
 8001554:	f8c2 403f 	str.w	r4, [r2, #63]	; 0x3f
 8001558:	f8c2 0043 	str.w	r0, [r2, #67]	; 0x43
 800155c:	f8c2 1047 	str.w	r1, [r2, #71]	; 0x47
 8001560:	692e      	ldr	r6, [r5, #16]
 8001562:	696c      	ldr	r4, [r5, #20]
 8001564:	69a8      	ldr	r0, [r5, #24]
 8001566:	69e9      	ldr	r1, [r5, #28]
 8001568:	f8c2 604b 	str.w	r6, [r2, #75]	; 0x4b
 800156c:	f8c2 404f 	str.w	r4, [r2, #79]	; 0x4f
 8001570:	f8c2 0053 	str.w	r0, [r2, #83]	; 0x53
 8001574:	f8c2 1057 	str.w	r1, [r2, #87]	; 0x57
				LCDService.secondLineString[ONE_LINE_MAX_LENGTH - 1] = '\0';
 8001578:	2300      	movs	r3, #0
 800157a:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
			LCDService.firstLinePrintPosition = 0;
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <LCD_Print_In_Separately_Line+0x148>)
 8001580:	2200      	movs	r2, #0
 8001582:	761a      	strb	r2, [r3, #24]
			LCDService.secondLinePrintPosition = 0;
 8001584:	765a      	strb	r2, [r3, #25]
 8001586:	e7a9      	b.n	80014dc <LCD_Print_In_Separately_Line+0x7c>
				strcpy(LCDService.secondLineString, textToPrint);
 8001588:	4629      	mov	r1, r5
 800158a:	4809      	ldr	r0, [pc, #36]	; (80015b0 <LCD_Print_In_Separately_Line+0x150>)
 800158c:	f002 fbca 	bl	8003d24 <strcpy>
 8001590:	e7f5      	b.n	800157e <LCD_Print_In_Separately_Line+0x11e>
			memset(LCDService.secondLineString, 0, sizeof(LCDService.secondLineString));
 8001592:	2220      	movs	r2, #32
 8001594:	2100      	movs	r1, #0
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <LCD_Print_In_Separately_Line+0x150>)
 8001598:	f002 fb70 	bl	8003c7c <memset>
 800159c:	e79e      	b.n	80014dc <LCD_Print_In_Separately_Line+0x7c>
		LCD_Send_String(textToPrint);
 800159e:	4628      	mov	r0, r5
 80015a0:	f7ff fea2 	bl	80012e8 <LCD_Send_String>
 80015a4:	e7a3      	b.n	80014ee <LCD_Print_In_Separately_Line+0x8e>
 80015a6:	bf00      	nop
 80015a8:	200000e4 	.word	0x200000e4
 80015ac:	200000ff 	.word	0x200000ff
 80015b0:	2000011f 	.word	0x2000011f

080015b4 <LCD_Clear>:
{
 80015b4:	b508      	push	{r3, lr}
	if (LCDService.communicationStatus == COMMUNICATION_OK_STATUS)
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <LCD_Clear+0x14>)
 80015b8:	7b1b      	ldrb	r3, [r3, #12]
 80015ba:	b103      	cbz	r3, 80015be <LCD_Clear+0xa>
}
 80015bc:	bd08      	pop	{r3, pc}
		LCD_Send_Cmd(CLEAR_DISPLAY_CMD);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fe3e 	bl	8001240 <LCD_Send_Cmd>
}
 80015c4:	e7fa      	b.n	80015bc <LCD_Clear+0x8>
 80015c6:	bf00      	nop
 80015c8:	200000e4 	.word	0x200000e4

080015cc <Communication_Init>:
{
 80015cc:	b510      	push	{r4, lr}
	LCDService.Delay(100);	// wait for >40ms
 80015ce:	4c20      	ldr	r4, [pc, #128]	; (8001650 <Communication_Init+0x84>)
 80015d0:	6863      	ldr	r3, [r4, #4]
 80015d2:	2064      	movs	r0, #100	; 0x64
 80015d4:	4798      	blx	r3
	LCD_Send_Cmd(INIT_CMD);
 80015d6:	2030      	movs	r0, #48	; 0x30
 80015d8:	f7ff fe32 	bl	8001240 <LCD_Send_Cmd>
	LCDService.Delay(10);	// wait for >4.1ms
 80015dc:	6863      	ldr	r3, [r4, #4]
 80015de:	200a      	movs	r0, #10
 80015e0:	4798      	blx	r3
	LCD_Send_Cmd(INIT_CMD);
 80015e2:	2030      	movs	r0, #48	; 0x30
 80015e4:	f7ff fe2c 	bl	8001240 <LCD_Send_Cmd>
	LCDService.Delay(1);	// wait for >100us
 80015e8:	6863      	ldr	r3, [r4, #4]
 80015ea:	2001      	movs	r0, #1
 80015ec:	4798      	blx	r3
	LCD_Send_Cmd(INIT_CMD);
 80015ee:	2030      	movs	r0, #48	; 0x30
 80015f0:	f7ff fe26 	bl	8001240 <LCD_Send_Cmd>
	LCDService.Delay(50);
 80015f4:	6863      	ldr	r3, [r4, #4]
 80015f6:	2032      	movs	r0, #50	; 0x32
 80015f8:	4798      	blx	r3
	LCD_Send_Cmd(FUNCTION_SET_CMD);	// 4bit mode
 80015fa:	2020      	movs	r0, #32
 80015fc:	f7ff fe20 	bl	8001240 <LCD_Send_Cmd>
	LCDService.Delay(50);
 8001600:	6863      	ldr	r3, [r4, #4]
 8001602:	2032      	movs	r0, #50	; 0x32
 8001604:	4798      	blx	r3
	LCD_Send_Cmd(FUNCTION_SET_CMD | TWO_LINE_DISPLAY_MODE);	// Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001606:	2028      	movs	r0, #40	; 0x28
 8001608:	f7ff fe1a 	bl	8001240 <LCD_Send_Cmd>
	LCDService.Delay(10);
 800160c:	6863      	ldr	r3, [r4, #4]
 800160e:	200a      	movs	r0, #10
 8001610:	4798      	blx	r3
	LCD_Send_Cmd(DISPLAY_ON_OFF_CMD);	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8001612:	2008      	movs	r0, #8
 8001614:	f7ff fe14 	bl	8001240 <LCD_Send_Cmd>
	LCDService.Delay(10);
 8001618:	6863      	ldr	r3, [r4, #4]
 800161a:	200a      	movs	r0, #10
 800161c:	4798      	blx	r3
	LCD_Send_Cmd(CLEAR_DISPLAY_CMD);	// clear display
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fe0e 	bl	8001240 <LCD_Send_Cmd>
	LCDService.Delay(10);
 8001624:	6863      	ldr	r3, [r4, #4]
 8001626:	200a      	movs	r0, #10
 8001628:	4798      	blx	r3
	LCD_Send_Cmd(ENTRY_MODE_CMD | INCREMENT_DDRAM_ADDRESS);	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800162a:	2006      	movs	r0, #6
 800162c:	f7ff fe08 	bl	8001240 <LCD_Send_Cmd>
	LCDService.Delay(10);
 8001630:	6863      	ldr	r3, [r4, #4]
 8001632:	200a      	movs	r0, #10
 8001634:	4798      	blx	r3
	LCD_Send_Cmd(DISPLAY_ON_OFF_CMD | DISPLAY_ON_BIT);	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001636:	200c      	movs	r0, #12
 8001638:	f7ff fe02 	bl	8001240 <LCD_Send_Cmd>
	LCDService.Delay(10);
 800163c:	6863      	ldr	r3, [r4, #4]
 800163e:	200a      	movs	r0, #10
 8001640:	4798      	blx	r3
	LCD_Clear();
 8001642:	f7ff ffb7 	bl	80015b4 <LCD_Clear>
	LCDService.Delay(100);
 8001646:	6863      	ldr	r3, [r4, #4]
 8001648:	2064      	movs	r0, #100	; 0x64
 800164a:	4798      	blx	r3
}
 800164c:	bd10      	pop	{r4, pc}
 800164e:	bf00      	nop
 8001650:	200000e4 	.word	0x200000e4

08001654 <LCD_I2C_Init>:
{
 8001654:	b508      	push	{r3, lr}
	LCDService.Delay = Delay;
 8001656:	4b03      	ldr	r3, [pc, #12]	; (8001664 <LCD_I2C_Init+0x10>)
 8001658:	6059      	str	r1, [r3, #4]
	LCDService.Transmit_For_LCD = Transmit_For_LCD;
 800165a:	6018      	str	r0, [r3, #0]
	LCDService.I2C_For_LCD_Reinit = I2C_For_LCD_Reinit;
 800165c:	609a      	str	r2, [r3, #8]
	Communication_Init();
 800165e:	f7ff ffb5 	bl	80015cc <Communication_Init>
}
 8001662:	bd08      	pop	{r3, pc}
 8001664:	200000e4 	.word	0x200000e4

08001668 <Multi_Line_Service>:
static void Multi_Line_Service(uint8_t ignoreTime)
{
	uint8_t secondLine = 0, charCounter = 0;
	if (LCDService.shiftTime == 0 || LCDService.multilineString == NULL)
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <Multi_Line_Service+0xc0>)
 800166a:	89db      	ldrh	r3, [r3, #14]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d059      	beq.n	8001724 <Multi_Line_Service+0xbc>
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <Multi_Line_Service+0xc0>)
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d055      	beq.n	8001724 <Multi_Line_Service+0xbc>
{
 8001678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800167c:	4604      	mov	r4, r0
	{
		return;
	}
	if (Get_Sys_Time() - LCDService.previousMilisecond >= LCDService.shiftTime || ignoreTime)
 800167e:	f000 f959 	bl	8001934 <Get_Sys_Time>
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <Multi_Line_Service+0xc0>)
 8001684:	6953      	ldr	r3, [r2, #20]
 8001686:	1ac0      	subs	r0, r0, r3
 8001688:	89d3      	ldrh	r3, [r2, #14]
 800168a:	4298      	cmp	r0, r3
 800168c:	d201      	bcs.n	8001692 <Multi_Line_Service+0x2a>
 800168e:	2c00      	cmp	r4, #0
 8001690:	d046      	beq.n	8001720 <Multi_Line_Service+0xb8>
	{
		LCDService.previousMilisecond = Get_Sys_Time();
 8001692:	f000 f94f 	bl	8001934 <Get_Sys_Time>
 8001696:	4c24      	ldr	r4, [pc, #144]	; (8001728 <Multi_Line_Service+0xc0>)
 8001698:	6160      	str	r0, [r4, #20]
		LCD_Clear();
 800169a:	f7ff ff8b 	bl	80015b4 <LCD_Clear>
		for (uint8_t i = LCDService.multilinePrintPosition; i < strlen(LCDService.multilineString); i++)
 800169e:	7ea4      	ldrb	r4, [r4, #26]
	uint8_t secondLine = 0, charCounter = 0;
 80016a0:	2500      	movs	r5, #0
 80016a2:	462e      	mov	r6, r5
		for (uint8_t i = LCDService.multilinePrintPosition; i < strlen(LCDService.multilineString); i++)
 80016a4:	e011      	b.n	80016ca <Multi_Line_Service+0x62>
		{
			if (!secondLine) //zapisujemy pozycję, od której zaczniemy drukowanie po upływie czasu wypisania kolejnej linii
			{
				LCDService.multilinePrintPosition = i + 1;
			}
			if (LCDService.multilineString[i] == '\n')
 80016a6:	f817 3008 	ldrb.w	r3, [r7, r8]
 80016aa:	2b0a      	cmp	r3, #10
 80016ac:	d01b      	beq.n	80016e6 <Multi_Line_Service+0x7e>
				if (!secondLine)
					LCD_Send_Cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
				secondLine++;
				continue;
			}
			else if (charCounter == COUNT_OF_LETTERS_IN_ONE_LINE)
 80016ae:	2d10      	cmp	r5, #16
 80016b0:	d022      	beq.n	80016f8 <Multi_Line_Service+0x90>
				charCounter = 0;
				if (!secondLine)
					LCD_Send_Cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
				secondLine++;
			}
			if (secondLine >= 2)
 80016b2:	2e01      	cmp	r6, #1
 80016b4:	d829      	bhi.n	800170a <Multi_Line_Service+0xa2>
				break;
			LCD_Send_Data(LCDService.multilineString[i]);
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <Multi_Line_Service+0xc0>)
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	f813 0008 	ldrb.w	r0, [r3, r8]
 80016be:	f7ff fdef 	bl	80012a0 <LCD_Send_Data>
			charCounter++;
 80016c2:	3501      	adds	r5, #1
 80016c4:	b2ed      	uxtb	r5, r5
		for (uint8_t i = LCDService.multilinePrintPosition; i < strlen(LCDService.multilineString); i++)
 80016c6:	3401      	adds	r4, #1
 80016c8:	b2e4      	uxtb	r4, r4
 80016ca:	46a0      	mov	r8, r4
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <Multi_Line_Service+0xc0>)
 80016ce:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80016d0:	4638      	mov	r0, r7
 80016d2:	f7fe fd3b 	bl	800014c <strlen>
 80016d6:	4284      	cmp	r4, r0
 80016d8:	d217      	bcs.n	800170a <Multi_Line_Service+0xa2>
			if (!secondLine) //zapisujemy pozycję, od której zaczniemy drukowanie po upływie czasu wypisania kolejnej linii
 80016da:	2e00      	cmp	r6, #0
 80016dc:	d1e3      	bne.n	80016a6 <Multi_Line_Service+0x3e>
				LCDService.multilinePrintPosition = i + 1;
 80016de:	1c63      	adds	r3, r4, #1
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <Multi_Line_Service+0xc0>)
 80016e2:	7693      	strb	r3, [r2, #26]
 80016e4:	e7df      	b.n	80016a6 <Multi_Line_Service+0x3e>
				if (!secondLine)
 80016e6:	b11e      	cbz	r6, 80016f0 <Multi_Line_Service+0x88>
				secondLine++;
 80016e8:	3601      	adds	r6, #1
 80016ea:	b2f6      	uxtb	r6, r6
				charCounter = 0;
 80016ec:	2500      	movs	r5, #0
				continue;
 80016ee:	e7ea      	b.n	80016c6 <Multi_Line_Service+0x5e>
					LCD_Send_Cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 80016f0:	20c0      	movs	r0, #192	; 0xc0
 80016f2:	f7ff fda5 	bl	8001240 <LCD_Send_Cmd>
 80016f6:	e7f7      	b.n	80016e8 <Multi_Line_Service+0x80>
				if (!secondLine)
 80016f8:	b11e      	cbz	r6, 8001702 <Multi_Line_Service+0x9a>
				secondLine++;
 80016fa:	3601      	adds	r6, #1
 80016fc:	b2f6      	uxtb	r6, r6
				charCounter = 0;
 80016fe:	2500      	movs	r5, #0
 8001700:	e7d7      	b.n	80016b2 <Multi_Line_Service+0x4a>
					LCD_Send_Cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 8001702:	20c0      	movs	r0, #192	; 0xc0
 8001704:	f7ff fd9c 	bl	8001240 <LCD_Send_Cmd>
 8001708:	e7f7      	b.n	80016fa <Multi_Line_Service+0x92>
		}
		if (LCDService.multilinePrintPosition + charCounter >= strlen(LCDService.multilineString))
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <Multi_Line_Service+0xc0>)
 800170c:	7e9a      	ldrb	r2, [r3, #26]
 800170e:	4415      	add	r5, r2
 8001710:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001712:	f7fe fd1b 	bl	800014c <strlen>
 8001716:	4285      	cmp	r5, r0
 8001718:	d302      	bcc.n	8001720 <Multi_Line_Service+0xb8>
		{
			LCDService.multilinePrintPosition = 0;
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <Multi_Line_Service+0xc0>)
 800171c:	2200      	movs	r2, #0
 800171e:	769a      	strb	r2, [r3, #26]
		}
	}
}
 8001720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200000e4 	.word	0x200000e4

0800172c <LCD_Service>:
{
 800172c:	b570      	push	{r4, r5, r6, lr}
	if (LCDService.communicationStatus != COMMUNICATION_OK_STATUS)
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <LCD_Service+0x9c>)
 8001730:	7b1b      	ldrb	r3, [r3, #12]
 8001732:	b37b      	cbz	r3, 8001794 <LCD_Service+0x68>
		if (LCDService.displayMode != NONE_DISPLAY_MODE)
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <LCD_Service+0x9c>)
 8001736:	7c1b      	ldrb	r3, [r3, #16]
 8001738:	b963      	cbnz	r3, 8001754 <LCD_Service+0x28>
		if (Get_Sys_Time() - LCDService.previousMilisecond > REINIT_TIME_IN_MILIS)
 800173a:	f000 f8fb 	bl	8001934 <Get_Sys_Time>
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <LCD_Service+0x9c>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	1ac0      	subs	r0, r0, r3
 8001744:	f241 3388 	movw	r3, #5000	; 0x1388
 8001748:	4298      	cmp	r0, r3
 800174a:	d81a      	bhi.n	8001782 <LCD_Service+0x56>
		communicationErrorWasActive = 1;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <LCD_Service+0xa0>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
}
 8001752:	bd70      	pop	{r4, r5, r6, pc}
			LCDService.firstLinePrintPosition = 0;
 8001754:	4c1c      	ldr	r4, [pc, #112]	; (80017c8 <LCD_Service+0x9c>)
 8001756:	2500      	movs	r5, #0
 8001758:	7625      	strb	r5, [r4, #24]
			LCDService.secondLinePrintPosition = 0;
 800175a:	7665      	strb	r5, [r4, #25]
			LCDService.multilinePrintPosition = 0;
 800175c:	76a5      	strb	r5, [r4, #26]
			LCDService.displayMode = NONE_DISPLAY_MODE;
 800175e:	7425      	strb	r5, [r4, #16]
			memset(LCDService.firstLineString, 0, sizeof(LCDService.firstLineString));
 8001760:	2620      	movs	r6, #32
 8001762:	4632      	mov	r2, r6
 8001764:	4629      	mov	r1, r5
 8001766:	f104 001b 	add.w	r0, r4, #27
 800176a:	f002 fa87 	bl	8003c7c <memset>
			memset(LCDService.secondLineString, 0, sizeof(LCDService.secondLineString));
 800176e:	4632      	mov	r2, r6
 8001770:	4629      	mov	r1, r5
 8001772:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8001776:	f002 fa81 	bl	8003c7c <memset>
			free(LCDService.multilineString);
 800177a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800177c:	f002 fa76 	bl	8003c6c <free>
 8001780:	e7db      	b.n	800173a <LCD_Service+0xe>
			LCDService.previousMilisecond = Get_Sys_Time();
 8001782:	f000 f8d7 	bl	8001934 <Get_Sys_Time>
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <LCD_Service+0x9c>)
 8001788:	6158      	str	r0, [r3, #20]
			LCDService.I2C_For_LCD_Reinit();
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4798      	blx	r3
			Communication_Init();
 800178e:	f7ff ff1d 	bl	80015cc <Communication_Init>
 8001792:	e7db      	b.n	800174c <LCD_Service+0x20>
	else if (communicationErrorWasActive)
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <LCD_Service+0xa0>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b143      	cbz	r3, 80017ac <LCD_Service+0x80>
		communicationErrorWasActive = 0;
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <LCD_Service+0xa0>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
		LCDService.I2C_For_LCD_Reinit();
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <LCD_Service+0x9c>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4798      	blx	r3
		Communication_Init();
 80017a6:	f7ff ff11 	bl	80015cc <Communication_Init>
		return;
 80017aa:	e7d2      	b.n	8001752 <LCD_Service+0x26>
	if (LCDService.displayMode == TWO_LINES_SEPARATELY_MODE)
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <LCD_Service+0x9c>)
 80017ae:	7c1b      	ldrb	r3, [r3, #16]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d005      	beq.n	80017c0 <LCD_Service+0x94>
	else if (LCDService.displayMode == MULTILINE_MODE)
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d1cc      	bne.n	8001752 <LCD_Service+0x26>
		Multi_Line_Service(0);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff ff55 	bl	8001668 <Multi_Line_Service>
 80017be:	e7c8      	b.n	8001752 <LCD_Service+0x26>
		Two_Lines_Separately_Service();
 80017c0:	f7ff fdfa 	bl	80013b8 <Two_Lines_Separately_Service>
 80017c4:	e7c5      	b.n	8001752 <LCD_Service+0x26>
 80017c6:	bf00      	nop
 80017c8:	200000e4 	.word	0x200000e4
 80017cc:	200000a0 	.word	0x200000a0

080017d0 <Initialize>:
#include "DS18B20_One_Wire.h"
#include "main.h"
uint32_t time = 0;
uint16_t volatile adcValue = 0;
void Initialize(void)
{
 80017d0:	b500      	push	{lr}
 80017d2:	b083      	sub	sp, #12
	Hardware_Init();
 80017d4:	f7ff fc7e 	bl	80010d4 <Hardware_Init>
	LCD_I2C_Init(Transmit_For_LCD, Delay_In_Milis, I2C_Reinit_For_LCD);
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <Initialize+0x38>)
 80017da:	490c      	ldr	r1, [pc, #48]	; (800180c <Initialize+0x3c>)
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <Initialize+0x40>)
 80017de:	f7ff ff39 	bl	8001654 <LCD_I2C_Init>
	LCD_Set_Shifting_Time(2000);
 80017e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017e6:	f7ff fe35 	bl	8001454 <LCD_Set_Shifting_Time>
	DS18B20_Init(Set_Pin_Input, Set_Pin_Output, Delays_us, Write_Pin, Read_Pin, Get_Sys_Time);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <Initialize+0x44>)
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <Initialize+0x48>)
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <Initialize+0x4c>)
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <Initialize+0x50>)
 80017f6:	490b      	ldr	r1, [pc, #44]	; (8001824 <Initialize+0x54>)
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <Initialize+0x58>)
 80017fa:	f7ff fc15 	bl	8001028 <DS18B20_Init>
	LCD_Clear();
 80017fe:	f7ff fed9 	bl	80015b4 <LCD_Clear>
}
 8001802:	b003      	add	sp, #12
 8001804:	f85d fb04 	ldr.w	pc, [sp], #4
 8001808:	08001165 	.word	0x08001165
 800180c:	0800115d 	.word	0x0800115d
 8001810:	0800113d 	.word	0x0800113d
 8001814:	08001935 	.word	0x08001935
 8001818:	08001221 	.word	0x08001221
 800181c:	08001201 	.word	0x08001201
 8001820:	08001181 	.word	0x08001181
 8001824:	08001199 	.word	0x08001199
 8001828:	080011cd 	.word	0x080011cd

0800182c <Main_Loop>:

void Main_Loop(void)
{
 800182c:	b510      	push	{r4, lr}
	if(Get_Sys_Seconds() != time)
 800182e:	f000 f887 	bl	8001940 <Get_Sys_Seconds>
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <Main_Loop+0x3c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4298      	cmp	r0, r3
 8001838:	d00b      	beq.n	8001852 <Main_Loop+0x26>
	{
		if(tablicaADC[0])
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <Main_Loop+0x40>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b96b      	cbnz	r3, 800185c <Main_Loop+0x30>
			time = Get_Sys_Seconds();

		LCD_Print_In_Separately_Line("kupa",0);
 8001840:	4c0b      	ldr	r4, [pc, #44]	; (8001870 <Main_Loop+0x44>)
 8001842:	2100      	movs	r1, #0
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff fe0b 	bl	8001460 <LCD_Print_In_Separately_Line>
		LCD_Print_In_Separately_Line("kupa",1);
 800184a:	2101      	movs	r1, #1
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff fe07 	bl	8001460 <LCD_Print_In_Separately_Line>
	}
	DS18B20_Service();
 8001852:	f7ff fc03 	bl	800105c <DS18B20_Service>
	LCD_Service();
 8001856:	f7ff ff69 	bl	800172c <LCD_Service>
}
 800185a:	bd10      	pop	{r4, pc}
			time = Get_Sys_Seconds();
 800185c:	f000 f870 	bl	8001940 <Get_Sys_Seconds>
 8001860:	4b01      	ldr	r3, [pc, #4]	; (8001868 <Main_Loop+0x3c>)
 8001862:	6018      	str	r0, [r3, #0]
 8001864:	e7ec      	b.n	8001840 <Main_Loop+0x14>
 8001866:	bf00      	nop
 8001868:	200000a4 	.word	0x200000a4
 800186c:	2000009c 	.word	0x2000009c
 8001870:	08003d68 	.word	0x08003d68

08001874 <Temperature_Service>:
{
	return 0; //todo zrobic usredniania z zapisem dla flash
}

void Temperature_Service(uint32_t adcValue)
{
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static float sumOfTemperatures = 0;
	temperatureService.samplesCounter++;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <Temperature_Service+0x60>)
 8001878:	88dc      	ldrh	r4, [r3, #6]
 800187a:	3401      	adds	r4, #1
 800187c:	b2a4      	uxth	r4, r4
 800187e:	80dc      	strh	r4, [r3, #6]
	sumOfTemperatures += (SUPPLY_VOLTAGE / ADC_RESOLUTION) * adcValue * 100.0;
 8001880:	f7ff f940 	bl	8000b04 <__aeabi_ui2f>
 8001884:	4914      	ldr	r1, [pc, #80]	; (80018d8 <Temperature_Service+0x64>)
 8001886:	f7ff f995 	bl	8000bb4 <__aeabi_fmul>
 800188a:	f7fe fdcb 	bl	8000424 <__aeabi_f2d>
 800188e:	2200      	movs	r2, #0
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <Temperature_Service+0x68>)
 8001892:	f7fe fe1f 	bl	80004d4 <__aeabi_dmul>
 8001896:	4606      	mov	r6, r0
 8001898:	460f      	mov	r7, r1
 800189a:	4d11      	ldr	r5, [pc, #68]	; (80018e0 <Temperature_Service+0x6c>)
 800189c:	6828      	ldr	r0, [r5, #0]
 800189e:	f7fe fdc1 	bl	8000424 <__aeabi_f2d>
 80018a2:	4632      	mov	r2, r6
 80018a4:	463b      	mov	r3, r7
 80018a6:	f7fe fc5f 	bl	8000168 <__adddf3>
 80018aa:	f7ff f825 	bl	80008f8 <__aeabi_d2f>
 80018ae:	6028      	str	r0, [r5, #0]

	if(temperatureService.samplesCounter == COUNT_OF_SAMPLES)
 80018b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b4:	429c      	cmp	r4, r3
 80018b6:	d000      	beq.n	80018ba <Temperature_Service+0x46>
		temperatureService.samplesCounter = 0;
		temperatureService.temperature = sumOfTemperatures/COUNT_OF_SAMPLES;
		temperatureService.valueReadedCorrectly = 1;
		sumOfTemperatures = 0;
	}
}
 80018b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temperatureService.samplesCounter = 0;
 80018ba:	4c06      	ldr	r4, [pc, #24]	; (80018d4 <Temperature_Service+0x60>)
 80018bc:	2300      	movs	r3, #0
 80018be:	80e3      	strh	r3, [r4, #6]
		temperatureService.temperature = sumOfTemperatures/COUNT_OF_SAMPLES;
 80018c0:	4908      	ldr	r1, [pc, #32]	; (80018e4 <Temperature_Service+0x70>)
 80018c2:	f7ff fa2b 	bl	8000d1c <__aeabi_fdiv>
 80018c6:	6020      	str	r0, [r4, #0]
		temperatureService.valueReadedCorrectly = 1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	7123      	strb	r3, [r4, #4]
		sumOfTemperatures = 0;
 80018cc:	2200      	movs	r2, #0
 80018ce:	602a      	str	r2, [r5, #0]
}
 80018d0:	e7f2      	b.n	80018b8 <Temperature_Service+0x44>
 80018d2:	bf00      	nop
 80018d4:	20000144 	.word	0x20000144
 80018d8:	3a534067 	.word	0x3a534067
 80018dc:	40590000 	.word	0x40590000
 80018e0:	200000a8 	.word	0x200000a8
 80018e4:	477fff00 	.word	0x477fff00

080018e8 <Time_Service>:
#define INTERUPT_TIME_IN_MILIS 10
timer_struct timerService;

void Time_Service(void)
{
	timerService.miliseconds+=INTERUPT_TIME_IN_MILIS;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <Time_Service+0x40>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	320a      	adds	r2, #10
 80018ee:	601a      	str	r2, [r3, #0]
	if(timerService.miliseconds % 1000 == 0)
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <Time_Service+0x44>)
 80018f2:	fba3 1302 	umull	r1, r3, r3, r2
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018fc:	fb01 2313 	mls	r3, r1, r3, r2
 8001900:	b983      	cbnz	r3, 8001924 <Time_Service+0x3c>
	{
		timerService.seconds++;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <Time_Service+0x40>)
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	3201      	adds	r2, #1
 8001908:	605a      	str	r2, [r3, #4]
		if(timerService.seconds %60==0)
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <Time_Service+0x48>)
 800190c:	fba3 1302 	umull	r1, r3, r3, r2
 8001910:	095b      	lsrs	r3, r3, #5
 8001912:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001916:	0099      	lsls	r1, r3, #2
 8001918:	428a      	cmp	r2, r1
 800191a:	d103      	bne.n	8001924 <Time_Service+0x3c>
		{
			timerService.minutes++;
 800191c:	4a02      	ldr	r2, [pc, #8]	; (8001928 <Time_Service+0x40>)
 800191e:	6893      	ldr	r3, [r2, #8]
 8001920:	3301      	adds	r3, #1
 8001922:	6093      	str	r3, [r2, #8]
		}
	}

}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000014c 	.word	0x2000014c
 800192c:	10624dd3 	.word	0x10624dd3
 8001930:	88888889 	.word	0x88888889

08001934 <Get_Sys_Time>:
uint32_t Get_Sys_Time(void)
{
	return timerService.miliseconds;
}
 8001934:	4b01      	ldr	r3, [pc, #4]	; (800193c <Get_Sys_Time+0x8>)
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	2000014c 	.word	0x2000014c

08001940 <Get_Sys_Seconds>:
uint32_t Get_Sys_Seconds(void)
{
	return timerService.seconds;
}
 8001940:	4b01      	ldr	r3, [pc, #4]	; (8001948 <Get_Sys_Seconds+0x8>)
 8001942:	6858      	ldr	r0, [r3, #4]
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	2000014c 	.word	0x2000014c

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001950:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	2400      	movs	r4, #0
 8001954:	9404      	str	r4, [sp, #16]
 8001956:	9405      	str	r4, [sp, #20]
 8001958:	9406      	str	r4, [sp, #24]
 800195a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <MX_GPIO_Init+0xec>)
 800195e:	699a      	ldr	r2, [r3, #24]
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	619a      	str	r2, [r3, #24]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	f002 0220 	and.w	r2, r2, #32
 800196c:	9200      	str	r2, [sp, #0]
 800196e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	f042 0210 	orr.w	r2, r2, #16
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	f002 0210 	and.w	r2, r2, #16
 800197e:	9201      	str	r2, [sp, #4]
 8001980:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	699a      	ldr	r2, [r3, #24]
 8001984:	f042 0204 	orr.w	r2, r2, #4
 8001988:	619a      	str	r2, [r3, #24]
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	f002 0204 	and.w	r2, r2, #4
 8001990:	9202      	str	r2, [sp, #8]
 8001992:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	f042 0208 	orr.w	r2, r2, #8
 800199a:	619a      	str	r2, [r3, #24]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	9303      	str	r3, [sp, #12]
 80019a4:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18b20_GPIO_Port, DS18b20_Pin, GPIO_PIN_RESET);
 80019a6:	4f25      	ldr	r7, [pc, #148]	; (8001a3c <MX_GPIO_Init+0xf0>)
 80019a8:	4622      	mov	r2, r4
 80019aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ae:	4638      	mov	r0, r7
 80019b0:	f001 f84d 	bl	8002a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80019b4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8001a48 <MX_GPIO_Init+0xfc>
 80019b8:	4622      	mov	r2, r4
 80019ba:	2104      	movs	r1, #4
 80019bc:	4648      	mov	r0, r9
 80019be:	f001 f846 	bl	8002a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRANSISTOR_BASE_GPIO_Port, TRANSISTOR_BASE_Pin, GPIO_PIN_RESET);
 80019c2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001a4c <MX_GPIO_Init+0x100>
 80019c6:	4622      	mov	r2, r4
 80019c8:	2120      	movs	r1, #32
 80019ca:	4640      	mov	r0, r8
 80019cc:	f001 f83f 	bl	8002a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : THIRD_BUTTON_Pin */
  GPIO_InitStruct.Pin = THIRD_BUTTON_Pin;
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d4:	4d1a      	ldr	r5, [pc, #104]	; (8001a40 <MX_GPIO_Init+0xf4>)
 80019d6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(THIRD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80019da:	a904      	add	r1, sp, #16
 80019dc:	4819      	ldr	r0, [pc, #100]	; (8001a44 <MX_GPIO_Init+0xf8>)
 80019de:	f000 fec7 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : FIRST_BUTTON_Pin SECOND_BUTTON_Pin */
  GPIO_InitStruct.Pin = FIRST_BUTTON_Pin|SECOND_BUTTON_Pin;
 80019e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	a904      	add	r1, sp, #16
 80019ee:	4638      	mov	r0, r7
 80019f0:	f000 febe 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18b20_Pin */
  GPIO_InitStruct.Pin = DS18b20_Pin;
 80019f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2601      	movs	r6, #1
 80019fc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2502      	movs	r5, #2
 8001a02:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DS18b20_GPIO_Port, &GPIO_InitStruct);
 8001a04:	a904      	add	r1, sp, #16
 8001a06:	4638      	mov	r0, r7
 8001a08:	f000 feb2 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001a16:	a904      	add	r1, sp, #16
 8001a18:	4648      	mov	r0, r9
 8001a1a:	f000 fea9 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRANSISTOR_BASE_Pin */
  GPIO_InitStruct.Pin = TRANSISTOR_BASE_Pin;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(TRANSISTOR_BASE_GPIO_Port, &GPIO_InitStruct);
 8001a28:	a904      	add	r1, sp, #16
 8001a2a:	4640      	mov	r0, r8
 8001a2c:	f000 fea0 	bl	8002770 <HAL_GPIO_Init>

}
 8001a30:	b009      	add	sp, #36	; 0x24
 8001a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	10110000 	.word	0x10110000
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40011400 	.word	0x40011400
 8001a4c:	40010c00 	.word	0x40010c00

08001a50 <MX_DMA_Init>:
{
 8001a50:	b500      	push	{lr}
 8001a52:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_DMA_Init+0x30>)
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	200b      	movs	r0, #11
 8001a6e:	f000 fcff 	bl	8002470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a72:	200b      	movs	r0, #11
 8001a74:	f000 fd30 	bl	80024d8 <HAL_NVIC_EnableIRQ>
}
 8001a78:	b003      	add	sp, #12
 8001a7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000

08001a84 <MX_TIM3_Init>:
{
 8001a84:	b530      	push	{r4, r5, lr}
 8001a86:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a88:	2400      	movs	r4, #0
 8001a8a:	9402      	str	r4, [sp, #8]
 8001a8c:	9403      	str	r4, [sp, #12]
 8001a8e:	9404      	str	r4, [sp, #16]
 8001a90:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a92:	9400      	str	r4, [sp, #0]
 8001a94:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 8001a96:	4d0f      	ldr	r5, [pc, #60]	; (8001ad4 <MX_TIM3_Init+0x50>)
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_TIM3_Init+0x54>)
 8001a9a:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 71;
 8001a9c:	2347      	movs	r3, #71	; 0x47
 8001a9e:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 999;
 8001aa2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001aa6:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa8:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f001 ffde 	bl	8003a70 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aba:	a902      	add	r1, sp, #8
 8001abc:	4628      	mov	r0, r5
 8001abe:	f002 f80d 	bl	8003adc <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac2:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac6:	4669      	mov	r1, sp
 8001ac8:	4628      	mov	r0, r5
 8001aca:	f002 f875 	bl	8003bb8 <HAL_TIMEx_MasterConfigSynchronization>
}
 8001ace:	b007      	add	sp, #28
 8001ad0:	bd30      	pop	{r4, r5, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001ac 	.word	0x200001ac
 8001ad8:	40000400 	.word	0x40000400

08001adc <MX_TIM2_Init>:
{
 8001adc:	b530      	push	{r4, r5, lr}
 8001ade:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae0:	2500      	movs	r5, #0
 8001ae2:	9502      	str	r5, [sp, #8]
 8001ae4:	9503      	str	r5, [sp, #12]
 8001ae6:	9504      	str	r5, [sp, #16]
 8001ae8:	9505      	str	r5, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aea:	9500      	str	r5, [sp, #0]
 8001aec:	9501      	str	r5, [sp, #4]
  htim2.Instance = TIM2;
 8001aee:	4c11      	ldr	r4, [pc, #68]	; (8001b34 <MX_TIM2_Init+0x58>)
 8001af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af4:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 71;
 8001af6:	2347      	movs	r3, #71	; 0x47
 8001af8:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 65535;
 8001afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b00:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f001 ffb1 	bl	8003a70 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b14:	a902      	add	r1, sp, #8
 8001b16:	4620      	mov	r0, r4
 8001b18:	f001 ffe0 	bl	8003adc <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1c:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1e:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b20:	4669      	mov	r1, sp
 8001b22:	4620      	mov	r0, r4
 8001b24:	f002 f848 	bl	8003bb8 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim2);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f001 fe71 	bl	8003810 <HAL_TIM_Base_Start_IT>
}
 8001b2e:	b007      	add	sp, #28
 8001b30:	bd30      	pop	{r4, r5, pc}
 8001b32:	bf00      	nop
 8001b34:	20000268 	.word	0x20000268

08001b38 <MX_I2C1_Init>:
{
 8001b38:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <MX_I2C1_Init+0x28>)
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_I2C1_Init+0x2c>)
 8001b3e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_I2C1_Init+0x30>)
 8001b42:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b44:	2300      	movs	r3, #0
 8001b46:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b48:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b52:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b54:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b56:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b58:	f001 f8d4 	bl	8002d04 <HAL_I2C_Init>
}
 8001b5c:	bd08      	pop	{r3, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000158 	.word	0x20000158
 8001b64:	40005400 	.word	0x40005400
 8001b68:	000186a0 	.word	0x000186a0

08001b6c <MX_ADC1_Init>:
{
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b70:	2300      	movs	r3, #0
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8001b78:	4c11      	ldr	r4, [pc, #68]	; (8001bc0 <MX_ADC1_Init+0x54>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <MX_ADC1_Init+0x58>)
 8001b7c:	6022      	str	r2, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b82:	60a2      	str	r2, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b84:	2601      	movs	r6, #1
 8001b86:	7326      	strb	r6, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b88:	7523      	strb	r3, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b8a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b8e:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b90:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001b92:	2502      	movs	r5, #2
 8001b94:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b96:	4620      	mov	r0, r4
 8001b98:	f000 fbd0 	bl	800233c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_14;
 8001b9c:	230e      	movs	r3, #14
 8001b9e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ba0:	9602      	str	r6, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba6:	a901      	add	r1, sp, #4
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f000 fa2d 	bl	8002008 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001bae:	2310      	movs	r3, #16
 8001bb0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001bb2:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb4:	a901      	add	r1, sp, #4
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f000 fa26 	bl	8002008 <HAL_ADC_ConfigChannel>
}
 8001bbc:	b004      	add	sp, #16
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
 8001bc0:	200001f4 	.word	0x200001f4
 8001bc4:	40012400 	.word	0x40012400

08001bc8 <SystemClock_Config>:
{
 8001bc8:	b530      	push	{r4, r5, lr}
 8001bca:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bcc:	2400      	movs	r4, #0
 8001bce:	940c      	str	r4, [sp, #48]	; 0x30
 8001bd0:	940d      	str	r4, [sp, #52]	; 0x34
 8001bd2:	940f      	str	r4, [sp, #60]	; 0x3c
 8001bd4:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd6:	9405      	str	r4, [sp, #20]
 8001bd8:	9406      	str	r4, [sp, #24]
 8001bda:	9407      	str	r4, [sp, #28]
 8001bdc:	9408      	str	r4, [sp, #32]
 8001bde:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be0:	9401      	str	r4, [sp, #4]
 8001be2:	9402      	str	r4, [sp, #8]
 8001be4:	9403      	str	r4, [sp, #12]
 8001be6:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be8:	2201      	movs	r2, #1
 8001bea:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf4:	2502      	movs	r5, #2
 8001bf6:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bf8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bfa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bfe:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	a80a      	add	r0, sp, #40	; 0x28
 8001c02:	f001 fa43 	bl	800308c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c06:	230f      	movs	r3, #15
 8001c08:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0a:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0c:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c12:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c14:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c16:	4629      	mov	r1, r5
 8001c18:	a805      	add	r0, sp, #20
 8001c1a:	f001 fc77 	bl	800350c <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c1e:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c24:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c26:	a801      	add	r0, sp, #4
 8001c28:	f001 fd3a 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001c2c:	b015      	add	sp, #84	; 0x54
 8001c2e:	bd30      	pop	{r4, r5, pc}

08001c30 <main>:
{
 8001c30:	b508      	push	{r3, lr}
  HAL_Init();
 8001c32:	f000 f971 	bl	8001f18 <HAL_Init>
  SystemClock_Config();
 8001c36:	f7ff ffc7 	bl	8001bc8 <SystemClock_Config>
  MX_GPIO_Init();
 8001c3a:	f7ff fe87 	bl	800194c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c3e:	f7ff ff07 	bl	8001a50 <MX_DMA_Init>
  MX_TIM2_Init();
 8001c42:	f7ff ff4b 	bl	8001adc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c46:	f7ff ff1d 	bl	8001a84 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001c4a:	f7ff ff75 	bl	8001b38 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001c4e:	f7ff ff8d 	bl	8001b6c <MX_ADC1_Init>
  Initialize();
 8001c52:	f7ff fdbd 	bl	80017d0 <Initialize>
	  Main_Loop();
 8001c56:	f7ff fde9 	bl	800182c <Main_Loop>
 8001c5a:	e7fc      	b.n	8001c56 <main+0x26>

08001c5c <HAL_TIM_PeriodElapsedCallback>:
{
	GPIOs_Callback_Service(GPIO_Pin);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b508      	push	{r3, lr}
	Timers_Callback_Service(htim);
 8001c5e:	f7ff fa61 	bl	8001124 <Timers_Callback_Service>
}
 8001c62:	bd08      	pop	{r3, pc}

08001c64 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c64:	b508      	push	{r3, lr}
	Temperature_Service(HAL_ADC_GetValue(hadc));
 8001c66:	f000 f98f 	bl	8001f88 <HAL_ADC_GetValue>
 8001c6a:	f7ff fe03 	bl	8001874 <Temperature_Service>
}
 8001c6e:	bd08      	pop	{r3, pc}

08001c70 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_MspInit+0x3c>)
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	619a      	str	r2, [r3, #24]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	f002 0201 	and.w	r2, r2, #1
 8001c86:	9200      	str	r2, [sp, #0]
 8001c88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c90:	61da      	str	r2, [r3, #28]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001c9c:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <HAL_MspInit+0x40>)
 8001c9e:	6853      	ldr	r3, [r2, #4]
 8001ca0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001caa:	b002      	add	sp, #8
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000

08001cb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b510      	push	{r4, lr}
 8001cba:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	9303      	str	r3, [sp, #12]
 8001cc2:	9304      	str	r3, [sp, #16]
 8001cc4:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001cc6:	6802      	ldr	r2, [r0, #0]
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_ADC_MspInit+0x8c>)
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cce:	b006      	add	sp, #24
 8001cd0:	bd10      	pop	{r4, pc}
 8001cd2:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cd4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cde:	619a      	str	r2, [r3, #24]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001ce6:	9200      	str	r2, [sp, #0]
 8001ce8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	699a      	ldr	r2, [r3, #24]
 8001cec:	f042 0210 	orr.w	r2, r2, #16
 8001cf0:	619a      	str	r2, [r3, #24]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LM35_IN_Pin;
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d00:	2303      	movs	r3, #3
 8001d02:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8001d04:	a902      	add	r1, sp, #8
 8001d06:	4810      	ldr	r0, [pc, #64]	; (8001d48 <HAL_ADC_MspInit+0x90>)
 8001d08:	f000 fd32 	bl	8002770 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001d0c:	480f      	ldr	r0, [pc, #60]	; (8001d4c <HAL_ADC_MspInit+0x94>)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_ADC_MspInit+0x98>)
 8001d10:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d12:	2300      	movs	r3, #0
 8001d14:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d16:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d20:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d26:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d28:	2220      	movs	r2, #32
 8001d2a:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d2c:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d2e:	f000 fc0d 	bl	800254c <HAL_DMA_Init>
 8001d32:	b918      	cbnz	r0, 8001d3c <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_ADC_MspInit+0x94>)
 8001d36:	6223      	str	r3, [r4, #32]
 8001d38:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001d3a:	e7c8      	b.n	8001cce <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8001d3c:	f7ff ff98 	bl	8001c70 <Error_Handler>
 8001d40:	e7f8      	b.n	8001d34 <HAL_ADC_MspInit+0x7c>
 8001d42:	bf00      	nop
 8001d44:	40012400 	.word	0x40012400
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	20000224 	.word	0x20000224
 8001d50:	40020008 	.word	0x40020008

08001d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b510      	push	{r4, lr}
 8001d56:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	9303      	str	r3, [sp, #12]
 8001d5e:	9304      	str	r3, [sp, #16]
 8001d60:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8001d62:	6802      	ldr	r2, [r0, #0]
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_I2C_MspInit+0x58>)
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d6a:	b006      	add	sp, #24
 8001d6c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	4c10      	ldr	r4, [pc, #64]	; (8001db0 <HAL_I2C_MspInit+0x5c>)
 8001d70:	69a3      	ldr	r3, [r4, #24]
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	61a3      	str	r3, [r4, #24]
 8001d78:	69a3      	ldr	r3, [r4, #24]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d86:	2312      	movs	r3, #18
 8001d88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8e:	a902      	add	r1, sp, #8
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <HAL_I2C_MspInit+0x60>)
 8001d92:	f000 fced 	bl	8002770 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d96:	69e3      	ldr	r3, [r4, #28]
 8001d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d9c:	61e3      	str	r3, [r4, #28]
 8001d9e:	69e3      	ldr	r3, [r4, #28]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	9b01      	ldr	r3, [sp, #4]
}
 8001da8:	e7df      	b.n	8001d6a <HAL_I2C_MspInit+0x16>
 8001daa:	bf00      	nop
 8001dac:	40005400 	.word	0x40005400
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010c00 	.word	0x40010c00

08001db8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001db8:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8001dba:	6802      	ldr	r2, [r0, #0]
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_I2C_MspDeInit+0x20>)
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d000      	beq.n	8001dc4 <HAL_I2C_MspDeInit+0xc>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001dc2:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_I2C_MspDeInit+0x24>)
 8001dc6:	69d3      	ldr	r3, [r2, #28]
 8001dc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dcc:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, LCD_SCL_Pin|LCD_SDA_Pin);
 8001dce:	21c0      	movs	r1, #192	; 0xc0
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <HAL_I2C_MspDeInit+0x28>)
 8001dd2:	f000 fdb9 	bl	8002948 <HAL_GPIO_DeInit>
}
 8001dd6:	e7f4      	b.n	8001dc2 <HAL_I2C_MspDeInit+0xa>
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010c00 	.word	0x40010c00

08001de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de4:	b500      	push	{lr}
 8001de6:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8001de8:	6803      	ldr	r3, [r0, #0]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d005      	beq.n	8001dfc <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <HAL_TIM_Base_MspInit+0x58>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00e      	beq.n	8001e14 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001df6:	b003      	add	sp, #12
 8001df8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	61da      	str	r2, [r3, #28]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	9b00      	ldr	r3, [sp, #0]
 8001e12:	e7f0      	b.n	8001df6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_TIM_Base_MspInit+0x5c>)
 8001e16:	69da      	ldr	r2, [r3, #28]
 8001e18:	f042 0202 	orr.w	r2, r2, #2
 8001e1c:	61da      	str	r2, [r3, #28]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	201d      	movs	r0, #29
 8001e2e:	f000 fb1f 	bl	8002470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e32:	201d      	movs	r0, #29
 8001e34:	f000 fb50 	bl	80024d8 <HAL_NVIC_EnableIRQ>
}
 8001e38:	e7dd      	b.n	8001df6 <HAL_TIM_Base_MspInit+0x12>
 8001e3a:	bf00      	nop
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40021000 	.word	0x40021000

08001e44 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e44:	4770      	bx	lr

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler>

08001e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler>

08001e4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	4770      	bx	lr

08001e52 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e56:	f000 f871 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5a:	bd08      	pop	{r3, pc}

08001e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e5e:	4802      	ldr	r0, [pc, #8]	; (8001e68 <DMA1_Channel1_IRQHandler+0xc>)
 8001e60:	f000 fbe4 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e64:	bd08      	pop	{r3, pc}
 8001e66:	bf00      	nop
 8001e68:	20000224 	.word	0x20000224

08001e6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM3_IRQHandler+0xc>)
 8001e70:	f001 fd06 	bl	8003880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e74:	bd08      	pop	{r3, pc}
 8001e76:	bf00      	nop
 8001e78:	200001ac 	.word	0x200001ac

08001e7c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e7c:	4770      	bx	lr
	...

08001e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e82:	e003      	b.n	8001e8c <LoopCopyDataInit>

08001e84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e8a:	3104      	adds	r1, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e8c:	480a      	ldr	r0, [pc, #40]	; (8001eb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e94:	d3f6      	bcc.n	8001e84 <CopyDataInit>
  ldr r2, =_sbss
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e98:	e002      	b.n	8001ea0 <LoopFillZerobss>

08001e9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e9c:	f842 3b04 	str.w	r3, [r2], #4

08001ea0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ea2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ea4:	d3f9      	bcc.n	8001e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea6:	f7ff ffe9 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f001 febb 	bl	8003c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eae:	f7ff febf 	bl	8001c30 <main>
  bx lr
 8001eb2:	4770      	bx	lr
  ldr r3, =_sidata
 8001eb4:	08003d90 	.word	0x08003d90
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ebc:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8001ec0:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8001ec4:	200002b4 	.word	0x200002b4

08001ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC1_2_IRQHandler>
	...

08001ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ecc:	b510      	push	{r4, lr}
 8001ece:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_InitTick+0x40>)
 8001ed2:	7818      	ldrb	r0, [r3, #0]
 8001ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001edc:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <HAL_InitTick+0x44>)
 8001ede:	6810      	ldr	r0, [r2, #0]
 8001ee0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ee4:	f000 fb06 	bl	80024f4 <HAL_SYSTICK_Config>
 8001ee8:	b968      	cbnz	r0, 8001f06 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	2c0f      	cmp	r4, #15
 8001eec:	d901      	bls.n	8001ef2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
 8001ef0:	e00a      	b.n	8001f08 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8001efa:	f000 fab9 	bl	8002470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_InitTick+0x48>)
 8001f00:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2000      	movs	r0, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001f06:	2001      	movs	r0, #1
}
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000014 	.word	0x20000014
 8001f10:	20000010 	.word	0x20000010
 8001f14:	20000018 	.word	0x20000018

08001f18 <HAL_Init>:
{
 8001f18:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_Init+0x20>)
 8001f1c:	6813      	ldr	r3, [r2, #0]
 8001f1e:	f043 0310 	orr.w	r3, r3, #16
 8001f22:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 fa91 	bl	800244c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7ff ffce 	bl	8001ecc <HAL_InitTick>
  HAL_MspInit();
 8001f30:	f7ff fea0 	bl	8001c74 <HAL_MspInit>
}
 8001f34:	2000      	movs	r0, #0
 8001f36:	bd08      	pop	{r3, pc}
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f3c:	4a03      	ldr	r2, [pc, #12]	; (8001f4c <HAL_IncTick+0x10>)
 8001f3e:	6811      	ldr	r1, [r2, #0]
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_IncTick+0x14>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	440b      	add	r3, r1
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	200002b0 	.word	0x200002b0
 8001f50:	20000014 	.word	0x20000014

08001f54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f54:	4b01      	ldr	r3, [pc, #4]	; (8001f5c <HAL_GetTick+0x8>)
 8001f56:	6818      	ldr	r0, [r3, #0]
}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200002b0 	.word	0x200002b0

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff fff6 	bl	8001f54 <HAL_GetTick>
 8001f68:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001f6e:	d002      	beq.n	8001f76 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_Delay+0x24>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f76:	f7ff ffed 	bl	8001f54 <HAL_GetTick>
 8001f7a:	1b40      	subs	r0, r0, r5
 8001f7c:	42a0      	cmp	r0, r4
 8001f7e:	d3fa      	bcc.n	8001f76 <HAL_Delay+0x16>
  {
  }
}
 8001f80:	bd38      	pop	{r3, r4, r5, pc}
 8001f82:	bf00      	nop
 8001f84:	20000014 	.word	0x20000014

08001f88 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f88:	6803      	ldr	r3, [r0, #0]
 8001f8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001f8c:	4770      	bx	lr

08001f8e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f8e:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f94:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001f98:	d003      	beq.n	8001fa2 <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4798      	blx	r3
  }
}
 8001fa0:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	6892      	ldr	r2, [r2, #8]
 8001fae:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001fb2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001fb6:	d003      	beq.n	8001fc0 <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fe53 	bl	8001c64 <HAL_ADC_ConvCpltCallback>
 8001fbe:	e7ef      	b.n	8001fa0 <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fc0:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fc2:	2a00      	cmp	r2, #0
 8001fc4:	d1f8      	bne.n	8001fb8 <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd0:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001fd4:	d1f0      	bne.n	8001fb8 <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8001fde:	e7eb      	b.n	8001fb8 <ADC_DMAConvCplt+0x2a>

08001fe0 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001fe0:	4770      	bx	lr

08001fe2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fe2:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fe4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001fe6:	f7ff fffb 	bl	8001fe0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fea:	bd08      	pop	{r3, pc}

08001fec <HAL_ADC_ErrorCallback>:
}
 8001fec:	4770      	bx	lr

08001fee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fee:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ff0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ff2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ffa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002002:	f7ff fff3 	bl	8001fec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002006:	bd08      	pop	{r3, pc}

08002008 <HAL_ADC_ConfigChannel>:
{ 
 8002008:	b430      	push	{r4, r5}
 800200a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002010:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002014:	2b01      	cmp	r3, #1
 8002016:	f000 808b 	beq.w	8002130 <HAL_ADC_ConfigChannel+0x128>
 800201a:	4602      	mov	r2, r0
 800201c:	2301      	movs	r3, #1
 800201e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8002022:	684b      	ldr	r3, [r1, #4]
 8002024:	2b06      	cmp	r3, #6
 8002026:	d829      	bhi.n	800207c <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002028:	6805      	ldr	r5, [r0, #0]
 800202a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800202c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002030:	3b05      	subs	r3, #5
 8002032:	241f      	movs	r4, #31
 8002034:	409c      	lsls	r4, r3
 8002036:	ea20 0004 	bic.w	r0, r0, r4
 800203a:	680c      	ldr	r4, [r1, #0]
 800203c:	fa04 f303 	lsl.w	r3, r4, r3
 8002040:	4303      	orrs	r3, r0
 8002042:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002044:	680b      	ldr	r3, [r1, #0]
 8002046:	2b09      	cmp	r3, #9
 8002048:	d938      	bls.n	80020bc <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800204a:	6815      	ldr	r5, [r2, #0]
 800204c:	68e8      	ldr	r0, [r5, #12]
 800204e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002052:	3b1e      	subs	r3, #30
 8002054:	2407      	movs	r4, #7
 8002056:	409c      	lsls	r4, r3
 8002058:	ea20 0004 	bic.w	r0, r0, r4
 800205c:	688c      	ldr	r4, [r1, #8]
 800205e:	fa04 f303 	lsl.w	r3, r4, r3
 8002062:	4303      	orrs	r3, r0
 8002064:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002066:	680b      	ldr	r3, [r1, #0]
 8002068:	3b10      	subs	r3, #16
 800206a:	2b01      	cmp	r3, #1
 800206c:	d934      	bls.n	80020d8 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002070:	2300      	movs	r3, #0
 8002072:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8002076:	b002      	add	sp, #8
 8002078:	bc30      	pop	{r4, r5}
 800207a:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 800207c:	2b0c      	cmp	r3, #12
 800207e:	d80e      	bhi.n	800209e <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002080:	6805      	ldr	r5, [r0, #0]
 8002082:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002084:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002088:	3b23      	subs	r3, #35	; 0x23
 800208a:	241f      	movs	r4, #31
 800208c:	409c      	lsls	r4, r3
 800208e:	ea20 0004 	bic.w	r0, r0, r4
 8002092:	680c      	ldr	r4, [r1, #0]
 8002094:	fa04 f303 	lsl.w	r3, r4, r3
 8002098:	4303      	orrs	r3, r0
 800209a:	632b      	str	r3, [r5, #48]	; 0x30
 800209c:	e7d2      	b.n	8002044 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800209e:	6805      	ldr	r5, [r0, #0]
 80020a0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80020a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020a6:	3b41      	subs	r3, #65	; 0x41
 80020a8:	241f      	movs	r4, #31
 80020aa:	409c      	lsls	r4, r3
 80020ac:	ea20 0004 	bic.w	r0, r0, r4
 80020b0:	680c      	ldr	r4, [r1, #0]
 80020b2:	fa04 f303 	lsl.w	r3, r4, r3
 80020b6:	4303      	orrs	r3, r0
 80020b8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80020ba:	e7c3      	b.n	8002044 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020bc:	6815      	ldr	r5, [r2, #0]
 80020be:	6928      	ldr	r0, [r5, #16]
 80020c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80020c4:	2407      	movs	r4, #7
 80020c6:	409c      	lsls	r4, r3
 80020c8:	ea20 0004 	bic.w	r0, r0, r4
 80020cc:	688c      	ldr	r4, [r1, #8]
 80020ce:	fa04 f303 	lsl.w	r3, r4, r3
 80020d2:	4303      	orrs	r3, r0
 80020d4:	612b      	str	r3, [r5, #16]
 80020d6:	e7c6      	b.n	8002066 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	4816      	ldr	r0, [pc, #88]	; (8002134 <HAL_ADC_ConfigChannel+0x12c>)
 80020dc:	4283      	cmp	r3, r0
 80020de:	d005      	beq.n	80020ec <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80020e2:	f043 0320 	orr.w	r3, r3, #32
 80020e6:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80020e8:	2001      	movs	r0, #1
 80020ea:	e7c1      	b.n	8002070 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020ec:	6898      	ldr	r0, [r3, #8]
 80020ee:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80020f2:	d11b      	bne.n	800212c <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020f4:	6898      	ldr	r0, [r3, #8]
 80020f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80020fa:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020fc:	680b      	ldr	r3, [r1, #0]
 80020fe:	2b10      	cmp	r3, #16
 8002100:	d001      	beq.n	8002106 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002102:	2000      	movs	r0, #0
 8002104:	e7b4      	b.n	8002070 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_ADC_ConfigChannel+0x130>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	490c      	ldr	r1, [pc, #48]	; (800213c <HAL_ADC_ConfigChannel+0x134>)
 800210c:	fba1 1303 	umull	r1, r3, r1, r3
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002116:	0059      	lsls	r1, r3, #1
 8002118:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800211a:	e002      	b.n	8002122 <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 800211c:	9b01      	ldr	r3, [sp, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002122:	9b01      	ldr	r3, [sp, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f9      	bne.n	800211c <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002128:	2000      	movs	r0, #0
 800212a:	e7a1      	b.n	8002070 <HAL_ADC_ConfigChannel+0x68>
 800212c:	2000      	movs	r0, #0
 800212e:	e79f      	b.n	8002070 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8002130:	2002      	movs	r0, #2
 8002132:	e7a0      	b.n	8002076 <HAL_ADC_ConfigChannel+0x6e>
 8002134:	40012400 	.word	0x40012400
 8002138:	20000010 	.word	0x20000010
 800213c:	431bde83 	.word	0x431bde83

08002140 <ADC_Enable>:
{
 8002140:	b530      	push	{r4, r5, lr}
 8002142:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002148:	6803      	ldr	r3, [r0, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	f012 0f01 	tst.w	r2, #1
 8002150:	d12e      	bne.n	80021b0 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <ADC_Enable+0x78>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <ADC_Enable+0x7c>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002168:	e002      	b.n	8002170 <ADC_Enable+0x30>
      wait_loop_index--;
 800216a:	9b01      	ldr	r3, [sp, #4]
 800216c:	3b01      	subs	r3, #1
 800216e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002170:	9b01      	ldr	r3, [sp, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f9      	bne.n	800216a <ADC_Enable+0x2a>
 8002176:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002178:	f7ff feec 	bl	8001f54 <HAL_GetTick>
 800217c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f013 0f01 	tst.w	r3, #1
 8002186:	d111      	bne.n	80021ac <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002188:	f7ff fee4 	bl	8001f54 <HAL_GetTick>
 800218c:	1b40      	subs	r0, r0, r5
 800218e:	2802      	cmp	r0, #2
 8002190:	d9f5      	bls.n	800217e <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80021a2:	2300      	movs	r3, #0
 80021a4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
 80021aa:	e002      	b.n	80021b2 <ADC_Enable+0x72>
  return HAL_OK;
 80021ac:	2000      	movs	r0, #0
 80021ae:	e000      	b.n	80021b2 <ADC_Enable+0x72>
 80021b0:	2000      	movs	r0, #0
}
 80021b2:	b003      	add	sp, #12
 80021b4:	bd30      	pop	{r4, r5, pc}
 80021b6:	bf00      	nop
 80021b8:	20000010 	.word	0x20000010
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <HAL_ADC_Start_DMA>:
{
 80021c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80021c2:	6804      	ldr	r4, [r0, #0]
 80021c4:	4d45      	ldr	r5, [pc, #276]	; (80022dc <HAL_ADC_Start_DMA+0x11c>)
 80021c6:	42ac      	cmp	r4, r5
 80021c8:	d05b      	beq.n	8002282 <HAL_ADC_Start_DMA+0xc2>
 80021ca:	4b45      	ldr	r3, [pc, #276]	; (80022e0 <HAL_ADC_Start_DMA+0x120>)
 80021cc:	429c      	cmp	r4, r3
 80021ce:	d058      	beq.n	8002282 <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 80021d0:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80021d4:	2c01      	cmp	r4, #1
 80021d6:	d07e      	beq.n	80022d6 <HAL_ADC_Start_DMA+0x116>
 80021d8:	4616      	mov	r6, r2
 80021da:	460d      	mov	r5, r1
 80021dc:	4604      	mov	r4, r0
 80021de:	2301      	movs	r3, #1
 80021e0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80021e4:	f7ff ffac 	bl	8002140 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80021e8:	4607      	mov	r7, r0
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d16e      	bne.n	80022cc <HAL_ADC_Start_DMA+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 80021ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021fe:	6822      	ldr	r2, [r4, #0]
 8002200:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <HAL_ADC_Start_DMA+0x120>)
 8002202:	429a      	cmp	r2, r3
 8002204:	d044      	beq.n	8002290 <HAL_ADC_Start_DMA+0xd0>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002206:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002208:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800220c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800220e:	6853      	ldr	r3, [r2, #4]
 8002210:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002214:	d005      	beq.n	8002222 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002218:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800221c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002220:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002224:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002228:	d048      	beq.n	80022bc <HAL_ADC_Start_DMA+0xfc>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800222a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800222c:	f023 0306 	bic.w	r3, r3, #6
 8002230:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002232:	2300      	movs	r3, #0
 8002234:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002238:	6a23      	ldr	r3, [r4, #32]
 800223a:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <HAL_ADC_Start_DMA+0x124>)
 800223c:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800223e:	6a23      	ldr	r3, [r4, #32]
 8002240:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <HAL_ADC_Start_DMA+0x128>)
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002244:	6a23      	ldr	r3, [r4, #32]
 8002246:	4a29      	ldr	r2, [pc, #164]	; (80022ec <HAL_ADC_Start_DMA+0x12c>)
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	f06f 0202 	mvn.w	r2, #2
 8002250:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	6893      	ldr	r3, [r2, #8]
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800225c:	6821      	ldr	r1, [r4, #0]
 800225e:	4633      	mov	r3, r6
 8002260:	462a      	mov	r2, r5
 8002262:	314c      	adds	r1, #76	; 0x4c
 8002264:	6a20      	ldr	r0, [r4, #32]
 8002266:	f000 f9a7 	bl	80025b8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800226a:	6822      	ldr	r2, [r4, #0]
 800226c:	6893      	ldr	r3, [r2, #8]
 800226e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002272:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002276:	d024      	beq.n	80022c2 <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002278:	6893      	ldr	r3, [r2, #8]
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227e:	6093      	str	r3, [r2, #8]
 8002280:	e027      	b.n	80022d2 <HAL_ADC_Start_DMA+0x112>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_ADC_Start_DMA+0x11c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800228a:	d0a1      	beq.n	80021d0 <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_ERROR;
 800228c:	2701      	movs	r7, #1
 800228e:	e020      	b.n	80022d2 <HAL_ADC_Start_DMA+0x112>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002290:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800229a:	d0b4      	beq.n	8002206 <HAL_ADC_Start_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800229c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800229e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_ADC_Start_DMA+0x11c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022ac:	d0b9      	beq.n	8002222 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80022ba:	e7b2      	b.n	8002222 <HAL_ADC_Start_DMA+0x62>
        ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	2300      	movs	r3, #0
 80022be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022c0:	e7b7      	b.n	8002232 <HAL_ADC_Start_DMA+0x72>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022c2:	6893      	ldr	r3, [r2, #8]
 80022c4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80022c8:	6093      	str	r3, [r2, #8]
 80022ca:	e002      	b.n	80022d2 <HAL_ADC_Start_DMA+0x112>
      __HAL_UNLOCK(hadc);
 80022cc:	2300      	movs	r3, #0
 80022ce:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80022d2:	4638      	mov	r0, r7
 80022d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80022d6:	2702      	movs	r7, #2
 80022d8:	e7fb      	b.n	80022d2 <HAL_ADC_Start_DMA+0x112>
 80022da:	bf00      	nop
 80022dc:	40012400 	.word	0x40012400
 80022e0:	40012800 	.word	0x40012800
 80022e4:	08001f8f 	.word	0x08001f8f
 80022e8:	08001fe3 	.word	0x08001fe3
 80022ec:	08001fef 	.word	0x08001fef

080022f0 <ADC_ConversionStop_Disable>:
{
 80022f0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022f2:	6803      	ldr	r3, [r0, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	f012 0f01 	tst.w	r2, #1
 80022fa:	d101      	bne.n	8002300 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80022fc:	2000      	movs	r0, #0
}
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
 8002300:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800230a:	f7ff fe23 	bl	8001f54 <HAL_GetTick>
 800230e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f013 0f01 	tst.w	r3, #1
 8002318:	d00e      	beq.n	8002338 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800231a:	f7ff fe1b 	bl	8001f54 <HAL_GetTick>
 800231e:	1b40      	subs	r0, r0, r5
 8002320:	2802      	cmp	r0, #2
 8002322:	d9f5      	bls.n	8002310 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002324:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8002334:	2001      	movs	r0, #1
 8002336:	e7e2      	b.n	80022fe <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002338:	2000      	movs	r0, #0
 800233a:	e7e0      	b.n	80022fe <ADC_ConversionStop_Disable+0xe>

0800233c <HAL_ADC_Init>:
  if(hadc == NULL)
 800233c:	2800      	cmp	r0, #0
 800233e:	d07f      	beq.n	8002440 <HAL_ADC_Init+0x104>
{
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002344:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	d033      	beq.n	80023b2 <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff ffd0 	bl	80022f0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002352:	f013 0310 	ands.w	r3, r3, #16
 8002356:	d16d      	bne.n	8002434 <HAL_ADC_Init+0xf8>
 8002358:	2800      	cmp	r0, #0
 800235a:	d16b      	bne.n	8002434 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 800235c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800235e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002362:	f022 0202 	bic.w	r2, r2, #2
 8002366:	f042 0202 	orr.w	r2, r2, #2
 800236a:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800236c:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800236e:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002370:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002372:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002374:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002378:	68a1      	ldr	r1, [r4, #8]
 800237a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800237e:	d021      	beq.n	80023c4 <HAL_ADC_Init+0x88>
 8002380:	2901      	cmp	r1, #1
 8002382:	d01c      	beq.n	80023be <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002384:	7d21      	ldrb	r1, [r4, #20]
 8002386:	2901      	cmp	r1, #1
 8002388:	d01f      	beq.n	80023ca <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 800238a:	6825      	ldr	r5, [r4, #0]
 800238c:	6869      	ldr	r1, [r5, #4]
 800238e:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8002392:	430b      	orrs	r3, r1
 8002394:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002396:	6821      	ldr	r1, [r4, #0]
 8002398:	688d      	ldr	r5, [r1, #8]
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_ADC_Init+0x108>)
 800239c:	402b      	ands	r3, r5
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023a2:	68a3      	ldr	r3, [r4, #8]
 80023a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a8:	d020      	beq.n	80023ec <HAL_ADC_Init+0xb0>
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d01e      	beq.n	80023ec <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 80023ae:	2100      	movs	r1, #0
 80023b0:	e01f      	b.n	80023f2 <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80023b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80023b8:	f7ff fc7e 	bl	8001cb8 <HAL_ADC_MspInit>
 80023bc:	e7c5      	b.n	800234a <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c2:	e7df      	b.n	8002384 <HAL_ADC_Init+0x48>
 80023c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c8:	e7dc      	b.n	8002384 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023ca:	b935      	cbnz	r5, 80023da <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023cc:	69a1      	ldr	r1, [r4, #24]
 80023ce:	3901      	subs	r1, #1
 80023d0:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 80023d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023d8:	e7d7      	b.n	800238a <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80023dc:	f041 0120 	orr.w	r1, r1, #32
 80023e0:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80023e4:	f041 0101 	orr.w	r1, r1, #1
 80023e8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80023ea:	e7ce      	b.n	800238a <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023ec:	6923      	ldr	r3, [r4, #16]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80023f2:	6825      	ldr	r5, [r4, #0]
 80023f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80023f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80023fa:	430b      	orrs	r3, r1
 80023fc:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_ADC_Init+0x10c>)
 8002404:	400b      	ands	r3, r1
 8002406:	429a      	cmp	r2, r3
 8002408:	d00b      	beq.n	8002422 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 800240a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800240c:	f023 0312 	bic.w	r3, r3, #18
 8002410:	f043 0310 	orr.w	r3, r3, #16
 8002414:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800241e:	2001      	movs	r0, #1
 8002420:	e00d      	b.n	800243e <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8002422:	2300      	movs	r3, #0
 8002424:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002428:	f023 0303 	bic.w	r3, r3, #3
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	62a3      	str	r3, [r4, #40]	; 0x28
 8002432:	e004      	b.n	800243e <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002434:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800243c:	2001      	movs	r0, #1
}
 800243e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002440:	2001      	movs	r0, #1
}
 8002442:	4770      	bx	lr
 8002444:	ffe1f7fd 	.word	0xffe1f7fd
 8002448:	ff1f0efe 	.word	0xff1f0efe

0800244c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800244e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002450:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002458:	0200      	lsls	r0, r0, #8
 800245a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002460:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002464:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002468:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002470:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_NVIC_SetPriority+0x60>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247a:	f1c3 0407 	rsb	r4, r3, #7
 800247e:	2c04      	cmp	r4, #4
 8002480:	bf28      	it	cs
 8002482:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002484:	1d1d      	adds	r5, r3, #4
 8002486:	2d06      	cmp	r5, #6
 8002488:	d918      	bls.n	80024bc <HAL_NVIC_SetPriority+0x4c>
 800248a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 35ff 	mov.w	r5, #4294967295
 8002490:	fa05 f404 	lsl.w	r4, r5, r4
 8002494:	ea21 0104 	bic.w	r1, r1, r4
 8002498:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249a:	fa05 f303 	lsl.w	r3, r5, r3
 800249e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80024a4:	2800      	cmp	r0, #0
 80024a6:	db0b      	blt.n	80024c0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	0109      	lsls	r1, r1, #4
 80024aa:	b2c9      	uxtb	r1, r1
 80024ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80024b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80024b4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024b8:	bc30      	pop	{r4, r5}
 80024ba:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024bc:	2300      	movs	r3, #0
 80024be:	e7e5      	b.n	800248c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	f000 000f 	and.w	r0, r0, #15
 80024c4:	0109      	lsls	r1, r1, #4
 80024c6:	b2c9      	uxtb	r1, r1
 80024c8:	4b02      	ldr	r3, [pc, #8]	; (80024d4 <HAL_NVIC_SetPriority+0x64>)
 80024ca:	5419      	strb	r1, [r3, r0]
 80024cc:	e7f4      	b.n	80024b8 <HAL_NVIC_SetPriority+0x48>
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00
 80024d4:	e000ed14 	.word	0xe000ed14

080024d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024d8:	2800      	cmp	r0, #0
 80024da:	db07      	blt.n	80024ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024dc:	f000 021f 	and.w	r2, r0, #31
 80024e0:	0940      	lsrs	r0, r0, #5
 80024e2:	2301      	movs	r3, #1
 80024e4:	4093      	lsls	r3, r2
 80024e6:	4a02      	ldr	r2, [pc, #8]	; (80024f0 <HAL_NVIC_EnableIRQ+0x18>)
 80024e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	3801      	subs	r0, #1
 80024f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024fa:	d20a      	bcs.n	8002512 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_SYSTICK_Config+0x24>)
 80024fe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_SYSTICK_Config+0x28>)
 8002502:	21f0      	movs	r1, #240	; 0xf0
 8002504:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	2000      	movs	r0, #0
 800250a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002512:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002520:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002522:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002524:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002526:	2401      	movs	r4, #1
 8002528:	40b4      	lsls	r4, r6
 800252a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800252c:	6804      	ldr	r4, [r0, #0]
 800252e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002530:	6843      	ldr	r3, [r0, #4]
 8002532:	2b10      	cmp	r3, #16
 8002534:	d005      	beq.n	8002542 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800253a:	6803      	ldr	r3, [r0, #0]
 800253c:	60da      	str	r2, [r3, #12]
  }
}
 800253e:	bc70      	pop	{r4, r5, r6}
 8002540:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002542:	6803      	ldr	r3, [r0, #0]
 8002544:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002546:	6803      	ldr	r3, [r0, #0]
 8002548:	60d9      	str	r1, [r3, #12]
 800254a:	e7f8      	b.n	800253e <DMA_SetConfig+0x1e>

0800254c <HAL_DMA_Init>:
  if(hdma == NULL)
 800254c:	b360      	cbz	r0, 80025a8 <HAL_DMA_Init+0x5c>
{
 800254e:	b410      	push	{r4}
 8002550:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002552:	6801      	ldr	r1, [r0, #0]
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_DMA_Init+0x60>)
 8002556:	440b      	add	r3, r1
 8002558:	4815      	ldr	r0, [pc, #84]	; (80025b0 <HAL_DMA_Init+0x64>)
 800255a:	fba0 0303 	umull	r0, r3, r0, r3
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <HAL_DMA_Init+0x68>)
 8002566:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	2302      	movs	r3, #2
 800256a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 800256e:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002570:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8002574:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8002578:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257a:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 800257c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257e:	68d4      	ldr	r4, [r2, #12]
 8002580:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002582:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002584:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002586:	6954      	ldr	r4, [r2, #20]
 8002588:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800258a:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800258e:	69d4      	ldr	r4, [r2, #28]
 8002590:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002592:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8002594:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002596:	2000      	movs	r0, #0
 8002598:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800259a:	2301      	movs	r3, #1
 800259c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80025a0:	f882 0020 	strb.w	r0, [r2, #32]
}
 80025a4:	bc10      	pop	{r4}
 80025a6:	4770      	bx	lr
    return HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
}
 80025aa:	4770      	bx	lr
 80025ac:	bffdfff8 	.word	0xbffdfff8
 80025b0:	cccccccd 	.word	0xcccccccd
 80025b4:	40020000 	.word	0x40020000

080025b8 <HAL_DMA_Start_IT>:
{
 80025b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80025ba:	f890 4020 	ldrb.w	r4, [r0, #32]
 80025be:	2c01      	cmp	r4, #1
 80025c0:	d032      	beq.n	8002628 <HAL_DMA_Start_IT+0x70>
 80025c2:	2401      	movs	r4, #1
 80025c4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80025c8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 80025cc:	2c01      	cmp	r4, #1
 80025ce:	d004      	beq.n	80025da <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 80025d0:	2300      	movs	r3, #0
 80025d2:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 80025d6:	2002      	movs	r0, #2
}
 80025d8:	bd38      	pop	{r3, r4, r5, pc}
 80025da:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80025dc:	2002      	movs	r0, #2
 80025de:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e2:	2000      	movs	r0, #0
 80025e4:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80025e6:	6825      	ldr	r5, [r4, #0]
 80025e8:	6828      	ldr	r0, [r5, #0]
 80025ea:	f020 0001 	bic.w	r0, r0, #1
 80025ee:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f0:	4620      	mov	r0, r4
 80025f2:	f7ff ff95 	bl	8002520 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80025f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025f8:	b15b      	cbz	r3, 8002612 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fa:	6822      	ldr	r2, [r4, #0]
 80025fc:	6813      	ldr	r3, [r2, #0]
 80025fe:	f043 030e 	orr.w	r3, r3, #14
 8002602:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2000      	movs	r0, #0
 8002610:	e7e2      	b.n	80025d8 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	6813      	ldr	r3, [r2, #0]
 8002616:	f023 0304 	bic.w	r3, r3, #4
 800261a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800261c:	6822      	ldr	r2, [r4, #0]
 800261e:	6813      	ldr	r3, [r2, #0]
 8002620:	f043 030a 	orr.w	r3, r3, #10
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e7ed      	b.n	8002604 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002628:	2002      	movs	r0, #2
 800262a:	e7d5      	b.n	80025d8 <HAL_DMA_Start_IT+0x20>

0800262c <HAL_DMA_IRQHandler>:
{
 800262c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800262e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002630:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002632:	6804      	ldr	r4, [r0, #0]
 8002634:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002636:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002638:	2304      	movs	r3, #4
 800263a:	408b      	lsls	r3, r1
 800263c:	4213      	tst	r3, r2
 800263e:	d035      	beq.n	80026ac <HAL_DMA_IRQHandler+0x80>
 8002640:	f015 0f04 	tst.w	r5, #4
 8002644:	d032      	beq.n	80026ac <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	f013 0f20 	tst.w	r3, #32
 800264c:	d103      	bne.n	8002656 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	f023 0304 	bic.w	r3, r3, #4
 8002654:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002656:	6803      	ldr	r3, [r0, #0]
 8002658:	4a43      	ldr	r2, [pc, #268]	; (8002768 <HAL_DMA_IRQHandler+0x13c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d014      	beq.n	8002688 <HAL_DMA_IRQHandler+0x5c>
 800265e:	3214      	adds	r2, #20
 8002660:	4293      	cmp	r3, r2
 8002662:	d018      	beq.n	8002696 <HAL_DMA_IRQHandler+0x6a>
 8002664:	3214      	adds	r2, #20
 8002666:	4293      	cmp	r3, r2
 8002668:	d017      	beq.n	800269a <HAL_DMA_IRQHandler+0x6e>
 800266a:	3214      	adds	r2, #20
 800266c:	4293      	cmp	r3, r2
 800266e:	d017      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x74>
 8002670:	3214      	adds	r2, #20
 8002672:	4293      	cmp	r3, r2
 8002674:	d017      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x7a>
 8002676:	3214      	adds	r2, #20
 8002678:	4293      	cmp	r3, r2
 800267a:	d002      	beq.n	8002682 <HAL_DMA_IRQHandler+0x56>
 800267c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002680:	e003      	b.n	800268a <HAL_DMA_IRQHandler+0x5e>
 8002682:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002686:	e000      	b.n	800268a <HAL_DMA_IRQHandler+0x5e>
 8002688:	2204      	movs	r2, #4
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_DMA_IRQHandler+0x140>)
 800268c:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800268e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002690:	b103      	cbz	r3, 8002694 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8002692:	4798      	blx	r3
}
 8002694:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	e7f7      	b.n	800268a <HAL_DMA_IRQHandler+0x5e>
 800269a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800269e:	e7f4      	b.n	800268a <HAL_DMA_IRQHandler+0x5e>
 80026a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026a4:	e7f1      	b.n	800268a <HAL_DMA_IRQHandler+0x5e>
 80026a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80026aa:	e7ee      	b.n	800268a <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026ac:	2302      	movs	r3, #2
 80026ae:	408b      	lsls	r3, r1
 80026b0:	4213      	tst	r3, r2
 80026b2:	d03c      	beq.n	800272e <HAL_DMA_IRQHandler+0x102>
 80026b4:	f015 0f02 	tst.w	r5, #2
 80026b8:	d039      	beq.n	800272e <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	f013 0f20 	tst.w	r3, #32
 80026c0:	d106      	bne.n	80026d0 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	f023 030a 	bic.w	r3, r3, #10
 80026c8:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026d0:	6803      	ldr	r3, [r0, #0]
 80026d2:	4a25      	ldr	r2, [pc, #148]	; (8002768 <HAL_DMA_IRQHandler+0x13c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d014      	beq.n	8002702 <HAL_DMA_IRQHandler+0xd6>
 80026d8:	3214      	adds	r2, #20
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01c      	beq.n	8002718 <HAL_DMA_IRQHandler+0xec>
 80026de:	3214      	adds	r2, #20
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d01b      	beq.n	800271c <HAL_DMA_IRQHandler+0xf0>
 80026e4:	3214      	adds	r2, #20
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01b      	beq.n	8002722 <HAL_DMA_IRQHandler+0xf6>
 80026ea:	3214      	adds	r2, #20
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d01b      	beq.n	8002728 <HAL_DMA_IRQHandler+0xfc>
 80026f0:	3214      	adds	r2, #20
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d002      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd0>
 80026f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fa:	e003      	b.n	8002704 <HAL_DMA_IRQHandler+0xd8>
 80026fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002700:	e000      	b.n	8002704 <HAL_DMA_IRQHandler+0xd8>
 8002702:	2202      	movs	r2, #2
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_DMA_IRQHandler+0x140>)
 8002706:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002708:	2300      	movs	r3, #0
 800270a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800270e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0bf      	beq.n	8002694 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8002714:	4798      	blx	r3
 8002716:	e7bd      	b.n	8002694 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002718:	2220      	movs	r2, #32
 800271a:	e7f3      	b.n	8002704 <HAL_DMA_IRQHandler+0xd8>
 800271c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002720:	e7f0      	b.n	8002704 <HAL_DMA_IRQHandler+0xd8>
 8002722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002726:	e7ed      	b.n	8002704 <HAL_DMA_IRQHandler+0xd8>
 8002728:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800272c:	e7ea      	b.n	8002704 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800272e:	2308      	movs	r3, #8
 8002730:	fa03 f101 	lsl.w	r1, r3, r1
 8002734:	4211      	tst	r1, r2
 8002736:	d0ad      	beq.n	8002694 <HAL_DMA_IRQHandler+0x68>
 8002738:	f015 0f08 	tst.w	r5, #8
 800273c:	d0aa      	beq.n	8002694 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	f023 030e 	bic.w	r3, r3, #14
 8002744:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002746:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002748:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800274a:	2301      	movs	r3, #1
 800274c:	fa03 f202 	lsl.w	r2, r3, r2
 8002750:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002752:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002754:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002758:	2300      	movs	r3, #0
 800275a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800275e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002760:	2b00      	cmp	r3, #0
 8002762:	d097      	beq.n	8002694 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8002764:	4798      	blx	r3
  return;
 8002766:	e795      	b.n	8002694 <HAL_DMA_IRQHandler+0x68>
 8002768:	40020008 	.word	0x40020008
 800276c:	40020000 	.word	0x40020000

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	b4f0      	push	{r4, r5, r6, r7}
 8002772:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002774:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8002776:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002778:	e0a2      	b.n	80028c0 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800277a:	2d00      	cmp	r5, #0
 800277c:	d05a      	beq.n	8002834 <HAL_GPIO_Init+0xc4>
 800277e:	2d01      	cmp	r5, #1
 8002780:	d100      	bne.n	8002784 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002782:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002784:	2bff      	cmp	r3, #255	; 0xff
 8002786:	d869      	bhi.n	800285c <HAL_GPIO_Init+0xec>
 8002788:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800278a:	2bff      	cmp	r3, #255	; 0xff
 800278c:	d869      	bhi.n	8002862 <HAL_GPIO_Init+0xf2>
 800278e:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002790:	f8dc 4000 	ldr.w	r4, [ip]
 8002794:	270f      	movs	r7, #15
 8002796:	40af      	lsls	r7, r5
 8002798:	ea24 0407 	bic.w	r4, r4, r7
 800279c:	fa06 f505 	lsl.w	r5, r6, r5
 80027a0:	432c      	orrs	r4, r5
 80027a2:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a6:	684c      	ldr	r4, [r1, #4]
 80027a8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80027ac:	f000 8087 	beq.w	80028be <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027b0:	4c5f      	ldr	r4, [pc, #380]	; (8002930 <HAL_GPIO_Init+0x1c0>)
 80027b2:	69a5      	ldr	r5, [r4, #24]
 80027b4:	f045 0501 	orr.w	r5, r5, #1
 80027b8:	61a5      	str	r5, [r4, #24]
 80027ba:	69a4      	ldr	r4, [r4, #24]
 80027bc:	f004 0401 	and.w	r4, r4, #1
 80027c0:	9401      	str	r4, [sp, #4]
 80027c2:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80027c4:	0895      	lsrs	r5, r2, #2
 80027c6:	1caf      	adds	r7, r5, #2
 80027c8:	4c5a      	ldr	r4, [pc, #360]	; (8002934 <HAL_GPIO_Init+0x1c4>)
 80027ca:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ce:	f002 0703 	and.w	r7, r2, #3
 80027d2:	00bf      	lsls	r7, r7, #2
 80027d4:	f04f 0c0f 	mov.w	ip, #15
 80027d8:	fa0c fc07 	lsl.w	ip, ip, r7
 80027dc:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027e0:	4c55      	ldr	r4, [pc, #340]	; (8002938 <HAL_GPIO_Init+0x1c8>)
 80027e2:	42a0      	cmp	r0, r4
 80027e4:	d043      	beq.n	800286e <HAL_GPIO_Init+0xfe>
 80027e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ea:	42a0      	cmp	r0, r4
 80027ec:	f000 8081 	beq.w	80028f2 <HAL_GPIO_Init+0x182>
 80027f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027f4:	42a0      	cmp	r0, r4
 80027f6:	d07e      	beq.n	80028f6 <HAL_GPIO_Init+0x186>
 80027f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027fc:	42a0      	cmp	r0, r4
 80027fe:	d034      	beq.n	800286a <HAL_GPIO_Init+0xfa>
 8002800:	2404      	movs	r4, #4
 8002802:	e035      	b.n	8002870 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8002804:	4f4d      	ldr	r7, [pc, #308]	; (800293c <HAL_GPIO_Init+0x1cc>)
 8002806:	42bd      	cmp	r5, r7
 8002808:	d014      	beq.n	8002834 <HAL_GPIO_Init+0xc4>
 800280a:	d90b      	bls.n	8002824 <HAL_GPIO_Init+0xb4>
 800280c:	4f4c      	ldr	r7, [pc, #304]	; (8002940 <HAL_GPIO_Init+0x1d0>)
 800280e:	42bd      	cmp	r5, r7
 8002810:	d010      	beq.n	8002834 <HAL_GPIO_Init+0xc4>
 8002812:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002816:	42bd      	cmp	r5, r7
 8002818:	d00c      	beq.n	8002834 <HAL_GPIO_Init+0xc4>
 800281a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800281e:	42bd      	cmp	r5, r7
 8002820:	d1b0      	bne.n	8002784 <HAL_GPIO_Init+0x14>
 8002822:	e007      	b.n	8002834 <HAL_GPIO_Init+0xc4>
 8002824:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002828:	42bd      	cmp	r5, r7
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0xc4>
 800282c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002830:	42bd      	cmp	r5, r7
 8002832:	d1a7      	bne.n	8002784 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002834:	688d      	ldr	r5, [r1, #8]
 8002836:	b17d      	cbz	r5, 8002858 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002838:	2d01      	cmp	r5, #1
 800283a:	d008      	beq.n	800284e <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 800283c:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800283e:	2608      	movs	r6, #8
 8002840:	e7a0      	b.n	8002784 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002842:	68ce      	ldr	r6, [r1, #12]
 8002844:	3608      	adds	r6, #8
          break;
 8002846:	e79d      	b.n	8002784 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002848:	68ce      	ldr	r6, [r1, #12]
 800284a:	360c      	adds	r6, #12
          break;
 800284c:	e79a      	b.n	8002784 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800284e:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002850:	2608      	movs	r6, #8
 8002852:	e797      	b.n	8002784 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002854:	2600      	movs	r6, #0
 8002856:	e795      	b.n	8002784 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002858:	2604      	movs	r6, #4
 800285a:	e793      	b.n	8002784 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800285c:	f100 0c04 	add.w	ip, r0, #4
 8002860:	e793      	b.n	800278a <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002862:	f1a2 0508 	sub.w	r5, r2, #8
 8002866:	00ad      	lsls	r5, r5, #2
 8002868:	e792      	b.n	8002790 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800286a:	2403      	movs	r4, #3
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x100>
 800286e:	2400      	movs	r4, #0
 8002870:	40bc      	lsls	r4, r7
 8002872:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8002876:	3502      	adds	r5, #2
 8002878:	4f2e      	ldr	r7, [pc, #184]	; (8002934 <HAL_GPIO_Init+0x1c4>)
 800287a:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800287e:	684c      	ldr	r4, [r1, #4]
 8002880:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8002884:	d039      	beq.n	80028fa <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002886:	4d2f      	ldr	r5, [pc, #188]	; (8002944 <HAL_GPIO_Init+0x1d4>)
 8002888:	682c      	ldr	r4, [r5, #0]
 800288a:	431c      	orrs	r4, r3
 800288c:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800288e:	684c      	ldr	r4, [r1, #4]
 8002890:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8002894:	d037      	beq.n	8002906 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002896:	4d2b      	ldr	r5, [pc, #172]	; (8002944 <HAL_GPIO_Init+0x1d4>)
 8002898:	686c      	ldr	r4, [r5, #4]
 800289a:	431c      	orrs	r4, r3
 800289c:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289e:	684c      	ldr	r4, [r1, #4]
 80028a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80028a4:	d035      	beq.n	8002912 <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a6:	4d27      	ldr	r5, [pc, #156]	; (8002944 <HAL_GPIO_Init+0x1d4>)
 80028a8:	68ac      	ldr	r4, [r5, #8]
 80028aa:	431c      	orrs	r4, r3
 80028ac:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ae:	684c      	ldr	r4, [r1, #4]
 80028b0:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 80028b4:	d033      	beq.n	800291e <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028b6:	4d23      	ldr	r5, [pc, #140]	; (8002944 <HAL_GPIO_Init+0x1d4>)
 80028b8:	68ec      	ldr	r4, [r5, #12]
 80028ba:	4323      	orrs	r3, r4
 80028bc:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80028be:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c0:	680b      	ldr	r3, [r1, #0]
 80028c2:	fa33 f402 	lsrs.w	r4, r3, r2
 80028c6:	d030      	beq.n	800292a <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 80028c8:	2401      	movs	r4, #1
 80028ca:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028cc:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 80028ce:	429c      	cmp	r4, r3
 80028d0:	d1f5      	bne.n	80028be <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 80028d2:	684d      	ldr	r5, [r1, #4]
 80028d4:	2d12      	cmp	r5, #18
 80028d6:	d0b7      	beq.n	8002848 <HAL_GPIO_Init+0xd8>
 80028d8:	d894      	bhi.n	8002804 <HAL_GPIO_Init+0x94>
 80028da:	2d02      	cmp	r5, #2
 80028dc:	d0b1      	beq.n	8002842 <HAL_GPIO_Init+0xd2>
 80028de:	f67f af4c 	bls.w	800277a <HAL_GPIO_Init+0xa>
 80028e2:	2d03      	cmp	r5, #3
 80028e4:	d0b6      	beq.n	8002854 <HAL_GPIO_Init+0xe4>
 80028e6:	2d11      	cmp	r5, #17
 80028e8:	f47f af4c 	bne.w	8002784 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028ec:	68ce      	ldr	r6, [r1, #12]
 80028ee:	3604      	adds	r6, #4
          break;
 80028f0:	e748      	b.n	8002784 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028f2:	2401      	movs	r4, #1
 80028f4:	e7bc      	b.n	8002870 <HAL_GPIO_Init+0x100>
 80028f6:	2402      	movs	r4, #2
 80028f8:	e7ba      	b.n	8002870 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028fa:	4d12      	ldr	r5, [pc, #72]	; (8002944 <HAL_GPIO_Init+0x1d4>)
 80028fc:	682c      	ldr	r4, [r5, #0]
 80028fe:	ea24 0403 	bic.w	r4, r4, r3
 8002902:	602c      	str	r4, [r5, #0]
 8002904:	e7c3      	b.n	800288e <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002906:	4d0f      	ldr	r5, [pc, #60]	; (8002944 <HAL_GPIO_Init+0x1d4>)
 8002908:	686c      	ldr	r4, [r5, #4]
 800290a:	ea24 0403 	bic.w	r4, r4, r3
 800290e:	606c      	str	r4, [r5, #4]
 8002910:	e7c5      	b.n	800289e <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002912:	4d0c      	ldr	r5, [pc, #48]	; (8002944 <HAL_GPIO_Init+0x1d4>)
 8002914:	68ac      	ldr	r4, [r5, #8]
 8002916:	ea24 0403 	bic.w	r4, r4, r3
 800291a:	60ac      	str	r4, [r5, #8]
 800291c:	e7c7      	b.n	80028ae <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800291e:	4d09      	ldr	r5, [pc, #36]	; (8002944 <HAL_GPIO_Init+0x1d4>)
 8002920:	68ec      	ldr	r4, [r5, #12]
 8002922:	ea24 0303 	bic.w	r3, r4, r3
 8002926:	60eb      	str	r3, [r5, #12]
 8002928:	e7c9      	b.n	80028be <HAL_GPIO_Init+0x14e>
  }
}
 800292a:	b002      	add	sp, #8
 800292c:	bcf0      	pop	{r4, r5, r6, r7}
 800292e:	4770      	bx	lr
 8002930:	40021000 	.word	0x40021000
 8002934:	40010000 	.word	0x40010000
 8002938:	40010800 	.word	0x40010800
 800293c:	10210000 	.word	0x10210000
 8002940:	10310000 	.word	0x10310000
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8002948:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800294a:	e068      	b.n	8002a1e <HAL_GPIO_DeInit+0xd6>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800294c:	2603      	movs	r6, #3
 800294e:	e000      	b.n	8002952 <HAL_GPIO_DeInit+0xa>
 8002950:	2600      	movs	r6, #0
 8002952:	fa06 f404 	lsl.w	r4, r6, r4
 8002956:	42ac      	cmp	r4, r5
 8002958:	d03f      	beq.n	80029da <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800295a:	2bff      	cmp	r3, #255	; 0xff
 800295c:	d855      	bhi.n	8002a0a <HAL_GPIO_DeInit+0xc2>
 800295e:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002960:	2bff      	cmp	r3, #255	; 0xff
 8002962:	d855      	bhi.n	8002a10 <HAL_GPIO_DeInit+0xc8>
 8002964:	0097      	lsls	r7, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002966:	f8dc 4000 	ldr.w	r4, [ip]
 800296a:	260f      	movs	r6, #15
 800296c:	40be      	lsls	r6, r7
 800296e:	ea24 0406 	bic.w	r4, r4, r6
 8002972:	2504      	movs	r5, #4
 8002974:	40bd      	lsls	r5, r7
 8002976:	432c      	orrs	r4, r5
 8002978:	f8cc 4000 	str.w	r4, [ip]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800297c:	68c4      	ldr	r4, [r0, #12]
 800297e:	ea24 0303 	bic.w	r3, r4, r3
 8002982:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8002984:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8002986:	fa31 f302 	lsrs.w	r3, r1, r2
 800298a:	d045      	beq.n	8002a18 <HAL_GPIO_DeInit+0xd0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800298c:	2301      	movs	r3, #1
 800298e:	4093      	lsls	r3, r2
    if (iocurrent)
 8002990:	400b      	ands	r3, r1
 8002992:	d0f7      	beq.n	8002984 <HAL_GPIO_DeInit+0x3c>
      tmp = AFIO->EXTICR[position >> 2u];
 8002994:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8002998:	f10c 0502 	add.w	r5, ip, #2
 800299c:	4c25      	ldr	r4, [pc, #148]	; (8002a34 <HAL_GPIO_DeInit+0xec>)
 800299e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80029a2:	f002 0403 	and.w	r4, r2, #3
 80029a6:	00a4      	lsls	r4, r4, #2
 80029a8:	260f      	movs	r6, #15
 80029aa:	fa06 f704 	lsl.w	r7, r6, r4
 80029ae:	403d      	ands	r5, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80029b0:	4e21      	ldr	r6, [pc, #132]	; (8002a38 <HAL_GPIO_DeInit+0xf0>)
 80029b2:	42b0      	cmp	r0, r6
 80029b4:	d0cc      	beq.n	8002950 <HAL_GPIO_DeInit+0x8>
 80029b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80029ba:	42b0      	cmp	r0, r6
 80029bc:	d009      	beq.n	80029d2 <HAL_GPIO_DeInit+0x8a>
 80029be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80029c2:	42b0      	cmp	r0, r6
 80029c4:	d007      	beq.n	80029d6 <HAL_GPIO_DeInit+0x8e>
 80029c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80029ca:	42b0      	cmp	r0, r6
 80029cc:	d0be      	beq.n	800294c <HAL_GPIO_DeInit+0x4>
 80029ce:	2604      	movs	r6, #4
 80029d0:	e7bf      	b.n	8002952 <HAL_GPIO_DeInit+0xa>
 80029d2:	2601      	movs	r6, #1
 80029d4:	e7bd      	b.n	8002952 <HAL_GPIO_DeInit+0xa>
 80029d6:	2602      	movs	r6, #2
 80029d8:	e7bb      	b.n	8002952 <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80029da:	4d16      	ldr	r5, [pc, #88]	; (8002a34 <HAL_GPIO_DeInit+0xec>)
 80029dc:	f10c 0402 	add.w	r4, ip, #2
 80029e0:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80029e4:	ea26 0607 	bic.w	r6, r6, r7
 80029e8:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80029ec:	4c13      	ldr	r4, [pc, #76]	; (8002a3c <HAL_GPIO_DeInit+0xf4>)
 80029ee:	6826      	ldr	r6, [r4, #0]
 80029f0:	43dd      	mvns	r5, r3
 80029f2:	402e      	ands	r6, r5
 80029f4:	6026      	str	r6, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80029f6:	6866      	ldr	r6, [r4, #4]
 80029f8:	402e      	ands	r6, r5
 80029fa:	6066      	str	r6, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80029fc:	68a6      	ldr	r6, [r4, #8]
 80029fe:	402e      	ands	r6, r5
 8002a00:	60a6      	str	r6, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002a02:	68e6      	ldr	r6, [r4, #12]
 8002a04:	4035      	ands	r5, r6
 8002a06:	60e5      	str	r5, [r4, #12]
 8002a08:	e7a7      	b.n	800295a <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a0a:	f100 0c04 	add.w	ip, r0, #4
 8002a0e:	e7a7      	b.n	8002960 <HAL_GPIO_DeInit+0x18>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a10:	f1a2 0508 	sub.w	r5, r2, #8
 8002a14:	00af      	lsls	r7, r5, #2
 8002a16:	e7a6      	b.n	8002966 <HAL_GPIO_DeInit+0x1e>
  }
}
 8002a18:	bcf0      	pop	{r4, r5, r6, r7}
 8002a1a:	4770      	bx	lr
    position++;
 8002a1c:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8002a1e:	fa31 f302 	lsrs.w	r3, r1, r2
 8002a22:	d005      	beq.n	8002a30 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a24:	2301      	movs	r3, #1
 8002a26:	4093      	lsls	r3, r2
    if (iocurrent)
 8002a28:	400b      	ands	r3, r1
 8002a2a:	d0f7      	beq.n	8002a1c <HAL_GPIO_DeInit+0xd4>
{
 8002a2c:	b4f0      	push	{r4, r5, r6, r7}
 8002a2e:	e7b1      	b.n	8002994 <HAL_GPIO_DeInit+0x4c>
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40010800 	.word	0x40010800
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a40:	6883      	ldr	r3, [r0, #8]
 8002a42:	4219      	tst	r1, r3
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a46:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002a48:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	4770      	bx	lr

08002a4e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a4e:	b912      	cbnz	r2, 8002a56 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a50:	0409      	lsls	r1, r1, #16
 8002a52:	6101      	str	r1, [r0, #16]
  }
}
 8002a54:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	6101      	str	r1, [r0, #16]
 8002a58:	4770      	bx	lr

08002a5a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002a62:	d011      	beq.n	8002a88 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a78:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002a7a:	f042 0204 	orr.w	r2, r2, #4
 8002a7e:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8002a84:	2001      	movs	r0, #1
 8002a86:	4770      	bx	lr
  }
  return HAL_OK;
 8002a88:	2000      	movs	r0, #0
}
 8002a8a:	4770      	bx	lr

08002a8c <I2C_WaitOnFlagUntilTimeout>:
{
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	4606      	mov	r6, r0
 8002a90:	460c      	mov	r4, r1
 8002a92:	4617      	mov	r7, r2
 8002a94:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a96:	e022      	b.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a98:	f7ff fa5c 	bl	8001f54 <HAL_GetTick>
 8002a9c:	9b06      	ldr	r3, [sp, #24]
 8002a9e:	1ac0      	subs	r0, r0, r3
 8002aa0:	42a8      	cmp	r0, r5
 8002aa2:	d800      	bhi.n	8002aa6 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002aa4:	b9dd      	cbnz	r5, 8002ade <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ab0:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002ab6:	f042 0220 	orr.w	r2, r2, #32
 8002aba:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002abc:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	e01a      	b.n	8002afa <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac4:	6833      	ldr	r3, [r6, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	ea24 0303 	bic.w	r3, r4, r3
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	429f      	cmp	r7, r3
 8002ad6:	d10f      	bne.n	8002af8 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002ad8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002adc:	d1dc      	bne.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ade:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d0ee      	beq.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0x38>
 8002ae6:	6833      	ldr	r3, [r6, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	ea24 0303 	bic.w	r3, r4, r3
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	e7ed      	b.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8002af8:	2000      	movs	r0, #0
}
 8002afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002afc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	4604      	mov	r4, r0
 8002b00:	460d      	mov	r5, r1
 8002b02:	4616      	mov	r6, r2
 8002b04:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b06:	e03c      	b.n	8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b16:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b28:	f042 0204 	orr.w	r2, r2, #4
 8002b2c:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002b2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8002b32:	2001      	movs	r0, #1
 8002b34:	e033      	b.n	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7ff fa0d 	bl	8001f54 <HAL_GetTick>
 8002b3a:	1bc0      	subs	r0, r0, r7
 8002b3c:	42b0      	cmp	r0, r6
 8002b3e:	d800      	bhi.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8002b40:	b9fe      	cbnz	r6, 8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b46:	2220      	movs	r2, #32
 8002b48:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b52:	f042 0220 	orr.w	r2, r2, #32
 8002b56:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	e01e      	b.n	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	ea25 0303 	bic.w	r3, r5, r3
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3300      	adds	r3, #0
 8002b6c:	bf18      	it	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	b1a3      	cbz	r3, 8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b7a:	d1c5      	bne.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002b80:	d1d9      	bne.n	8002b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b82:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d0ea      	beq.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	ea25 0303 	bic.w	r3, r5, r3
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3300      	adds	r3, #0
 8002b96:	bf18      	it	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	e7e9      	b.n	8002b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8002b9c:	2000      	movs	r0, #0
}
 8002b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ba0 <I2C_MasterRequestWrite>:
{
 8002ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	460f      	mov	r7, r1
 8002ba8:	4615      	mov	r5, r2
 8002baa:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d00d      	beq.n	8002bce <I2C_MasterRequestWrite+0x2e>
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d00b      	beq.n	8002bce <I2C_MasterRequestWrite+0x2e>
 8002bb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bba:	d008      	beq.n	8002bce <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bbc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002bbe:	2b12      	cmp	r3, #18
 8002bc0:	d10a      	bne.n	8002bd8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc2:	6802      	ldr	r2, [r0, #0]
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e004      	b.n	8002bd8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	6813      	ldr	r3, [r2, #0]
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd8:	9600      	str	r6, [sp, #0]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff ff52 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002be8:	b158      	cbz	r0, 8002c02 <I2C_MasterRequestWrite+0x62>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002bf2:	d02b      	beq.n	8002c4c <I2C_MasterRequestWrite+0xac>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	b003      	add	sp, #12
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c02:	6923      	ldr	r3, [r4, #16]
 8002c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c08:	d10e      	bne.n	8002c28 <I2C_MasterRequestWrite+0x88>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002c10:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c12:	4633      	mov	r3, r6
 8002c14:	462a      	mov	r2, r5
 8002c16:	490f      	ldr	r1, [pc, #60]	; (8002c54 <I2C_MasterRequestWrite+0xb4>)
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff ff6f 	bl	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2800      	cmp	r0, #0
 8002c22:	d0eb      	beq.n	8002bfc <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e7e9      	b.n	8002bfc <I2C_MasterRequestWrite+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c28:	11fb      	asrs	r3, r7, #7
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	f003 0306 	and.w	r3, r3, #6
 8002c30:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002c34:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c36:	4633      	mov	r3, r6
 8002c38:	462a      	mov	r2, r5
 8002c3a:	4907      	ldr	r1, [pc, #28]	; (8002c58 <I2C_MasterRequestWrite+0xb8>)
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff ff5d 	bl	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c42:	b928      	cbnz	r0, 8002c50 <I2C_MasterRequestWrite+0xb0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	b2ff      	uxtb	r7, r7
 8002c48:	611f      	str	r7, [r3, #16]
 8002c4a:	e7e2      	b.n	8002c12 <I2C_MasterRequestWrite+0x72>
    return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e7d5      	b.n	8002bfc <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e7d3      	b.n	8002bfc <I2C_MasterRequestWrite+0x5c>
 8002c54:	00010002 	.word	0x00010002
 8002c58:	00010008 	.word	0x00010008

08002c5c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4604      	mov	r4, r0
 8002c60:	460d      	mov	r5, r1
 8002c62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c6c:	d11c      	bne.n	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff fef3 	bl	8002a5a <I2C_IsAcknowledgeFailed>
 8002c74:	b9d0      	cbnz	r0, 8002cac <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002c76:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002c7a:	d0f3      	beq.n	8002c64 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7c:	f7ff f96a 	bl	8001f54 <HAL_GetTick>
 8002c80:	1b80      	subs	r0, r0, r6
 8002c82:	42a8      	cmp	r0, r5
 8002c84:	d801      	bhi.n	8002c8a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002c86:	2d00      	cmp	r5, #0
 8002c88:	d1ec      	bne.n	8002c64 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c9a:	f042 0220 	orr.w	r2, r2, #32
 8002c9e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ca0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e000      	b.n	8002caa <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002ca8:	2000      	movs	r0, #0
}
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002cac:	2001      	movs	r0, #1
 8002cae:	e7fc      	b.n	8002caa <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08002cb0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	460d      	mov	r5, r1
 8002cb6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f013 0f04 	tst.w	r3, #4
 8002cc0:	d11c      	bne.n	8002cfc <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f7ff fec9 	bl	8002a5a <I2C_IsAcknowledgeFailed>
 8002cc8:	b9d0      	cbnz	r0, 8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002cce:	d0f3      	beq.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd0:	f7ff f940 	bl	8001f54 <HAL_GetTick>
 8002cd4:	1b80      	subs	r0, r0, r6
 8002cd6:	42a8      	cmp	r0, r5
 8002cd8:	d801      	bhi.n	8002cde <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002cda:	2d00      	cmp	r5, #0
 8002cdc:	d1ec      	bne.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cee:	f042 0220 	orr.w	r2, r2, #32
 8002cf2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002cf4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	e000      	b.n	8002cfe <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002cfc:	2000      	movs	r0, #0
}
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002d00:	2001      	movs	r0, #1
 8002d02:	e7fc      	b.n	8002cfe <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002d04 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002d04:	2800      	cmp	r0, #0
 8002d06:	f000 80c8 	beq.w	8002e9a <HAL_I2C_Init+0x196>
{
 8002d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d075      	beq.n	8002e02 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d16:	2324      	movs	r3, #36	; 0x24
 8002d18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002d1c:	6822      	ldr	r2, [r4, #0]
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d26:	6822      	ldr	r2, [r4, #0]
 8002d28:	6813      	ldr	r3, [r2, #0]
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d38:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d3a:	f000 fca1 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d3e:	6862      	ldr	r2, [r4, #4]
 8002d40:	4b58      	ldr	r3, [pc, #352]	; (8002ea4 <HAL_I2C_Init+0x1a0>)
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d862      	bhi.n	8002e0c <HAL_I2C_Init+0x108>
 8002d46:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <HAL_I2C_Init+0x1a4>)
 8002d48:	4298      	cmp	r0, r3
 8002d4a:	bf8c      	ite	hi
 8002d4c:	2300      	movhi	r3, #0
 8002d4e:	2301      	movls	r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 80a4 	bne.w	8002e9e <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8002d56:	4b55      	ldr	r3, [pc, #340]	; (8002eac <HAL_I2C_Init+0x1a8>)
 8002d58:	fba3 2300 	umull	r2, r3, r3, r0
 8002d5c:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d5e:	6821      	ldr	r1, [r4, #0]
 8002d60:	684a      	ldr	r2, [r1, #4]
 8002d62:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d66:	431a      	orrs	r2, r3
 8002d68:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d6a:	6825      	ldr	r5, [r4, #0]
 8002d6c:	6a2a      	ldr	r2, [r5, #32]
 8002d6e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d72:	6866      	ldr	r6, [r4, #4]
 8002d74:	494b      	ldr	r1, [pc, #300]	; (8002ea4 <HAL_I2C_Init+0x1a0>)
 8002d76:	428e      	cmp	r6, r1
 8002d78:	d84e      	bhi.n	8002e18 <HAL_I2C_Init+0x114>
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d80:	6825      	ldr	r5, [r4, #0]
 8002d82:	69e9      	ldr	r1, [r5, #28]
 8002d84:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002d88:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002d8c:	6863      	ldr	r3, [r4, #4]
 8002d8e:	4a45      	ldr	r2, [pc, #276]	; (8002ea4 <HAL_I2C_Init+0x1a0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d84b      	bhi.n	8002e2c <HAL_I2C_Init+0x128>
 8002d94:	3801      	subs	r0, #1
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf38      	it	cc
 8002da6:	2304      	movcc	r3, #4
 8002da8:	430b      	orrs	r3, r1
 8002daa:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dac:	6821      	ldr	r1, [r4, #0]
 8002dae:	680b      	ldr	r3, [r1, #0]
 8002db0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002db4:	69e2      	ldr	r2, [r4, #28]
 8002db6:	6a20      	ldr	r0, [r4, #32]
 8002db8:	4302      	orrs	r2, r0
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dbe:	6821      	ldr	r1, [r4, #0]
 8002dc0:	688b      	ldr	r3, [r1, #8]
 8002dc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dca:	6922      	ldr	r2, [r4, #16]
 8002dcc:	68e0      	ldr	r0, [r4, #12]
 8002dce:	4302      	orrs	r2, r0
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd4:	6821      	ldr	r1, [r4, #0]
 8002dd6:	68cb      	ldr	r3, [r1, #12]
 8002dd8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ddc:	6962      	ldr	r2, [r4, #20]
 8002dde:	69a0      	ldr	r0, [r4, #24]
 8002de0:	4302      	orrs	r2, r0
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002de6:	6822      	ldr	r2, [r4, #0]
 8002de8:	6813      	ldr	r3, [r2, #0]
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	2000      	movs	r0, #0
 8002df2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002df4:	2320      	movs	r3, #32
 8002df6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002e02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002e06:	f7fe ffa5 	bl	8001d54 <HAL_I2C_MspInit>
 8002e0a:	e784      	b.n	8002d16 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e0c:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_I2C_Init+0x1ac>)
 8002e0e:	4298      	cmp	r0, r3
 8002e10:	bf8c      	ite	hi
 8002e12:	2300      	movhi	r3, #0
 8002e14:	2301      	movls	r3, #1
 8002e16:	e79b      	b.n	8002d50 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e18:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4924      	ldr	r1, [pc, #144]	; (8002eb4 <HAL_I2C_Init+0x1b0>)
 8002e22:	fba1 1303 	umull	r1, r3, r1, r3
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	3301      	adds	r3, #1
 8002e2a:	e7a7      	b.n	8002d7c <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e2c:	68a2      	ldr	r2, [r4, #8]
 8002e2e:	b9ba      	cbnz	r2, 8002e60 <HAL_I2C_Init+0x15c>
 8002e30:	1e46      	subs	r6, r0, #1
 8002e32:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8002e36:	fbb6 f6f7 	udiv	r6, r6, r7
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002e40:	fab6 f686 	clz	r6, r6
 8002e44:	0976      	lsrs	r6, r6, #5
 8002e46:	bb36      	cbnz	r6, 8002e96 <HAL_I2C_Init+0x192>
 8002e48:	b9c2      	cbnz	r2, 8002e7c <HAL_I2C_Init+0x178>
 8002e4a:	3801      	subs	r0, #1
 8002e4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002e5a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002e5e:	e7a3      	b.n	8002da8 <HAL_I2C_Init+0xa4>
 8002e60:	1e46      	subs	r6, r0, #1
 8002e62:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8002e66:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002e6a:	fbb6 f6f7 	udiv	r6, r6, r7
 8002e6e:	3601      	adds	r6, #1
 8002e70:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002e74:	fab6 f686 	clz	r6, r6
 8002e78:	0976      	lsrs	r6, r6, #5
 8002e7a:	e7e4      	b.n	8002e46 <HAL_I2C_Init+0x142>
 8002e7c:	3801      	subs	r0, #1
 8002e7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e86:	fbb0 f2f3 	udiv	r2, r0, r3
 8002e8a:	3201      	adds	r2, #1
 8002e8c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002e90:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002e94:	e788      	b.n	8002da8 <HAL_I2C_Init+0xa4>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e786      	b.n	8002da8 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8002e9a:	2001      	movs	r0, #1
}
 8002e9c:	4770      	bx	lr
    return HAL_ERROR;
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	e7ae      	b.n	8002e00 <HAL_I2C_Init+0xfc>
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	431bde83 	.word	0x431bde83
 8002eb0:	003d08ff 	.word	0x003d08ff
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002eb8:	b1a8      	cbz	r0, 8002ee6 <HAL_I2C_DeInit+0x2e>
{
 8002eba:	b510      	push	{r4, lr}
 8002ebc:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebe:	2324      	movs	r3, #36	; 0x24
 8002ec0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002ec4:	6802      	ldr	r2, [r0, #0]
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002ece:	f7fe ff73 	bl	8001db8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002ed6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eda:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002edc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8002ee0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002ee4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ee6:	2001      	movs	r0, #1
}
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_I2C_Master_Transmit>:
{
 8002eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	460e      	mov	r6, r1
 8002ef6:	4690      	mov	r8, r2
 8002ef8:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8002efa:	f7ff f82b 	bl	8001f54 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d004      	beq.n	8002f12 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8002f08:	2602      	movs	r6, #2
}
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	b004      	add	sp, #16
 8002f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f12:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f14:	9000      	str	r0, [sp, #0]
 8002f16:	2319      	movs	r3, #25
 8002f18:	2201      	movs	r2, #1
 8002f1a:	494f      	ldr	r1, [pc, #316]	; (8003058 <HAL_I2C_Master_Transmit+0x16c>)
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f7ff fdb5 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	f040 8091 	bne.w	800304a <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8002f28:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	f000 808e 	beq.w	800304e <HAL_I2C_Master_Transmit+0x162>
 8002f32:	2301      	movs	r3, #1
 8002f34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	f012 0f01 	tst.w	r2, #1
 8002f40:	d103      	bne.n	8002f4a <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	6813      	ldr	r3, [r2, #0]
 8002f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f52:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f54:	2321      	movs	r3, #33	; 0x21
 8002f56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002f64:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f68:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f6c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_I2C_Master_Transmit+0x170>)
 8002f70:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f72:	462b      	mov	r3, r5
 8002f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f76:	4631      	mov	r1, r6
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f7ff fe11 	bl	8002ba0 <I2C_MasterRequestWrite>
 8002f7e:	4606      	mov	r6, r0
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d166      	bne.n	8003052 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f84:	2300      	movs	r3, #0
 8002f86:	9303      	str	r3, [sp, #12]
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	9203      	str	r2, [sp, #12]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	9303      	str	r3, [sp, #12]
 8002f92:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002f94:	e012      	b.n	8002fbc <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8002f9c:	2601      	movs	r6, #1
 8002f9e:	e7b4      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa8:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8002faa:	2601      	movs	r6, #1
 8002fac:	e7ad      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fae:	462a      	mov	r2, r5
 8002fb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7ff fe7c 	bl	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d12c      	bne.n	8003016 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8002fbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d035      	beq.n	800302e <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc2:	462a      	mov	r2, r5
 8002fc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f7ff fe48 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	d1e2      	bne.n	8002f96 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002fd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fda:	1c4b      	adds	r3, r1, #1
 8002fdc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002fde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002fe6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	6950      	ldr	r0, [r2, #20]
 8002ff2:	f010 0f04 	tst.w	r0, #4
 8002ff6:	d0da      	beq.n	8002fae <HAL_I2C_Master_Transmit+0xc2>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0d8      	beq.n	8002fae <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ffc:	784b      	ldrb	r3, [r1, #1]
 8002ffe:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003002:	3301      	adds	r3, #1
 8003004:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003006:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003008:	3b01      	subs	r3, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800300e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	8523      	strh	r3, [r4, #40]	; 0x28
 8003014:	e7cb      	b.n	8002fae <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003018:	2b04      	cmp	r3, #4
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 800301c:	2601      	movs	r6, #1
 800301e:	e774      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	6822      	ldr	r2, [r4, #0]
 8003022:	6813      	ldr	r3, [r2, #0]
 8003024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003028:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800302a:	2601      	movs	r6, #1
 800302c:	e76d      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302e:	6822      	ldr	r2, [r4, #0]
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003036:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	2320      	movs	r3, #32
 800303a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800303e:	2300      	movs	r3, #0
 8003040:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003044:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003048:	e75f      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 800304a:	2602      	movs	r6, #2
 800304c:	e75d      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800304e:	2602      	movs	r6, #2
 8003050:	e75b      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8003052:	2601      	movs	r6, #1
 8003054:	e759      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1e>
 8003056:	bf00      	nop
 8003058:	00100002 	.word	0x00100002
 800305c:	ffff0000 	.word	0xffff0000

08003060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003060:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <RCC_Delay+0x24>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <RCC_Delay+0x28>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	0a5b      	lsrs	r3, r3, #9
 800306e:	fb00 f003 	mul.w	r0, r0, r3
 8003072:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8003074:	bf00      	nop
  }
  while (Delay --);
 8003076:	9b01      	ldr	r3, [sp, #4]
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	9201      	str	r2, [sp, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f9      	bne.n	8003074 <RCC_Delay+0x14>
}
 8003080:	b002      	add	sp, #8
 8003082:	4770      	bx	lr
 8003084:	20000010 	.word	0x20000010
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800308c:	2800      	cmp	r0, #0
 800308e:	f000 81f5 	beq.w	800347c <HAL_RCC_OscConfig+0x3f0>
{
 8003092:	b570      	push	{r4, r5, r6, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003098:	6803      	ldr	r3, [r0, #0]
 800309a:	f013 0f01 	tst.w	r3, #1
 800309e:	d02c      	beq.n	80030fa <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a0:	4bab      	ldr	r3, [pc, #684]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d01d      	beq.n	80030e8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ac:	4ba8      	ldr	r3, [pc, #672]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d012      	beq.n	80030de <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b8:	6863      	ldr	r3, [r4, #4]
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030be:	d041      	beq.n	8003144 <HAL_RCC_OscConfig+0xb8>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d155      	bne.n	8003170 <HAL_RCC_OscConfig+0xe4>
 80030c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e037      	b.n	800314e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030de:	4b9c      	ldr	r3, [pc, #624]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80030e6:	d0e7      	beq.n	80030b8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b99      	ldr	r3, [pc, #612]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_OscConfig+0x6e>
 80030f2:	6863      	ldr	r3, [r4, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 81c3 	beq.w	8003480 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	f013 0f02 	tst.w	r3, #2
 8003100:	d076      	beq.n	80031f0 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003102:	4b93      	ldr	r3, [pc, #588]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f013 0f0c 	tst.w	r3, #12
 800310a:	d05f      	beq.n	80031cc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800310c:	4b90      	ldr	r3, [pc, #576]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d054      	beq.n	80031c2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003118:	6923      	ldr	r3, [r4, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 808a 	beq.w	8003234 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003120:	4b8c      	ldr	r3, [pc, #560]	; (8003354 <HAL_RCC_OscConfig+0x2c8>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003126:	f7fe ff15 	bl	8001f54 <HAL_GetTick>
 800312a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	4b88      	ldr	r3, [pc, #544]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f013 0f02 	tst.w	r3, #2
 8003134:	d175      	bne.n	8003222 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003136:	f7fe ff0d 	bl	8001f54 <HAL_GetTick>
 800313a:	1b40      	subs	r0, r0, r5
 800313c:	2802      	cmp	r0, #2
 800313e:	d9f5      	bls.n	800312c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003140:	2003      	movs	r0, #3
 8003142:	e1a0      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003144:	4a82      	ldr	r2, [pc, #520]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800314e:	6863      	ldr	r3, [r4, #4]
 8003150:	b343      	cbz	r3, 80031a4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003152:	f7fe feff 	bl	8001f54 <HAL_GetTick>
 8003156:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003158:	4b7d      	ldr	r3, [pc, #500]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003160:	d1cb      	bne.n	80030fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003162:	f7fe fef7 	bl	8001f54 <HAL_GetTick>
 8003166:	1b40      	subs	r0, r0, r5
 8003168:	2864      	cmp	r0, #100	; 0x64
 800316a:	d9f5      	bls.n	8003158 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800316c:	2003      	movs	r0, #3
 800316e:	e18a      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003174:	d009      	beq.n	800318a <HAL_RCC_OscConfig+0xfe>
 8003176:	4b76      	ldr	r3, [pc, #472]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e7e1      	b.n	800314e <HAL_RCC_OscConfig+0xc2>
 800318a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800318e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e7d4      	b.n	800314e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80031a4:	f7fe fed6 	bl	8001f54 <HAL_GetTick>
 80031a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	4b69      	ldr	r3, [pc, #420]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80031b2:	d0a2      	beq.n	80030fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe fece 	bl	8001f54 <HAL_GetTick>
 80031b8:	1b40      	subs	r0, r0, r5
 80031ba:	2864      	cmp	r0, #100	; 0x64
 80031bc:	d9f5      	bls.n	80031aa <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80031be:	2003      	movs	r0, #3
 80031c0:	e161      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031c2:	4b63      	ldr	r3, [pc, #396]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80031ca:	d1a5      	bne.n	8003118 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031cc:	4b60      	ldr	r3, [pc, #384]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f013 0f02 	tst.w	r3, #2
 80031d4:	d004      	beq.n	80031e0 <HAL_RCC_OscConfig+0x154>
 80031d6:	6923      	ldr	r3, [r4, #16]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 80031dc:	2001      	movs	r0, #1
 80031de:	e152      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e0:	4a5b      	ldr	r2, [pc, #364]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80031e8:	6961      	ldr	r1, [r4, #20]
 80031ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031ee:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f013 0f08 	tst.w	r3, #8
 80031f6:	d032      	beq.n	800325e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f8:	69a3      	ldr	r3, [r4, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d05b      	beq.n	80032b6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b56      	ldr	r3, [pc, #344]	; (8003358 <HAL_RCC_OscConfig+0x2cc>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003204:	f7fe fea6 	bl	8001f54 <HAL_GetTick>
 8003208:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	f013 0f02 	tst.w	r3, #2
 8003212:	d121      	bne.n	8003258 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003214:	f7fe fe9e 	bl	8001f54 <HAL_GetTick>
 8003218:	1b40      	subs	r0, r0, r5
 800321a:	2802      	cmp	r0, #2
 800321c:	d9f5      	bls.n	800320a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800321e:	2003      	movs	r0, #3
 8003220:	e131      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4a4b      	ldr	r2, [pc, #300]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800322a:	6961      	ldr	r1, [r4, #20]
 800322c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e7dd      	b.n	80031f0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_OscConfig+0x2c8>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800323a:	f7fe fe8b 	bl	8001f54 <HAL_GetTick>
 800323e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003240:	4b43      	ldr	r3, [pc, #268]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f013 0f02 	tst.w	r3, #2
 8003248:	d0d2      	beq.n	80031f0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7fe fe83 	bl	8001f54 <HAL_GetTick>
 800324e:	1b40      	subs	r0, r0, r5
 8003250:	2802      	cmp	r0, #2
 8003252:	d9f5      	bls.n	8003240 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003254:	2003      	movs	r0, #3
 8003256:	e116      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8003258:	2001      	movs	r0, #1
 800325a:	f7ff ff01 	bl	8003060 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	f013 0f04 	tst.w	r3, #4
 8003264:	f000 8098 	beq.w	8003398 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003268:	4b39      	ldr	r3, [pc, #228]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003270:	d133      	bne.n	80032da <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800327a:	61da      	str	r2, [r3, #28]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003286:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	4b34      	ldr	r3, [pc, #208]	; (800335c <HAL_RCC_OscConfig+0x2d0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003290:	d025      	beq.n	80032de <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003292:	68e3      	ldr	r3, [r4, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d036      	beq.n	8003306 <HAL_RCC_OscConfig+0x27a>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d14c      	bne.n	8003336 <HAL_RCC_OscConfig+0x2aa>
 800329c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80032a4:	6a1a      	ldr	r2, [r3, #32]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	621a      	str	r2, [r3, #32]
 80032ac:	6a1a      	ldr	r2, [r3, #32]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	621a      	str	r2, [r3, #32]
 80032b4:	e02c      	b.n	8003310 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 80032b6:	4b28      	ldr	r3, [pc, #160]	; (8003358 <HAL_RCC_OscConfig+0x2cc>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80032bc:	f7fe fe4a 	bl	8001f54 <HAL_GetTick>
 80032c0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	f013 0f02 	tst.w	r3, #2
 80032ca:	d0c8      	beq.n	800325e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7fe fe42 	bl	8001f54 <HAL_GetTick>
 80032d0:	1b40      	subs	r0, r0, r5
 80032d2:	2802      	cmp	r0, #2
 80032d4:	d9f5      	bls.n	80032c2 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 80032d6:	2003      	movs	r0, #3
 80032d8:	e0d5      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 80032da:	2500      	movs	r5, #0
 80032dc:	e7d4      	b.n	8003288 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4a1f      	ldr	r2, [pc, #124]	; (800335c <HAL_RCC_OscConfig+0x2d0>)
 80032e0:	6813      	ldr	r3, [r2, #0]
 80032e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032e8:	f7fe fe34 	bl	8001f54 <HAL_GetTick>
 80032ec:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ee:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_RCC_OscConfig+0x2d0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032f6:	d1cc      	bne.n	8003292 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fe fe2c 	bl	8001f54 <HAL_GetTick>
 80032fc:	1b80      	subs	r0, r0, r6
 80032fe:	2864      	cmp	r0, #100	; 0x64
 8003300:	d9f5      	bls.n	80032ee <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8003302:	2003      	movs	r0, #3
 8003304:	e0bf      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 8003308:	6a13      	ldr	r3, [r2, #32]
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003310:	68e3      	ldr	r3, [r4, #12]
 8003312:	b37b      	cbz	r3, 8003374 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8003314:	f7fe fe1e 	bl	8001f54 <HAL_GetTick>
 8003318:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f013 0f02 	tst.w	r3, #2
 8003322:	d138      	bne.n	8003396 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7fe fe16 	bl	8001f54 <HAL_GetTick>
 8003328:	1b80      	subs	r0, r0, r6
 800332a:	f241 3388 	movw	r3, #5000	; 0x1388
 800332e:	4298      	cmp	r0, r3
 8003330:	d9f3      	bls.n	800331a <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8003332:	2003      	movs	r0, #3
 8003334:	e0a7      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003336:	2b05      	cmp	r3, #5
 8003338:	d012      	beq.n	8003360 <HAL_RCC_OscConfig+0x2d4>
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_OscConfig+0x2c4>)
 800333c:	6a1a      	ldr	r2, [r3, #32]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	621a      	str	r2, [r3, #32]
 8003344:	6a1a      	ldr	r2, [r3, #32]
 8003346:	f022 0204 	bic.w	r2, r2, #4
 800334a:	621a      	str	r2, [r3, #32]
 800334c:	e7e0      	b.n	8003310 <HAL_RCC_OscConfig+0x284>
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	42420000 	.word	0x42420000
 8003358:	42420480 	.word	0x42420480
 800335c:	40007000 	.word	0x40007000
 8003360:	4b4c      	ldr	r3, [pc, #304]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 8003362:	6a1a      	ldr	r2, [r3, #32]
 8003364:	f042 0204 	orr.w	r2, r2, #4
 8003368:	621a      	str	r2, [r3, #32]
 800336a:	6a1a      	ldr	r2, [r3, #32]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	621a      	str	r2, [r3, #32]
 8003372:	e7cd      	b.n	8003310 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8003374:	f7fe fdee 	bl	8001f54 <HAL_GetTick>
 8003378:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337a:	4b46      	ldr	r3, [pc, #280]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f013 0f02 	tst.w	r3, #2
 8003382:	d008      	beq.n	8003396 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe fde6 	bl	8001f54 <HAL_GetTick>
 8003388:	1b80      	subs	r0, r0, r6
 800338a:	f241 3388 	movw	r3, #5000	; 0x1388
 800338e:	4298      	cmp	r0, r3
 8003390:	d9f3      	bls.n	800337a <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8003392:	2003      	movs	r0, #3
 8003394:	e077      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8003396:	b9e5      	cbnz	r5, 80033d2 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003398:	69e3      	ldr	r3, [r4, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d072      	beq.n	8003484 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800339e:	4a3d      	ldr	r2, [pc, #244]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 80033a0:	6852      	ldr	r2, [r2, #4]
 80033a2:	f002 020c 	and.w	r2, r2, #12
 80033a6:	2a08      	cmp	r2, #8
 80033a8:	d056      	beq.n	8003458 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d017      	beq.n	80033de <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 80033ae:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCC_OscConfig+0x40c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033b4:	f7fe fdce 	bl	8001f54 <HAL_GetTick>
 80033b8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ba:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033c2:	d047      	beq.n	8003454 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fdc6 	bl	8001f54 <HAL_GetTick>
 80033c8:	1b00      	subs	r0, r0, r4
 80033ca:	2802      	cmp	r0, #2
 80033cc:	d9f5      	bls.n	80033ba <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 80033ce:	2003      	movs	r0, #3
 80033d0:	e059      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d2:	4a30      	ldr	r2, [pc, #192]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 80033d4:	69d3      	ldr	r3, [r2, #28]
 80033d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033da:	61d3      	str	r3, [r2, #28]
 80033dc:	e7dc      	b.n	8003398 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_RCC_OscConfig+0x40c>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033e4:	f7fe fdb6 	bl	8001f54 <HAL_GetTick>
 80033e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033f2:	d006      	beq.n	8003402 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fe fdae 	bl	8001f54 <HAL_GetTick>
 80033f8:	1b40      	subs	r0, r0, r5
 80033fa:	2802      	cmp	r0, #2
 80033fc:	d9f5      	bls.n	80033ea <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80033fe:	2003      	movs	r0, #3
 8003400:	e041      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003402:	6a23      	ldr	r3, [r4, #32]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d01a      	beq.n	8003440 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340a:	4922      	ldr	r1, [pc, #136]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 800340c:	684b      	ldr	r3, [r1, #4]
 800340e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003412:	6a22      	ldr	r2, [r4, #32]
 8003414:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003416:	4302      	orrs	r2, r0
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCC_OscConfig+0x40c>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003422:	f7fe fd97 	bl	8001f54 <HAL_GetTick>
 8003426:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003428:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003430:	d10e      	bne.n	8003450 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003432:	f7fe fd8f 	bl	8001f54 <HAL_GetTick>
 8003436:	1b00      	subs	r0, r0, r4
 8003438:	2802      	cmp	r0, #2
 800343a:	d9f5      	bls.n	8003428 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 800343c:	2003      	movs	r0, #3
 800343e:	e022      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 8003442:	6853      	ldr	r3, [r2, #4]
 8003444:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003448:	68a1      	ldr	r1, [r4, #8]
 800344a:	430b      	orrs	r3, r1
 800344c:	6053      	str	r3, [r2, #4]
 800344e:	e7dc      	b.n	800340a <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8003450:	2000      	movs	r0, #0
 8003452:	e018      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
 8003454:	2000      	movs	r0, #0
 8003456:	e016      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	2b01      	cmp	r3, #1
 800345a:	d016      	beq.n	800348a <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <HAL_RCC_OscConfig+0x408>)
 800345e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003464:	6a22      	ldr	r2, [r4, #32]
 8003466:	4291      	cmp	r1, r2
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 800346a:	2001      	movs	r0, #1
 800346c:	e00b      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800346e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003472:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003474:	4293      	cmp	r3, r2
 8003476:	d00a      	beq.n	800348e <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8003478:	2001      	movs	r0, #1
 800347a:	e004      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
}
 800347e:	4770      	bx	lr
        return HAL_ERROR;
 8003480:	2001      	movs	r0, #1
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8003484:	2000      	movs	r0, #0
}
 8003486:	b002      	add	sp, #8
 8003488:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
 800348c:	e7fb      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 800348e:	2000      	movs	r0, #0
 8003490:	e7f9      	b.n	8003486 <HAL_RCC_OscConfig+0x3fa>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	42420060 	.word	0x42420060

0800349c <HAL_RCC_GetSysClockFreq>:
{
 800349c:	b410      	push	{r4}
 800349e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034a0:	4c16      	ldr	r4, [pc, #88]	; (80034fc <HAL_RCC_GetSysClockFreq+0x60>)
 80034a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034a6:	f10d 0c18 	add.w	ip, sp, #24
 80034aa:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034ae:	8a23      	ldrh	r3, [r4, #16]
 80034b0:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_GetSysClockFreq+0x64>)
 80034b6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80034b8:	f003 020c 	and.w	r2, r3, #12
 80034bc:	2a08      	cmp	r2, #8
 80034be:	d11a      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034c0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80034c4:	4462      	add	r2, ip
 80034c6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80034ce:	d105      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034d0:	480c      	ldr	r0, [pc, #48]	; (8003504 <HAL_RCC_GetSysClockFreq+0x68>)
 80034d2:	fb00 f002 	mul.w	r0, r0, r2
}
 80034d6:	b007      	add	sp, #28
 80034d8:	bc10      	pop	{r4}
 80034da:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_RCC_GetSysClockFreq+0x64>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80034e4:	4463      	add	r3, ip
 80034e6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034ea:	4807      	ldr	r0, [pc, #28]	; (8003508 <HAL_RCC_GetSysClockFreq+0x6c>)
 80034ec:	fb00 f002 	mul.w	r0, r0, r2
 80034f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80034f4:	e7ef      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80034f6:	4804      	ldr	r0, [pc, #16]	; (8003508 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80034f8:	e7ed      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034fa:	bf00      	nop
 80034fc:	08003d50 	.word	0x08003d50
 8003500:	40021000 	.word	0x40021000
 8003504:	003d0900 	.word	0x003d0900
 8003508:	007a1200 	.word	0x007a1200

0800350c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800350c:	2800      	cmp	r0, #0
 800350e:	f000 80a3 	beq.w	8003658 <HAL_RCC_ClockConfig+0x14c>
{
 8003512:	b570      	push	{r4, r5, r6, lr}
 8003514:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003516:	4b52      	ldr	r3, [pc, #328]	; (8003660 <HAL_RCC_ClockConfig+0x154>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	428b      	cmp	r3, r1
 8003520:	d20c      	bcs.n	800353c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4a4f      	ldr	r2, [pc, #316]	; (8003660 <HAL_RCC_ClockConfig+0x154>)
 8003524:	6813      	ldr	r3, [r2, #0]
 8003526:	f023 0307 	bic.w	r3, r3, #7
 800352a:	430b      	orrs	r3, r1
 800352c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	6813      	ldr	r3, [r2, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	428b      	cmp	r3, r1
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8003538:	2001      	movs	r0, #1
}
 800353a:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	f013 0f02 	tst.w	r3, #2
 8003542:	d017      	beq.n	8003574 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	f013 0f04 	tst.w	r3, #4
 8003548:	d004      	beq.n	8003554 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354a:	4a46      	ldr	r2, [pc, #280]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 800354c:	6853      	ldr	r3, [r2, #4]
 800354e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003552:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	f013 0f08 	tst.w	r3, #8
 800355a:	d004      	beq.n	8003566 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800355c:	4a41      	ldr	r2, [pc, #260]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 800355e:	6853      	ldr	r3, [r2, #4]
 8003560:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003564:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003566:	4a3f      	ldr	r2, [pc, #252]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 8003568:	6853      	ldr	r3, [r2, #4]
 800356a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356e:	68a0      	ldr	r0, [r4, #8]
 8003570:	4303      	orrs	r3, r0
 8003572:	6053      	str	r3, [r2, #4]
 8003574:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	f013 0f01 	tst.w	r3, #1
 800357c:	d031      	beq.n	80035e2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	6863      	ldr	r3, [r4, #4]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003584:	2b02      	cmp	r3, #2
 8003586:	d025      	beq.n	80035d4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	4a36      	ldr	r2, [pc, #216]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	f012 0f02 	tst.w	r2, #2
 8003590:	d064      	beq.n	800365c <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003592:	4934      	ldr	r1, [pc, #208]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 8003594:	684a      	ldr	r2, [r1, #4]
 8003596:	f022 0203 	bic.w	r2, r2, #3
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800359e:	f7fe fcd9 	bl	8001f54 <HAL_GetTick>
 80035a2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a4:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	6862      	ldr	r2, [r4, #4]
 80035ae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80035b2:	d016      	beq.n	80035e2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7fe fcce 	bl	8001f54 <HAL_GetTick>
 80035b8:	1b80      	subs	r0, r0, r6
 80035ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80035be:	4298      	cmp	r0, r3
 80035c0:	d9f0      	bls.n	80035a4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80035c2:	2003      	movs	r0, #3
 80035c4:	e7b9      	b.n	800353a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4a27      	ldr	r2, [pc, #156]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80035ce:	d1e0      	bne.n	8003592 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80035d0:	2001      	movs	r0, #1
 80035d2:	e7b2      	b.n	800353a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d4:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80035dc:	d1d9      	bne.n	8003592 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80035de:	2001      	movs	r0, #1
 80035e0:	e7ab      	b.n	800353a <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e2:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_RCC_ClockConfig+0x154>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	42ab      	cmp	r3, r5
 80035ec:	d90c      	bls.n	8003608 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <HAL_RCC_ClockConfig+0x154>)
 80035f0:	6813      	ldr	r3, [r2, #0]
 80035f2:	f023 0307 	bic.w	r3, r3, #7
 80035f6:	432b      	orrs	r3, r5
 80035f8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	6813      	ldr	r3, [r2, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	42ab      	cmp	r3, r5
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8003604:	2001      	movs	r0, #1
 8003606:	e798      	b.n	800353a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	f013 0f04 	tst.w	r3, #4
 800360e:	d006      	beq.n	800361e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 8003612:	6853      	ldr	r3, [r2, #4]
 8003614:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003618:	68e1      	ldr	r1, [r4, #12]
 800361a:	430b      	orrs	r3, r1
 800361c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	f013 0f08 	tst.w	r3, #8
 8003624:	d007      	beq.n	8003636 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 8003628:	6853      	ldr	r3, [r2, #4]
 800362a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800362e:	6921      	ldr	r1, [r4, #16]
 8003630:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003634:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003636:	f7ff ff31 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x158>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x15c>)
 8003644:	5cd3      	ldrb	r3, [r2, r3]
 8003646:	40d8      	lsrs	r0, r3
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCC_ClockConfig+0x160>)
 800364a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCC_ClockConfig+0x164>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	f7fe fc3c 	bl	8001ecc <HAL_InitTick>
  return HAL_OK;
 8003654:	2000      	movs	r0, #0
 8003656:	e770      	b.n	800353a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003658:	2001      	movs	r0, #1
}
 800365a:	4770      	bx	lr
        return HAL_ERROR;
 800365c:	2001      	movs	r0, #1
 800365e:	e76c      	b.n	800353a <HAL_RCC_ClockConfig+0x2e>
 8003660:	40022000 	.word	0x40022000
 8003664:	40021000 	.word	0x40021000
 8003668:	08003d70 	.word	0x08003d70
 800366c:	20000010 	.word	0x20000010
 8003670:	20000018 	.word	0x20000018

08003674 <HAL_RCC_GetHCLKFreq>:
}
 8003674:	4b01      	ldr	r3, [pc, #4]	; (800367c <HAL_RCC_GetHCLKFreq+0x8>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000010 	.word	0x20000010

08003680 <HAL_RCC_GetPCLK1Freq>:
{
 8003680:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003682:	f7ff fff7 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800368e:	4a03      	ldr	r2, [pc, #12]	; (800369c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003690:	5cd3      	ldrb	r3, [r2, r3]
}
 8003692:	40d8      	lsrs	r0, r3
 8003694:	bd08      	pop	{r3, pc}
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
 800369c:	08003d80 	.word	0x08003d80

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036a6:	6803      	ldr	r3, [r0, #0]
 80036a8:	f013 0f01 	tst.w	r3, #1
 80036ac:	d034      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80036b6:	d148      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036c0:	61da      	str	r2, [r3, #28]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036cc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036d6:	d03a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036dc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80036e0:	d011      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x66>
 80036e2:	6862      	ldr	r2, [r4, #4]
 80036e4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d00c      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ec:	4a2e      	ldr	r2, [pc, #184]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80036ee:	6a13      	ldr	r3, [r2, #32]
 80036f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036f4:	492e      	ldr	r1, [pc, #184]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80036f6:	2601      	movs	r6, #1
 80036f8:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036fa:	2600      	movs	r6, #0
 80036fc:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036fe:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003700:	f013 0f01 	tst.w	r3, #1
 8003704:	d137      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003706:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003708:	6a13      	ldr	r3, [r2, #32]
 800370a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370e:	6861      	ldr	r1, [r4, #4]
 8003710:	430b      	orrs	r3, r1
 8003712:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003714:	2d00      	cmp	r5, #0
 8003716:	d13f      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	f013 0f02 	tst.w	r3, #2
 800371e:	d006      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003720:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003722:	6853      	ldr	r3, [r2, #4]
 8003724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003728:	68a1      	ldr	r1, [r4, #8]
 800372a:	430b      	orrs	r3, r1
 800372c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	f013 0f10 	tst.w	r3, #16
 8003734:	d035      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003738:	6853      	ldr	r3, [r2, #4]
 800373a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800373e:	68e1      	ldr	r1, [r4, #12]
 8003740:	430b      	orrs	r3, r1
 8003742:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003744:	2000      	movs	r0, #0
}
 8003746:	b002      	add	sp, #8
 8003748:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2500      	movs	r5, #0
 800374c:	e7bf      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800374e:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003750:	6813      	ldr	r3, [r2, #0]
 8003752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003756:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003758:	f7fe fbfc 	bl	8001f54 <HAL_GetTick>
 800375c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003766:	d1b7      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003768:	f7fe fbf4 	bl	8001f54 <HAL_GetTick>
 800376c:	1b80      	subs	r0, r0, r6
 800376e:	2864      	cmp	r0, #100	; 0x64
 8003770:	d9f5      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8003772:	2003      	movs	r0, #3
 8003774:	e7e7      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8003776:	f7fe fbed 	bl	8001f54 <HAL_GetTick>
 800377a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f013 0f02 	tst.w	r3, #2
 8003784:	d1bf      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fe fbe5 	bl	8001f54 <HAL_GetTick>
 800378a:	1b80      	subs	r0, r0, r6
 800378c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003790:	4298      	cmp	r0, r3
 8003792:	d9f3      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8003794:	2003      	movs	r0, #3
 8003796:	e7d6      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003798:	69d3      	ldr	r3, [r2, #28]
 800379a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379e:	61d3      	str	r3, [r2, #28]
 80037a0:	e7ba      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 80037a2:	2000      	movs	r0, #0
 80037a4:	e7cf      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42420440 	.word	0x42420440

080037b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b8:	6a04      	ldr	r4, [r0, #32]
 80037ba:	f024 0401 	bic.w	r4, r4, #1
 80037be:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037c2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ca:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80037ce:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037d0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80037d2:	6203      	str	r3, [r0, #32]
}
 80037d4:	bc10      	pop	{r4}
 80037d6:	4770      	bx	lr

080037d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037da:	6a03      	ldr	r3, [r0, #32]
 80037dc:	f023 0310 	bic.w	r3, r3, #16
 80037e0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80037e4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037e6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ea:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80037f2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037f6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80037f8:	6203      	str	r3, [r0, #32]
}
 80037fa:	bc10      	pop	{r4}
 80037fc:	4770      	bx	lr

080037fe <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037fe:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003804:	4319      	orrs	r1, r3
 8003806:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380a:	6081      	str	r1, [r0, #8]
}
 800380c:	4770      	bx	lr
	...

08003810 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003810:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d001      	beq.n	800381e <HAL_TIM_Base_Start_IT+0xe>
    return HAL_ERROR;
 800381a:	2001      	movs	r0, #1
 800381c:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003824:	6802      	ldr	r2, [r0, #0]
 8003826:	68d3      	ldr	r3, [r2, #12]
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382e:	6803      	ldr	r3, [r0, #0]
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HAL_TIM_Base_Start_IT+0x64>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d010      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x48>
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d00d      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x48>
 800383c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x48>
 8003844:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003848:	4293      	cmp	r3, r2
 800384a:	d005      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x48>
    __HAL_TIM_ENABLE(htim);
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003854:	2000      	movs	r0, #0
 8003856:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385e:	2a06      	cmp	r2, #6
 8003860:	d005      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800386a:	2000      	movs	r0, #0
 800386c:	4770      	bx	lr
 800386e:	2000      	movs	r0, #0
}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00

08003878 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_IC_CaptureCallback>:
}
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800387c:	4770      	bx	lr

0800387e <HAL_TIM_TriggerCallback>:
}
 800387e:	4770      	bx	lr

08003880 <HAL_TIM_IRQHandler>:
{
 8003880:	b510      	push	{r4, lr}
 8003882:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003884:	6803      	ldr	r3, [r0, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	f012 0f02 	tst.w	r2, #2
 800388c:	d011      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	f012 0f02 	tst.w	r2, #2
 8003894:	d00d      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003896:	f06f 0202 	mvn.w	r2, #2
 800389a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389c:	2301      	movs	r3, #1
 800389e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a0:	6803      	ldr	r3, [r0, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f013 0f03 	tst.w	r3, #3
 80038a8:	d070      	beq.n	800398c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	f7ff ffe6 	bl	800387a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	2300      	movs	r3, #0
 80038b0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	f012 0f04 	tst.w	r2, #4
 80038ba:	d012      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	f012 0f04 	tst.w	r2, #4
 80038c2:	d00e      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c4:	f06f 0204 	mvn.w	r2, #4
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ca:	2302      	movs	r3, #2
 80038cc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80038d6:	d05f      	beq.n	8003998 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff ffce 	bl	800387a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	2300      	movs	r3, #0
 80038e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	f012 0f08 	tst.w	r2, #8
 80038ea:	d012      	beq.n	8003912 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	f012 0f08 	tst.w	r2, #8
 80038f2:	d00e      	beq.n	8003912 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f4:	f06f 0208 	mvn.w	r2, #8
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fa:	2304      	movs	r3, #4
 80038fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f013 0f03 	tst.w	r3, #3
 8003906:	d04e      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003908:	4620      	mov	r0, r4
 800390a:	f7ff ffb6 	bl	800387a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	2300      	movs	r3, #0
 8003910:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	f012 0f10 	tst.w	r2, #16
 800391a:	d012      	beq.n	8003942 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	f012 0f10 	tst.w	r2, #16
 8003922:	d00e      	beq.n	8003942 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003924:	f06f 0210 	mvn.w	r2, #16
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392a:	2308      	movs	r3, #8
 800392c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003936:	d03d      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003938:	4620      	mov	r0, r4
 800393a:	f7ff ff9e 	bl	800387a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	2300      	movs	r3, #0
 8003940:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	f012 0f01 	tst.w	r2, #1
 800394a:	d003      	beq.n	8003954 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	f012 0f01 	tst.w	r2, #1
 8003952:	d136      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	f012 0f80 	tst.w	r2, #128	; 0x80
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003964:	d134      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800396e:	d003      	beq.n	8003978 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003976:	d132      	bne.n	80039de <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	f012 0f20 	tst.w	r2, #32
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	f012 0f20 	tst.w	r2, #32
 8003988:	d130      	bne.n	80039ec <HAL_TIM_IRQHandler+0x16c>
}
 800398a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800398c:	f7ff ff74 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff ff73 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
 8003996:	e78a      	b.n	80038ae <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003998:	4620      	mov	r0, r4
 800399a:	f7ff ff6d 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399e:	4620      	mov	r0, r4
 80039a0:	f7ff ff6c 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
 80039a4:	e79b      	b.n	80038de <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a6:	4620      	mov	r0, r4
 80039a8:	f7ff ff66 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7ff ff65 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
 80039b2:	e7ac      	b.n	800390e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b4:	4620      	mov	r0, r4
 80039b6:	f7ff ff5f 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff ff5e 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
 80039c0:	e7bd      	b.n	800393e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c2:	f06f 0201 	mvn.w	r2, #1
 80039c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7fe f947 	bl	8001c5c <HAL_TIM_PeriodElapsedCallback>
 80039ce:	e7c1      	b.n	8003954 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80039d6:	4620      	mov	r0, r4
 80039d8:	f000 f923 	bl	8003c22 <HAL_TIMEx_BreakCallback>
 80039dc:	e7c3      	b.n	8003966 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80039e4:	4620      	mov	r0, r4
 80039e6:	f7ff ff4a 	bl	800387e <HAL_TIM_TriggerCallback>
 80039ea:	e7c5      	b.n	8003978 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039ec:	f06f 0220 	mvn.w	r2, #32
 80039f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80039f2:	4620      	mov	r0, r4
 80039f4:	f000 f914 	bl	8003c20 <HAL_TIMEx_CommutCallback>
}
 80039f8:	e7c7      	b.n	800398a <HAL_TIM_IRQHandler+0x10a>
	...

080039fc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80039fc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039fe:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <TIM_Base_SetConfig+0x70>)
 8003a00:	4290      	cmp	r0, r2
 8003a02:	d00a      	beq.n	8003a1a <TIM_Base_SetConfig+0x1e>
 8003a04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0x1e>
 8003a0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a0e:	4290      	cmp	r0, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0x1e>
 8003a12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a16:	4290      	cmp	r0, r2
 8003a18:	d103      	bne.n	8003a22 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a1e:	684a      	ldr	r2, [r1, #4]
 8003a20:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <TIM_Base_SetConfig+0x70>)
 8003a24:	4290      	cmp	r0, r2
 8003a26:	d00a      	beq.n	8003a3e <TIM_Base_SetConfig+0x42>
 8003a28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a2c:	d007      	beq.n	8003a3e <TIM_Base_SetConfig+0x42>
 8003a2e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a32:	4290      	cmp	r0, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_Base_SetConfig+0x42>
 8003a36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a3a:	4290      	cmp	r0, r2
 8003a3c:	d103      	bne.n	8003a46 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a42:	68ca      	ldr	r2, [r1, #12]
 8003a44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4a:	694a      	ldr	r2, [r1, #20]
 8003a4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a50:	688b      	ldr	r3, [r1, #8]
 8003a52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a54:	680b      	ldr	r3, [r1, #0]
 8003a56:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <TIM_Base_SetConfig+0x70>)
 8003a5a:	4298      	cmp	r0, r3
 8003a5c:	d002      	beq.n	8003a64 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	6143      	str	r3, [r0, #20]
}
 8003a62:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003a64:	690b      	ldr	r3, [r1, #16]
 8003a66:	6303      	str	r3, [r0, #48]	; 0x30
 8003a68:	e7f9      	b.n	8003a5e <TIM_Base_SetConfig+0x62>
 8003a6a:	bf00      	nop
 8003a6c:	40012c00 	.word	0x40012c00

08003a70 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003a70:	b338      	cbz	r0, 8003ac2 <HAL_TIM_Base_Init+0x52>
{
 8003a72:	b510      	push	{r4, lr}
 8003a74:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a7a:	b1eb      	cbz	r3, 8003ab8 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a82:	1d21      	adds	r1, r4, #4
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	f7ff ffb9 	bl	80039fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003a94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003a98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003a9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003ab4:	2000      	movs	r0, #0
}
 8003ab6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003ab8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003abc:	f7fe f992 	bl	8001de4 <HAL_TIM_Base_MspInit>
 8003ac0:	e7dc      	b.n	8003a7c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003ac2:	2001      	movs	r0, #1
}
 8003ac4:	4770      	bx	lr

08003ac6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ac6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ac8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ace:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad6:	6083      	str	r3, [r0, #8]
}
 8003ad8:	bc10      	pop	{r4}
 8003ada:	4770      	bx	lr

08003adc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003adc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d066      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0xd6>
{
 8003ae4:	b510      	push	{r4, lr}
 8003ae6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003aee:	2302      	movs	r3, #2
 8003af0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003af4:	6802      	ldr	r2, [r0, #0]
 8003af6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003afc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003b00:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003b02:	680b      	ldr	r3, [r1, #0]
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	d04a      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0xc2>
 8003b08:	d913      	bls.n	8003b32 <HAL_TIM_ConfigClockSource+0x56>
 8003b0a:	2b60      	cmp	r3, #96	; 0x60
 8003b0c:	d03d      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xae>
 8003b0e:	d91e      	bls.n	8003b4e <HAL_TIM_ConfigClockSource+0x72>
 8003b10:	2b70      	cmp	r3, #112	; 0x70
 8003b12:	d028      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x8a>
 8003b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b18:	d130      	bne.n	8003b7c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8003b1a:	68cb      	ldr	r3, [r1, #12]
 8003b1c:	684a      	ldr	r2, [r1, #4]
 8003b1e:	6889      	ldr	r1, [r1, #8]
 8003b20:	6800      	ldr	r0, [r0, #0]
 8003b22:	f7ff ffd0 	bl	8003ac6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b26:	6822      	ldr	r2, [r4, #0]
 8003b28:	6893      	ldr	r3, [r2, #8]
 8003b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b2e:	6093      	str	r3, [r2, #8]
      break;
 8003b30:	e024      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d006      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0x68>
 8003b36:	d904      	bls.n	8003b42 <HAL_TIM_ConfigClockSource+0x66>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d003      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0x68>
 8003b3c:	2b30      	cmp	r3, #48	; 0x30
 8003b3e:	d001      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0x68>
 8003b40:	e01c      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0xa0>
 8003b42:	b9db      	cbnz	r3, 8003b7c <HAL_TIM_ConfigClockSource+0xa0>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b44:	4619      	mov	r1, r3
 8003b46:	6820      	ldr	r0, [r4, #0]
 8003b48:	f7ff fe59 	bl	80037fe <TIM_ITRx_SetConfig>
        break;
 8003b4c:	e016      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003b4e:	2b50      	cmp	r3, #80	; 0x50
 8003b50:	d114      	bne.n	8003b7c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	68ca      	ldr	r2, [r1, #12]
 8003b54:	6849      	ldr	r1, [r1, #4]
 8003b56:	6800      	ldr	r0, [r0, #0]
 8003b58:	f7ff fe2c 	bl	80037b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b5c:	2150      	movs	r1, #80	; 0x50
 8003b5e:	6820      	ldr	r0, [r4, #0]
 8003b60:	f7ff fe4d 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 8003b64:	e00a      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8003b66:	68cb      	ldr	r3, [r1, #12]
 8003b68:	684a      	ldr	r2, [r1, #4]
 8003b6a:	6889      	ldr	r1, [r1, #8]
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	f7ff ffaa 	bl	8003ac6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003b7a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003b88:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8a:	68ca      	ldr	r2, [r1, #12]
 8003b8c:	6849      	ldr	r1, [r1, #4]
 8003b8e:	6800      	ldr	r0, [r0, #0]
 8003b90:	f7ff fe22 	bl	80037d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b94:	2160      	movs	r1, #96	; 0x60
 8003b96:	6820      	ldr	r0, [r4, #0]
 8003b98:	f7ff fe31 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e7ee      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	68ca      	ldr	r2, [r1, #12]
 8003ba0:	6849      	ldr	r1, [r1, #4]
 8003ba2:	6800      	ldr	r0, [r0, #0]
 8003ba4:	f7ff fe06 	bl	80037b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	f7ff fe27 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e7e4      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8003bb2:	2002      	movs	r0, #2
}
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d02b      	beq.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8003bc0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bce:	6803      	ldr	r3, [r0, #0]
 8003bd0:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd2:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd8:	680a      	ldr	r2, [r1, #0]
 8003bda:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bde:	6803      	ldr	r3, [r0, #0]
 8003be0:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00a      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d007      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003bec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003bf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d104      	bne.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfc:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c00:	684a      	ldr	r2, [r1, #4]
 8003c02:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c04:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003c12:	4618      	mov	r0, r3
}
 8003c14:	bc30      	pop	{r4, r5}
 8003c16:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003c18:	2002      	movs	r0, #2
}
 8003c1a:	4770      	bx	lr
 8003c1c:	40012c00 	.word	0x40012c00

08003c20 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c20:	4770      	bx	lr

08003c22 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c22:	4770      	bx	lr

08003c24 <__libc_init_array>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	2500      	movs	r5, #0
 8003c28:	4e0c      	ldr	r6, [pc, #48]	; (8003c5c <__libc_init_array+0x38>)
 8003c2a:	4c0d      	ldr	r4, [pc, #52]	; (8003c60 <__libc_init_array+0x3c>)
 8003c2c:	1ba4      	subs	r4, r4, r6
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	42a5      	cmp	r5, r4
 8003c32:	d109      	bne.n	8003c48 <__libc_init_array+0x24>
 8003c34:	f000 f880 	bl	8003d38 <_init>
 8003c38:	2500      	movs	r5, #0
 8003c3a:	4e0a      	ldr	r6, [pc, #40]	; (8003c64 <__libc_init_array+0x40>)
 8003c3c:	4c0a      	ldr	r4, [pc, #40]	; (8003c68 <__libc_init_array+0x44>)
 8003c3e:	1ba4      	subs	r4, r4, r6
 8003c40:	10a4      	asrs	r4, r4, #2
 8003c42:	42a5      	cmp	r5, r4
 8003c44:	d105      	bne.n	8003c52 <__libc_init_array+0x2e>
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c4c:	4798      	blx	r3
 8003c4e:	3501      	adds	r5, #1
 8003c50:	e7ee      	b.n	8003c30 <__libc_init_array+0xc>
 8003c52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c56:	4798      	blx	r3
 8003c58:	3501      	adds	r5, #1
 8003c5a:	e7f2      	b.n	8003c42 <__libc_init_array+0x1e>
 8003c5c:	08003d88 	.word	0x08003d88
 8003c60:	08003d88 	.word	0x08003d88
 8003c64:	08003d88 	.word	0x08003d88
 8003c68:	08003d8c 	.word	0x08003d8c

08003c6c <free>:
 8003c6c:	4b02      	ldr	r3, [pc, #8]	; (8003c78 <free+0xc>)
 8003c6e:	4601      	mov	r1, r0
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	f000 b80b 	b.w	8003c8c <_free_r>
 8003c76:	bf00      	nop
 8003c78:	2000001c 	.word	0x2000001c

08003c7c <memset>:
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4402      	add	r2, r0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memset+0xa>
 8003c84:	4770      	bx	lr
 8003c86:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8a:	e7f9      	b.n	8003c80 <memset+0x4>

08003c8c <_free_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4605      	mov	r5, r0
 8003c90:	2900      	cmp	r1, #0
 8003c92:	d043      	beq.n	8003d1c <_free_r+0x90>
 8003c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c98:	1f0c      	subs	r4, r1, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfb8      	it	lt
 8003c9e:	18e4      	addlt	r4, r4, r3
 8003ca0:	f000 f848 	bl	8003d34 <__malloc_lock>
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <_free_r+0x94>)
 8003ca6:	6813      	ldr	r3, [r2, #0]
 8003ca8:	4610      	mov	r0, r2
 8003caa:	b933      	cbnz	r3, 8003cba <_free_r+0x2e>
 8003cac:	6063      	str	r3, [r4, #4]
 8003cae:	6014      	str	r4, [r2, #0]
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cb6:	f000 b83e 	b.w	8003d36 <__malloc_unlock>
 8003cba:	42a3      	cmp	r3, r4
 8003cbc:	d90b      	bls.n	8003cd6 <_free_r+0x4a>
 8003cbe:	6821      	ldr	r1, [r4, #0]
 8003cc0:	1862      	adds	r2, r4, r1
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	bf01      	itttt	eq
 8003cc6:	681a      	ldreq	r2, [r3, #0]
 8003cc8:	685b      	ldreq	r3, [r3, #4]
 8003cca:	1852      	addeq	r2, r2, r1
 8003ccc:	6022      	streq	r2, [r4, #0]
 8003cce:	6063      	str	r3, [r4, #4]
 8003cd0:	6004      	str	r4, [r0, #0]
 8003cd2:	e7ed      	b.n	8003cb0 <_free_r+0x24>
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	b10a      	cbz	r2, 8003cde <_free_r+0x52>
 8003cda:	42a2      	cmp	r2, r4
 8003cdc:	d9fa      	bls.n	8003cd4 <_free_r+0x48>
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	1858      	adds	r0, r3, r1
 8003ce2:	42a0      	cmp	r0, r4
 8003ce4:	d10b      	bne.n	8003cfe <_free_r+0x72>
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	4401      	add	r1, r0
 8003cea:	1858      	adds	r0, r3, r1
 8003cec:	4282      	cmp	r2, r0
 8003cee:	6019      	str	r1, [r3, #0]
 8003cf0:	d1de      	bne.n	8003cb0 <_free_r+0x24>
 8003cf2:	6810      	ldr	r0, [r2, #0]
 8003cf4:	6852      	ldr	r2, [r2, #4]
 8003cf6:	4401      	add	r1, r0
 8003cf8:	6019      	str	r1, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	e7d8      	b.n	8003cb0 <_free_r+0x24>
 8003cfe:	d902      	bls.n	8003d06 <_free_r+0x7a>
 8003d00:	230c      	movs	r3, #12
 8003d02:	602b      	str	r3, [r5, #0]
 8003d04:	e7d4      	b.n	8003cb0 <_free_r+0x24>
 8003d06:	6820      	ldr	r0, [r4, #0]
 8003d08:	1821      	adds	r1, r4, r0
 8003d0a:	428a      	cmp	r2, r1
 8003d0c:	bf01      	itttt	eq
 8003d0e:	6811      	ldreq	r1, [r2, #0]
 8003d10:	6852      	ldreq	r2, [r2, #4]
 8003d12:	1809      	addeq	r1, r1, r0
 8003d14:	6021      	streq	r1, [r4, #0]
 8003d16:	6062      	str	r2, [r4, #4]
 8003d18:	605c      	str	r4, [r3, #4]
 8003d1a:	e7c9      	b.n	8003cb0 <_free_r+0x24>
 8003d1c:	bd38      	pop	{r3, r4, r5, pc}
 8003d1e:	bf00      	nop
 8003d20:	200000ac 	.word	0x200000ac

08003d24 <strcpy>:
 8003d24:	4603      	mov	r3, r0
 8003d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d2a:	f803 2b01 	strb.w	r2, [r3], #1
 8003d2e:	2a00      	cmp	r2, #0
 8003d30:	d1f9      	bne.n	8003d26 <strcpy+0x2>
 8003d32:	4770      	bx	lr

08003d34 <__malloc_lock>:
 8003d34:	4770      	bx	lr

08003d36 <__malloc_unlock>:
 8003d36:	4770      	bx	lr

08003d38 <_init>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr

08003d44 <_fini>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr
