
FirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004600  08004600  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004608  08004608  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  08004680  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004680  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef3e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002033  00000000  00000000  0002efde  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00031018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d88  00000000  00000000  00031e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017381  00000000  00000000  00032c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b22d  00000000  00000000  00049fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091fb9  00000000  00000000  000551ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ffc  00000000  00000000  000e7204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004548 	.word	0x08004548

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004548 	.word	0x08004548

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LCD_I2C_Init>:
#define SHIFT_CURSOT_TO_THE_RIGTH 0x04

#define SECOND_LINE_ADDRESS_OFFSET 0x40

void LCD_I2C_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(100); // wait for >40ms
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f000 ff85 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd(INIT_CMD);
 800059a:	2030      	movs	r0, #48	; 0x30
 800059c:	f000 f8fc 	bl	8000798 <lcd_send_cmd>
	HAL_Delay(10); // wait for >4.1ms
 80005a0:	200a      	movs	r0, #10
 80005a2:	f000 ff7f 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd(INIT_CMD);
 80005a6:	2030      	movs	r0, #48	; 0x30
 80005a8:	f000 f8f6 	bl	8000798 <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 80005ac:	2001      	movs	r0, #1
 80005ae:	f000 ff79 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd(INIT_CMD);
 80005b2:	2030      	movs	r0, #48	; 0x30
 80005b4:	f000 f8f0 	bl	8000798 <lcd_send_cmd>
	HAL_Delay(50);
 80005b8:	2032      	movs	r0, #50	; 0x32
 80005ba:	f000 ff73 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd(FUNCTION_SET_CMD); // 4bit mode
 80005be:	2020      	movs	r0, #32
 80005c0:	f000 f8ea 	bl	8000798 <lcd_send_cmd>
	HAL_Delay(50);
 80005c4:	2032      	movs	r0, #50	; 0x32
 80005c6:	f000 ff6d 	bl	80014a4 <HAL_Delay>

	lcd_send_cmd(FUNCTION_SET_CMD | TWO_LINE_DISPLAY_MODE); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005ca:	2028      	movs	r0, #40	; 0x28
 80005cc:	f000 f8e4 	bl	8000798 <lcd_send_cmd>
	HAL_Delay(10);
 80005d0:	200a      	movs	r0, #10
 80005d2:	f000 ff67 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd(DISPLAY_ON_OFF_CMD); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80005d6:	2008      	movs	r0, #8
 80005d8:	f000 f8de 	bl	8000798 <lcd_send_cmd>
	HAL_Delay(10);
 80005dc:	200a      	movs	r0, #10
 80005de:	f000 ff61 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd(CLEAR_DISPLAY_CMD); // clear display
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 f8d8 	bl	8000798 <lcd_send_cmd>
	HAL_Delay(10);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 ff5b 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd(ENTRY_MODE_CMD | INCREMENT_DDRAM_ADDRESS); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80005ee:	2006      	movs	r0, #6
 80005f0:	f000 f8d2 	bl	8000798 <lcd_send_cmd>
	HAL_Delay(10);
 80005f4:	200a      	movs	r0, #10
 80005f6:	f000 ff55 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd(DISPLAY_ON_OFF_CMD | DISPLAY_ON_BIT); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005fa:	200c      	movs	r0, #12
 80005fc:	f000 f8cc 	bl	8000798 <lcd_send_cmd>
	HAL_Delay(10);
 8000600:	200a      	movs	r0, #10
 8000602:	f000 ff4f 	bl	80014a4 <HAL_Delay>
	LCD_Clear();
 8000606:	f000 f8ab 	bl	8000760 <LCD_Clear>
	HAL_Delay(100);
 800060a:	2064      	movs	r0, #100	; 0x64
 800060c:	f000 ff4a 	bl	80014a4 <HAL_Delay>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <LCD_Set_Shifting_Time>:

void LCD_Set_Shifting_Time(uint16_t time)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
	LCDService.shiftTime = time;
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <LCD_Set_Shifting_Time+0x1c>)
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	8093      	strh	r3, [r2, #4]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	200000a0 	.word	0x200000a0

08000634 <LCD_Print_With_Position>:

void LCD_Print_With_Position(char *str, uint8_t lineNumber, uint8_t position)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
 8000640:	4613      	mov	r3, r2
 8000642:	70bb      	strb	r3, [r7, #2]
	if (lineNumber >= COUNT_OF_LINES || position >= COUNT_OF_LETTERS_IN_ONE_LINE)
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d82a      	bhi.n	80006a0 <LCD_Print_With_Position+0x6c>
 800064a:	78bb      	ldrb	r3, [r7, #2]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d827      	bhi.n	80006a0 <LCD_Print_With_Position+0x6c>
		return;

	if (lineNumber)
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d007      	beq.n	8000666 <LCD_Print_With_Position+0x32>
		lcd_send_cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET | position);
 8000656:	78bb      	ldrb	r3, [r7, #2]
 8000658:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f89a 	bl	8000798 <lcd_send_cmd>
 8000664:	e006      	b.n	8000674 <LCD_Print_With_Position+0x40>
	else
		lcd_send_cmd(SET_DDRAM_ADDRESS | position);
 8000666:	78bb      	ldrb	r3, [r7, #2]
 8000668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f892 	bl	8000798 <lcd_send_cmd>
	lcd_send_string(str);
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f8fb 	bl	8000870 <lcd_send_string>
	LCDService.displayMode = NONE_DISPLAY_MODE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <LCD_Print_With_Position+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	719a      	strb	r2, [r3, #6]

	memset(LCDService.firstLineString, 0, sizeof(LCDService.firstLineString));
 8000680:	2220      	movs	r2, #32
 8000682:	2100      	movs	r1, #0
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <LCD_Print_With_Position+0x78>)
 8000686:	f003 fb37 	bl	8003cf8 <memset>
	memset(LCDService.secondLineString, 0, sizeof(LCDService.secondLineString));
 800068a:	2220      	movs	r2, #32
 800068c:	2100      	movs	r1, #0
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <LCD_Print_With_Position+0x7c>)
 8000690:	f003 fb32 	bl	8003cf8 <memset>
	free(LCDService.multilineString);
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <LCD_Print_With_Position+0x74>)
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fb25 	bl	8003ce8 <free>
 800069e:	e000      	b.n	80006a2 <LCD_Print_With_Position+0x6e>
		return;
 80006a0:	bf00      	nop
}
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000a0 	.word	0x200000a0
 80006ac:	200000ac 	.word	0x200000ac
 80006b0:	200000cc 	.word	0x200000cc

080006b4 <LCD_Print_MultiLines>:
void LCD_Print_MultiLines(char *format, ...)
{
 80006b4:	b40f      	push	{r0, r1, r2, r3}
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
	va_list args;
	uint16_t textLength = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	80fb      	strh	r3, [r7, #6]
	va_start(args, format);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	603b      	str	r3, [r7, #0]
	free(LCDService.multilineString);
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <LCD_Print_MultiLines+0xa0>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fb0c 	bl	8003ce8 <free>
	textLength = vsnprintf(NULL, 0, format, args);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	2100      	movs	r1, #0
 80006d6:	2000      	movs	r0, #0
 80006d8:	f003 fbfa 	bl	8003ed0 <vsniprintf>
 80006dc:	4603      	mov	r3, r0
 80006de:	80fb      	strh	r3, [r7, #6]
	LCDService.multilineString = (char *)malloc((textLength + 1) * sizeof(char*));
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	3301      	adds	r3, #1
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 faf6 	bl	8003cd8 <malloc>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <LCD_Print_MultiLines+0xa0>)
 80006f2:	64da      	str	r2, [r3, #76]	; 0x4c
	vsnprintf(LCDService.multilineString, textLength + 1, format, args);
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <LCD_Print_MultiLines+0xa0>)
 80006f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4619      	mov	r1, r3
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	693a      	ldr	r2, [r7, #16]
 8000702:	f003 fbe5 	bl	8003ed0 <vsniprintf>
	va_end(args);

	LCD_Clear();
 8000706:	f000 f82b 	bl	8000760 <LCD_Clear>
	LCDService.displayMode = MULTILINE_MODE;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <LCD_Print_MultiLines+0xa0>)
 800070c:	2201      	movs	r2, #1
 800070e:	719a      	strb	r2, [r3, #6]
	memset(LCDService.secondLineString, 0, sizeof(LCDService.secondLineString));
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	4810      	ldr	r0, [pc, #64]	; (8000758 <LCD_Print_MultiLines+0xa4>)
 8000716:	f003 faef 	bl	8003cf8 <memset>
	memset(LCDService.firstLineString, 0, sizeof(LCDService.firstLineString));
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	480f      	ldr	r0, [pc, #60]	; (800075c <LCD_Print_MultiLines+0xa8>)
 8000720:	f003 faea 	bl	8003cf8 <memset>
	LCDService.firstLinePrintPosition = 0;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <LCD_Print_MultiLines+0xa0>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	LCDService.secondLinePrintPosition = 0;
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <LCD_Print_MultiLines+0xa0>)
 800072c:	2200      	movs	r2, #0
 800072e:	705a      	strb	r2, [r3, #1]
	LCDService.multilinePrintPosition = 0;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <LCD_Print_MultiLines+0xa0>)
 8000732:	2200      	movs	r2, #0
 8000734:	709a      	strb	r2, [r3, #2]
	LCDService.previousMilisecond = Get_Sys_Time();
 8000736:	f000 fe01 	bl	800133c <Get_Sys_Time>
 800073a:	4602      	mov	r2, r0
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <LCD_Print_MultiLines+0xa0>)
 800073e:	609a      	str	r2, [r3, #8]
	Multi_Line_Service(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 f927 	bl	8000994 <Multi_Line_Service>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	200000a0 	.word	0x200000a0
 8000758:	200000cc 	.word	0x200000cc
 800075c:	200000ac 	.word	0x200000ac

08000760 <LCD_Clear>:

	LCDService.previousMilisecond = Get_Sys_Time();
}

void LCD_Clear(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	lcd_send_cmd(CLEAR_DISPLAY_CMD);
 8000764:	2001      	movs	r0, #1
 8000766:	f000 f817 	bl	8000798 <lcd_send_cmd>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <LCD_Service>:

void LCD_Service(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	if (LCDService.displayMode == TWO_LINES_SEPARATELY_MODE)
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <LCD_Service+0x24>)
 8000776:	799b      	ldrb	r3, [r3, #6]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d102      	bne.n	8000782 <LCD_Service+0x12>
	{
		Two_Lines_Separately_Service();
 800077c:	f000 f8a4 	bl	80008c8 <Two_Lines_Separately_Service>
	}
	else if (LCDService.displayMode == MULTILINE_MODE)
	{
		Multi_Line_Service(0);
	}
}
 8000780:	e006      	b.n	8000790 <LCD_Service+0x20>
	else if (LCDService.displayMode == MULTILINE_MODE)
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <LCD_Service+0x24>)
 8000784:	799b      	ldrb	r3, [r3, #6]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d102      	bne.n	8000790 <LCD_Service+0x20>
		Multi_Line_Service(0);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f902 	bl	8000994 <Multi_Line_Service>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000a0 	.word	0x200000a0

08000798 <lcd_send_cmd>:

static void lcd_send_cmd(uint8_t cmd)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af02      	add	r7, sp, #8
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f023 030f 	bic.w	r3, r3, #15
 80007a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | (DUMMY_BIT | ENABLE_BIT); //en=1, rs=0
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	f043 030c 	orr.w	r3, r3, #12
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | DUMMY_BIT;				   //en=0, rs=0
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | (DUMMY_BIT | ENABLE_BIT); //en=1, rs=0
 80007c4:	7bbb      	ldrb	r3, [r7, #14]
 80007c6:	f043 030c 	orr.w	r3, r3, #12
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | DUMMY_BIT;				   //en=0, rs=0
 80007ce:	7bbb      	ldrb	r3, [r7, #14]
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 200);
 80007d8:	f107 0208 	add.w	r2, r7, #8
 80007dc:	23c8      	movs	r3, #200	; 0xc8
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2304      	movs	r3, #4
 80007e2:	217e      	movs	r1, #126	; 0x7e
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <lcd_send_cmd+0x74>)
 80007e6:	f001 ff25 	bl	8002634 <HAL_I2C_Master_Transmit>
	if (cmd == CLEAR_DISPLAY_CMD || cmd == RETURN_HOME_CMD)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d002      	beq.n	80007f6 <lcd_send_cmd+0x5e>
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d103      	bne.n	80007fe <lcd_send_cmd+0x66>
		HAL_Delay(6);
 80007f6:	2006      	movs	r0, #6
 80007f8:	f000 fe54 	bl	80014a4 <HAL_Delay>
 80007fc:	e002      	b.n	8000804 <lcd_send_cmd+0x6c>
	else
		HAL_Delay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fe50 	bl	80014a4 <HAL_Delay>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000f0 	.word	0x200000f0

08000810 <lcd_send_data>:

static void lcd_send_data(char data)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af02      	add	r7, sp, #8
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f023 030f 	bic.w	r3, r3, #15
 8000820:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | (DUMMY_BIT | ENABLE_BIT | RESET_BIT); //en=1, rs=1
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	f043 030d 	orr.w	r3, r3, #13
 800082e:	b2db      	uxtb	r3, r3
 8000830:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | (DUMMY_BIT | RESET_BIT);			   //en=0, rs=1
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	f043 0309 	orr.w	r3, r3, #9
 8000838:	b2db      	uxtb	r3, r3
 800083a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | (DUMMY_BIT | ENABLE_BIT | RESET_BIT); //en=1, rs=1
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	f043 030d 	orr.w	r3, r3, #13
 8000842:	b2db      	uxtb	r3, r3
 8000844:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | (DUMMY_BIT | RESET_BIT);			   //en=0, rs=1
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	f043 0309 	orr.w	r3, r3, #9
 800084c:	b2db      	uxtb	r3, r3
 800084e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 200);
 8000850:	f107 0208 	add.w	r2, r7, #8
 8000854:	23c8      	movs	r3, #200	; 0xc8
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2304      	movs	r3, #4
 800085a:	217e      	movs	r1, #126	; 0x7e
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <lcd_send_data+0x5c>)
 800085e:	f001 fee9 	bl	8002634 <HAL_I2C_Master_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000f0 	.word	0x200000f0

08000870 <lcd_send_string>:

static void lcd_send_string(char *str)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	while (*str)
 8000878:	e006      	b.n	8000888 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffc4 	bl	8000810 <lcd_send_data>
	while (*str)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1f4      	bne.n	800087a <lcd_send_string+0xa>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <lcd_send_string_2>:

static void lcd_send_string_2(char *str, uint8_t countOfChars)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
	while (countOfChars)
 80008a4:	e009      	b.n	80008ba <lcd_send_string_2+0x22>
	{
		lcd_send_data(*str++);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ffae 	bl	8000810 <lcd_send_data>
		countOfChars--;
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	70fb      	strb	r3, [r7, #3]
	while (countOfChars)
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1f2      	bne.n	80008a6 <lcd_send_string_2+0xe>
	}
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <Two_Lines_Separately_Service>:
		lcd_send_string(" ");
	}
}

static void Two_Lines_Separately_Service(void)
{
 80008c8:	b598      	push	{r3, r4, r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	if (LCDService.shiftTime == 0)
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 80008ce:	889b      	ldrh	r3, [r3, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d056      	beq.n	8000982 <Two_Lines_Separately_Service+0xba>
		return;
	if (Get_Sys_Time() - LCDService.previousMilisecond >= LCDService.shiftTime)
 80008d4:	f000 fd32 	bl	800133c <Get_Sys_Time>
 80008d8:	4602      	mov	r2, r0
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	4a29      	ldr	r2, [pc, #164]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 80008e2:	8892      	ldrh	r2, [r2, #4]
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d34d      	bcc.n	8000984 <Two_Lines_Separately_Service+0xbc>
	{
		LCDService.previousMilisecond = Get_Sys_Time();
 80008e8:	f000 fd28 	bl	800133c <Get_Sys_Time>
 80008ec:	4602      	mov	r2, r0
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 80008f0:	609a      	str	r2, [r3, #8]
		if (LCDService.firstLineString[0] != 0)
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 80008f4:	7b1b      	ldrb	r3, [r3, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d01e      	beq.n	8000938 <Two_Lines_Separately_Service+0x70>
		{
			LCDService.firstLinePrintPosition++;
 80008fa:	4b23      	ldr	r3, [pc, #140]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 8000904:	701a      	strb	r2, [r3, #0]
			if (LCDService.firstLinePrintPosition + COUNT_OF_LETTERS_IN_ONE_LINE > strlen(LCDService.firstLineString))
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	3310      	adds	r3, #16
 800090c:	461c      	mov	r4, r3
 800090e:	481f      	ldr	r0, [pc, #124]	; (800098c <Two_Lines_Separately_Service+0xc4>)
 8000910:	f7ff fc66 	bl	80001e0 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	429c      	cmp	r4, r3
 8000918:	d902      	bls.n	8000920 <Two_Lines_Separately_Service+0x58>
			{
				LCDService.firstLinePrintPosition = 0;
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
			}
			lcd_send_cmd(RETURN_HOME_CMD);
 8000920:	2002      	movs	r0, #2
 8000922:	f7ff ff39 	bl	8000798 <lcd_send_cmd>
			lcd_send_string_2(LCDService.firstLineString + LCDService.firstLinePrintPosition,
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <Two_Lines_Separately_Service+0xc4>)
 800092e:	4413      	add	r3, r2
 8000930:	2110      	movs	r1, #16
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffb0 	bl	8000898 <lcd_send_string_2>
			COUNT_OF_LETTERS_IN_ONE_LINE);
		}
		if (LCDService.secondLineString[0] != 0)
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 800093a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800093e:	2b00      	cmp	r3, #0
 8000940:	d020      	beq.n	8000984 <Two_Lines_Separately_Service+0xbc>
		{
			LCDService.secondLinePrintPosition++;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	3301      	adds	r3, #1
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 800094c:	705a      	strb	r2, [r3, #1]
			if (LCDService.secondLinePrintPosition + COUNT_OF_LETTERS_IN_ONE_LINE > strlen(LCDService.secondLineString))
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	3310      	adds	r3, #16
 8000954:	461c      	mov	r4, r3
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <Two_Lines_Separately_Service+0xc8>)
 8000958:	f7ff fc42 	bl	80001e0 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	429c      	cmp	r4, r3
 8000960:	d902      	bls.n	8000968 <Two_Lines_Separately_Service+0xa0>
			{
				LCDService.secondLinePrintPosition = 0;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 8000964:	2200      	movs	r2, #0
 8000966:	705a      	strb	r2, [r3, #1]
			}
			lcd_send_cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 8000968:	20c0      	movs	r0, #192	; 0xc0
 800096a:	f7ff ff15 	bl	8000798 <lcd_send_cmd>
			lcd_send_string_2(LCDService.secondLineString + LCDService.secondLinePrintPosition,
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <Two_Lines_Separately_Service+0xc0>)
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	461a      	mov	r2, r3
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <Two_Lines_Separately_Service+0xc8>)
 8000976:	4413      	add	r3, r2
 8000978:	2110      	movs	r1, #16
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff8c 	bl	8000898 <lcd_send_string_2>
 8000980:	e000      	b.n	8000984 <Two_Lines_Separately_Service+0xbc>
		return;
 8000982:	bf00      	nop
			COUNT_OF_LETTERS_IN_ONE_LINE);
		}
	}
}
 8000984:	bd98      	pop	{r3, r4, r7, pc}
 8000986:	bf00      	nop
 8000988:	200000a0 	.word	0x200000a0
 800098c:	200000ac 	.word	0x200000ac
 8000990:	200000cc 	.word	0x200000cc

08000994 <Multi_Line_Service>:
static void Multi_Line_Service(uint8_t ignoreTime)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	uint8_t secondLine = 0, charCounter = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	2300      	movs	r3, #0
 80009a4:	73bb      	strb	r3, [r7, #14]
	if (LCDService.shiftTime == 0 || LCDService.multilineString == NULL)
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <Multi_Line_Service+0x108>)
 80009a8:	889b      	ldrh	r3, [r3, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d072      	beq.n	8000a94 <Multi_Line_Service+0x100>
 80009ae:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <Multi_Line_Service+0x108>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d06e      	beq.n	8000a94 <Multi_Line_Service+0x100>
	{
		return;
	}
	if (Get_Sys_Time() - LCDService.previousMilisecond >= LCDService.shiftTime || ignoreTime)
 80009b6:	f000 fcc1 	bl	800133c <Get_Sys_Time>
 80009ba:	4602      	mov	r2, r0
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <Multi_Line_Service+0x108>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	4a36      	ldr	r2, [pc, #216]	; (8000a9c <Multi_Line_Service+0x108>)
 80009c4:	8892      	ldrh	r2, [r2, #4]
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d202      	bcs.n	80009d0 <Multi_Line_Service+0x3c>
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d062      	beq.n	8000a96 <Multi_Line_Service+0x102>
	{
		LCDService.previousMilisecond = Get_Sys_Time();
 80009d0:	f000 fcb4 	bl	800133c <Get_Sys_Time>
 80009d4:	4602      	mov	r2, r0
 80009d6:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <Multi_Line_Service+0x108>)
 80009d8:	609a      	str	r2, [r3, #8]
		LCD_Clear();
 80009da:	f7ff fec1 	bl	8000760 <LCD_Clear>
		for (uint8_t i = LCDService.multilinePrintPosition; i < strlen(LCDService.multilineString); i++)
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <Multi_Line_Service+0x108>)
 80009e0:	789b      	ldrb	r3, [r3, #2]
 80009e2:	737b      	strb	r3, [r7, #13]
 80009e4:	e039      	b.n	8000a5a <Multi_Line_Service+0xc6>
		{
			if (!secondLine) //zapisujemy pozycję, od której zaczniemy drukowanie po upływie czasu wypisania kolejnej linii
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d104      	bne.n	80009f6 <Multi_Line_Service+0x62>
			{
				LCDService.multilinePrintPosition = i + 1;
 80009ec:	7b7b      	ldrb	r3, [r7, #13]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <Multi_Line_Service+0x108>)
 80009f4:	709a      	strb	r2, [r3, #2]
			}
			if (LCDService.multilineString[i] == '\n')
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <Multi_Line_Service+0x108>)
 80009f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009fa:	7b7b      	ldrb	r3, [r7, #13]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b0a      	cmp	r3, #10
 8000a02:	d10b      	bne.n	8000a1c <Multi_Line_Service+0x88>
			{
				charCounter = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73bb      	strb	r3, [r7, #14]
				if (!secondLine)
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d102      	bne.n	8000a14 <Multi_Line_Service+0x80>
					lcd_send_cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 8000a0e:	20c0      	movs	r0, #192	; 0xc0
 8000a10:	f7ff fec2 	bl	8000798 <lcd_send_cmd>
				secondLine++;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	3301      	adds	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
				continue;
 8000a1a:	e01b      	b.n	8000a54 <Multi_Line_Service+0xc0>
			}
			else if (charCounter == COUNT_OF_LETTERS_IN_ONE_LINE)
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	2b10      	cmp	r3, #16
 8000a20:	d10a      	bne.n	8000a38 <Multi_Line_Service+0xa4>
			{
				charCounter = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73bb      	strb	r3, [r7, #14]
				if (!secondLine)
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <Multi_Line_Service+0x9e>
					lcd_send_cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 8000a2c:	20c0      	movs	r0, #192	; 0xc0
 8000a2e:	f7ff feb3 	bl	8000798 <lcd_send_cmd>
				secondLine++;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	3301      	adds	r3, #1
 8000a36:	73fb      	strb	r3, [r7, #15]
			}
			if (secondLine >= 2)
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d817      	bhi.n	8000a6e <Multi_Line_Service+0xda>
				break;
			lcd_send_data(LCDService.multilineString[i]);
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <Multi_Line_Service+0x108>)
 8000a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a42:	7b7b      	ldrb	r3, [r7, #13]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fee1 	bl	8000810 <lcd_send_data>
			charCounter++;
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	3301      	adds	r3, #1
 8000a52:	73bb      	strb	r3, [r7, #14]
		for (uint8_t i = LCDService.multilinePrintPosition; i < strlen(LCDService.multilineString); i++)
 8000a54:	7b7b      	ldrb	r3, [r7, #13]
 8000a56:	3301      	adds	r3, #1
 8000a58:	737b      	strb	r3, [r7, #13]
 8000a5a:	7b7c      	ldrb	r4, [r7, #13]
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <Multi_Line_Service+0x108>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbbd 	bl	80001e0 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	429c      	cmp	r4, r3
 8000a6a:	d3bc      	bcc.n	80009e6 <Multi_Line_Service+0x52>
 8000a6c:	e000      	b.n	8000a70 <Multi_Line_Service+0xdc>
				break;
 8000a6e:	bf00      	nop
		}
		if (LCDService.multilinePrintPosition + charCounter >= strlen(LCDService.multilineString))
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <Multi_Line_Service+0x108>)
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	461a      	mov	r2, r3
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	4413      	add	r3, r2
 8000a7a:	461c      	mov	r4, r3
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <Multi_Line_Service+0x108>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fbad 	bl	80001e0 <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	429c      	cmp	r4, r3
 8000a8a:	d304      	bcc.n	8000a96 <Multi_Line_Service+0x102>
		{
			LCDService.multilinePrintPosition = 0;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <Multi_Line_Service+0x108>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	709a      	strb	r2, [r3, #2]
 8000a92:	e000      	b.n	8000a96 <Multi_Line_Service+0x102>
		return;
 8000a94:	bf00      	nop
		}
	}
}
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	200000a0 	.word	0x200000a0

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa6:	f000 fc8b 	bl	80013c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aaa:	f000 f863 	bl	8000b74 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aae:	f000 f997 	bl	8000de0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ab2:	f000 f947 	bl	8000d44 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000ab6:	f000 f917 	bl	8000ce8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000aba:	f000 f8c3 	bl	8000c44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000abe:	4826      	ldr	r0, [pc, #152]	; (8000b58 <main+0xb8>)
 8000ac0:	f002 fd39 	bl	8003536 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 8000ac4:	4825      	ldr	r0, [pc, #148]	; (8000b5c <main+0xbc>)
 8000ac6:	f000 fd53 	bl	8001570 <HAL_ADC_Start_IT>
	LCD_I2C_Init();
 8000aca:	f7ff fd61 	bl	8000590 <LCD_I2C_Init>
	LCD_Set_Shifting_Time(2000);
 8000ace:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ad2:	f7ff fd9f 	bl	8000614 <LCD_Set_Shifting_Time>
	LCD_Print_MultiLines("jakis dlugi %d, ktory niech mi sie tutaj wyswietla, bo musi", 3);
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	4821      	ldr	r0, [pc, #132]	; (8000b60 <main+0xc0>)
 8000ada:	f7ff fdeb 	bl	80006b4 <LCD_Print_MultiLines>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t value = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
	while (1)
	{
		if (value != Get_Sys_Seconds())
 8000ae2:	f000 fc37 	bl	8001354 <Get_Sys_Seconds>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d0f9      	beq.n	8000ae2 <main+0x42>
		{
			value = Get_Sys_Seconds();
 8000aee:	f000 fc31 	bl	8001354 <Get_Sys_Seconds>
 8000af2:	6078      	str	r0, [r7, #4]
			LCD_Service();
 8000af4:	f7ff fe3c 	bl	8000770 <LCD_Service>
			float temp = 0;
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
			if (Get_Current_Temperature(&temp))
 8000afe:	463b      	mov	r3, r7
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fb93 	bl	800122c <Get_Current_Temperature>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d01e      	beq.n	8000b4a <main+0xaa>
			{
				LCD_Print_MultiLines("temp = %d.%d", (int)temp, (int)(temp * 100) % 100);
 8000b0c:	edd7 7a00 	vldr	s15, [r7]
 8000b10:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000b14:	edd7 7a00 	vldr	s15, [r7]
 8000b18:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000b64 <main+0xc4>
 8000b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b24:	ee17 2a90 	vmov	r2, s15
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <main+0xc8>)
 8000b2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000b2e:	1159      	asrs	r1, r3, #5
 8000b30:	17d3      	asrs	r3, r2, #31
 8000b32:	1acb      	subs	r3, r1, r3
 8000b34:	2164      	movs	r1, #100	; 0x64
 8000b36:	fb01 f303 	mul.w	r3, r1, r3
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	ee16 1a90 	vmov	r1, s13
 8000b42:	480a      	ldr	r0, [pc, #40]	; (8000b6c <main+0xcc>)
 8000b44:	f7ff fdb6 	bl	80006b4 <LCD_Print_MultiLines>
 8000b48:	e7cb      	b.n	8000ae2 <main+0x42>
			}
			else
			{
				LCD_Print_With_Position("ERROR", 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <main+0xd0>)
 8000b50:	f7ff fd70 	bl	8000634 <LCD_Print_With_Position>
		if (value != Get_Sys_Seconds())
 8000b54:	e7c5      	b.n	8000ae2 <main+0x42>
 8000b56:	bf00      	nop
 8000b58:	20000144 	.word	0x20000144
 8000b5c:	20000184 	.word	0x20000184
 8000b60:	08004560 	.word	0x08004560
 8000b64:	42c80000 	.word	0x42c80000
 8000b68:	51eb851f 	.word	0x51eb851f
 8000b6c:	0800459c 	.word	0x0800459c
 8000b70:	080045ac 	.word	0x080045ac

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	; 0x50
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	2230      	movs	r2, #48	; 0x30
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 f8b8 	bl	8003cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <SystemClock_Config+0xc8>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <SystemClock_Config+0xc8>)
 8000ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <SystemClock_Config+0xc8>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <SystemClock_Config+0xcc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a20      	ldr	r2, [pc, #128]	; (8000c40 <SystemClock_Config+0xcc>)
 8000bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <SystemClock_Config+0xcc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be4:	2304      	movs	r3, #4
 8000be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000be8:	2364      	movs	r3, #100	; 0x64
 8000bea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 f823 	bl	8002c44 <HAL_RCC_OscConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c04:	f000 f99b 	bl	8000f3e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c08:	230f      	movs	r3, #15
 8000c0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2103      	movs	r1, #3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fa7d 	bl	8003124 <HAL_RCC_ClockConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c30:	f000 f985 	bl	8000f3e <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3750      	adds	r7, #80	; 0x50
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <MX_ADC1_Init+0x9c>)
 8000c5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <MX_ADC1_Init+0xa0>)
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000ca6:	f000 fc1f 	bl	80014e8 <HAL_ADC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cb0:	f000 f945 	bl	8000f3e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_ADC1_Init+0x98>)
 8000cc6:	f000 fe65 	bl	8001994 <HAL_ADC_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cd0:	f000 f935 	bl	8000f3e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000184 	.word	0x20000184
 8000ce0:	40012000 	.word	0x40012000
 8000ce4:	0f000001 	.word	0x0f000001

08000ce8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <MX_I2C1_Init+0x54>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000cf4:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MX_I2C1_Init+0x58>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d26:	f001 fb4d 	bl	80023c4 <HAL_I2C_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d30:	f000 f905 	bl	8000f3e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000f0 	.word	0x200000f0
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	000186a0 	.word	0x000186a0

08000d44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_TIM3_Init+0x94>)
 8000d62:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <MX_TIM3_Init+0x98>)
 8000d64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_TIM3_Init+0x94>)
 8000d68:	22c7      	movs	r2, #199	; 0xc7
 8000d6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_TIM3_Init+0x94>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_TIM3_Init+0x94>)
 8000d74:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_TIM3_Init+0x94>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_TIM3_Init+0x94>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d86:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <MX_TIM3_Init+0x94>)
 8000d88:	f002 fbaa 	bl	80034e0 <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d92:	f000 f8d4 	bl	8000f3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_TIM3_Init+0x94>)
 8000da4:	f002 fcf3 	bl	800378e <HAL_TIM_ConfigClockSource>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000dae:	f000 f8c6 	bl	8000f3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_TIM3_Init+0x94>)
 8000dc0:	f002 fede 	bl	8003b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000dca:	f000 f8b8 	bl	8000f3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000144 	.word	0x20000144
 8000ddc:	40000400 	.word	0x40000400

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a29      	ldr	r2, [pc, #164]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <MX_GPIO_Init+0xe0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	4816      	ldr	r0, [pc, #88]	; (8000ec4 <MX_GPIO_Init+0xe4>)
 8000e6c:	f001 fa5e 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_GPIO_Init+0xec>)
 8000e86:	f001 f8cf 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <MX_GPIO_Init+0xe4>)
 8000ea2:	f001 f8c1 	bl	8002028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2028      	movs	r0, #40	; 0x28
 8000eac:	f001 f885 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eb0:	2028      	movs	r0, #40	; 0x28
 8000eb2:	f001 f89e 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	10210000 	.word	0x10210000
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BlueButton_Pin)
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee0:	d104      	bne.n	8000eec <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ee6:	f001 fa3a 	bl	800235e <HAL_GPIO_TogglePin>
	else
	{
		__NOP();
	}
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, HAL_GPIO_ReadPin(BlueButton_GPIO_Port, BlueButton_Pin));
}
 8000eea:	e000      	b.n	8000eee <HAL_GPIO_EXTI_Callback+0x1e>
		__NOP();
 8000eec:	bf00      	nop
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020000 	.word	0x40020000

08000efc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Time_Service();
 8000f0e:	f000 f9df 	bl	80012d0 <Time_Service>
	}
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40000400 	.word	0x40000400

08000f20 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	Temperature_Service(HAL_ADC_GetValue(hadc));
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 fd12 	bl	8001952 <HAL_ADC_GetValue>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f995 	bl	8001260 <Temperature_Service>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <HAL_ADC_MspInit+0x8c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12f      	bne.n	800101e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <HAL_ADC_MspInit+0x90>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_ADC_MspInit+0x90>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_ADC_MspInit+0x90>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_ADC_MspInit+0x90>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_ADC_MspInit+0x90>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_ADC_MspInit+0x90>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_ADC_MspInit+0x94>)
 800100a:	f001 f80d 	bl	8002028 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2012      	movs	r0, #18
 8001014:	f000 ffd1 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001018:	2012      	movs	r0, #18
 800101a:	f000 ffea 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40012000 	.word	0x40012000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020800 	.word	0x40020800

08001034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_I2C_MspInit+0x84>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12c      	bne.n	80010b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_I2C_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_I2C_MspInit+0x88>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_I2C_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001072:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001078:	2312      	movs	r3, #18
 800107a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107c:	2301      	movs	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001084:	2304      	movs	r3, #4
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <HAL_I2C_MspInit+0x8c>)
 8001090:	f000 ffca 	bl	8002028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_I2C_MspInit+0x88>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_I2C_MspInit+0x88>)
 800109e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_I2C_MspInit+0x88>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40005400 	.word	0x40005400
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020400 	.word	0x40020400

080010c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_TIM_Base_MspInit+0x48>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d115      	bne.n	8001102 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_TIM_Base_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <HAL_TIM_Base_MspInit+0x4c>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_TIM_Base_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	201d      	movs	r0, #29
 80010f8:	f000 ff5f 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010fc:	201d      	movs	r0, #29
 80010fe:	f000 ff78 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40000400 	.word	0x40000400
 8001110:	40023800 	.word	0x40023800

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 f97c 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <ADC_IRQHandler+0x10>)
 8001176:	f000 faab 	bl	80016d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000184 	.word	0x20000184

08001184 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM3_IRQHandler+0x10>)
 800118a:	f002 f9f8 	bl	800357e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000144 	.word	0x20000144

08001198 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800119c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011a0:	f001 f8f8 	bl	8002394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x50>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x16>
		heap_end = &end;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <_sbrk+0x50>)
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <_sbrk+0x54>)
 80011bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <_sbrk+0x50>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <_sbrk+0x50>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	466a      	mov	r2, sp
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d907      	bls.n	80011e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011d2:	f002 fd57 	bl	8003c84 <__errno>
 80011d6:	4602      	mov	r2, r0
 80011d8:	230c      	movs	r3, #12
 80011da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	e006      	b.n	80011f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <_sbrk+0x50>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <_sbrk+0x50>)
 80011ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000008c 	.word	0x2000008c
 80011fc:	200001e8 	.word	0x200001e8

08001200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <SystemInit+0x28>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <SystemInit+0x28>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SystemInit+0x28>)
 8001216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121a:	609a      	str	r2, [r3, #8]
#endif
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Get_Current_Temperature>:
#define ADC_RESOLUTION 4095
float currentTemperature;
uint8_t status = 0;

uint8_t Get_Current_Temperature(float *temperature)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	if (status)
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <Get_Current_Temperature+0x2c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <Get_Current_Temperature+0x1c>
	{
		*temperature = currentTemperature;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <Get_Current_Temperature+0x30>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	601a      	str	r2, [r3, #0]
		return 1;
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <Get_Current_Temperature+0x1e>
	}
	return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000090 	.word	0x20000090
 800125c:	200001cc 	.word	0x200001cc

08001260 <Temperature_Service>:
uint8_t Get_Average_Temperature(float *temperature)
{
	return 0; //todo zrobic usredniania z zapisem dla flash
}
void Temperature_Service(uint32_t adcValue)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;
	if (Get_Sys_Seconds() % 2 == 0)
 8001268:	f000 f874 	bl	8001354 <Get_Sys_Seconds>
 800126c:	4603      	mov	r3, r0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d106      	bne.n	8001284 <Temperature_Service+0x24>
	{
		count = 0;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <Temperature_Service+0x5c>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
		status = 0;
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <Temperature_Service+0x60>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	e004      	b.n	800128e <Temperature_Service+0x2e>
	}
	else
	{
		count++;
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <Temperature_Service+0x5c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <Temperature_Service+0x5c>)
 800128c:	6013      	str	r3, [r2, #0]
	}
	status = 1;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <Temperature_Service+0x60>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
	currentTemperature = (SUPPLY_VOLTAGE / ADC_RESOLUTION) * adcValue * 100.0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80012c4 <Temperature_Service+0x64>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80012c8 <Temperature_Service+0x68>
 80012aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <Temperature_Service+0x6c>)
 80012b0:	edc3 7a00 	vstr	s15, [r3]
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000094 	.word	0x20000094
 80012c0:	20000090 	.word	0x20000090
 80012c4:	3a534067 	.word	0x3a534067
 80012c8:	42c80000 	.word	0x42c80000
 80012cc:	200001cc 	.word	0x200001cc

080012d0 <Time_Service>:

#define INTERUPT_TIME_IN_MILIS 10
timer_struct timerService;

void Time_Service(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	timerService.miliseconds+=INTERUPT_TIME_IN_MILIS;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <Time_Service+0x60>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	330a      	adds	r3, #10
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <Time_Service+0x60>)
 80012dc:	6013      	str	r3, [r2, #0]
	if(timerService.miliseconds % 1000 == 0)
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <Time_Service+0x60>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <Time_Service+0x64>)
 80012e4:	fba3 1302 	umull	r1, r3, r3, r2
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d116      	bne.n	8001326 <Time_Service+0x56>
	{
		timerService.seconds++;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <Time_Service+0x60>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <Time_Service+0x60>)
 8001300:	6053      	str	r3, [r2, #4]
		if(timerService.seconds %60==0)
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <Time_Service+0x60>)
 8001304:	6859      	ldr	r1, [r3, #4]
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <Time_Service+0x68>)
 8001308:	fba3 2301 	umull	r2, r3, r3, r1
 800130c:	095a      	lsrs	r2, r3, #5
 800130e:	4613      	mov	r3, r2
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	1aca      	subs	r2, r1, r3
 8001318:	2a00      	cmp	r2, #0
 800131a:	d104      	bne.n	8001326 <Time_Service+0x56>
		{
			timerService.minutes++;
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <Time_Service+0x60>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	3301      	adds	r3, #1
 8001322:	4a03      	ldr	r2, [pc, #12]	; (8001330 <Time_Service+0x60>)
 8001324:	6093      	str	r3, [r2, #8]
		}
	}

}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	200001d0 	.word	0x200001d0
 8001334:	10624dd3 	.word	0x10624dd3
 8001338:	88888889 	.word	0x88888889

0800133c <Get_Sys_Time>:
uint32_t Get_Sys_Time(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
	return timerService.miliseconds;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <Get_Sys_Time+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200001d0 	.word	0x200001d0

08001354 <Get_Sys_Seconds>:
uint32_t Get_Sys_Seconds(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	return timerService.seconds;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <Get_Sys_Seconds+0x14>)
 800135a:	685b      	ldr	r3, [r3, #4]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	200001d0 	.word	0x200001d0

0800136c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001370:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001372:	e003      	b.n	800137c <LoopCopyDataInit>

08001374 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001376:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001378:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800137a:	3104      	adds	r1, #4

0800137c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001380:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001382:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001384:	d3f6      	bcc.n	8001374 <CopyDataInit>
  ldr  r2, =_sbss
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001388:	e002      	b.n	8001390 <LoopFillZerobss>

0800138a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800138a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800138c:	f842 3b04 	str.w	r3, [r2], #4

08001390 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001392:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001394:	d3f9      	bcc.n	800138a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001396:	f7ff ff33 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139a:	f002 fc79 	bl	8003c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139e:	f7ff fb7f 	bl	8000aa0 <main>
  bx  lr    
 80013a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013a8:	08004610 	.word	0x08004610
  ldr  r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013b0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80013b4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80013b8:	200001e4 	.word	0x200001e4

080013bc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <DMA1_Stream0_IRQHandler>
	...

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <HAL_Init+0x40>)
 80013ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_Init+0x40>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_Init+0x40>)
 80013e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 fddb 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff fdaa 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023c00 	.word	0x40023c00

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fdf3 	bl	800200e <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 fdbb 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000000 	.word	0x20000000
 800145c:	20000008 	.word	0x20000008
 8001460:	20000004 	.word	0x20000004

08001464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x20>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x24>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_IncTick+0x24>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000008 	.word	0x20000008
 8001488:	200001dc 	.word	0x200001dc

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_GetTick+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	200001dc 	.word	0x200001dc

080014a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff ffee 	bl	800148c <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014bc:	d005      	beq.n	80014ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_Delay+0x40>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ca:	bf00      	nop
 80014cc:	f7ff ffde 	bl	800148c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8f7      	bhi.n	80014cc <HAL_Delay+0x28>
  {
  }
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000008 	.word	0x20000008

080014e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e033      	b.n	8001566 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d109      	bne.n	800151a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fd48 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	2b00      	cmp	r3, #0
 8001524:	d118      	bne.n	8001558 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800152e:	f023 0302 	bic.w	r3, r3, #2
 8001532:	f043 0202 	orr.w	r2, r3, #2
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fb5c 	bl	8001bf8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f023 0303 	bic.w	r3, r3, #3
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
 8001556:	e001      	b.n	800155c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADC_Start_IT+0x1a>
 8001586:	2302      	movs	r3, #2
 8001588:	e094      	b.n	80016b4 <HAL_ADC_Start_IT+0x144>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d018      	beq.n	80015d2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015b0:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_ADC_Start_IT+0x150>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a43      	ldr	r2, [pc, #268]	; (80016c4 <HAL_ADC_Start_IT+0x154>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9a      	lsrs	r2, r3, #18
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80015c4:	e002      	b.n	80015cc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f9      	bne.n	80015c6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d168      	bne.n	80016b2 <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800160a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800161e:	d106      	bne.n	800162e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f023 0206 	bic.w	r2, r3, #6
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	645a      	str	r2, [r3, #68]	; 0x44
 800162c:	e002      	b.n	8001634 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_ADC_Start_IT+0x158>)
 800163e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001648:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10f      	bne.n	800168a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d11c      	bne.n	80016b2 <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e013      	b.n	80016b2 <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_ADC_Start_IT+0x15c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d10e      	bne.n	80016b2 <HAL_ADC_Start_IT+0x142>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d107      	bne.n	80016b2 <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016b0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20000000 	.word	0x20000000
 80016c4:	431bde83 	.word	0x431bde83
 80016c8:	40012300 	.word	0x40012300
 80016cc:	40012000 	.word	0x40012000

080016d0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	bf0c      	ite	eq
 80016ee:	2301      	moveq	r3, #1
 80016f0:	2300      	movne	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b20      	cmp	r3, #32
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d049      	beq.n	80017a6 <HAL_ADC_IRQHandler+0xd6>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d046      	beq.n	80017a6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d12b      	bne.n	8001796 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d127      	bne.n	8001796 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800175e:	2b00      	cmp	r3, #0
 8001760:	d119      	bne.n	8001796 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0220 	bic.w	r2, r2, #32
 8001770:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fbc2 	bl	8000f20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0212 	mvn.w	r2, #18
 80017a4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c6:	2b80      	cmp	r3, #128	; 0x80
 80017c8:	bf0c      	ite	eq
 80017ca:	2301      	moveq	r3, #1
 80017cc:	2300      	movne	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d057      	beq.n	8001888 <HAL_ADC_IRQHandler+0x1b8>
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d054      	beq.n	8001888 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d139      	bne.n	8001878 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800181c:	2b00      	cmp	r3, #0
 800181e:	d12b      	bne.n	8001878 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d124      	bne.n	8001878 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001838:	2b00      	cmp	r3, #0
 800183a:	d11d      	bne.n	8001878 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001840:	2b00      	cmp	r3, #0
 8001842:	d119      	bne.n	8001878 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001852:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fab9 	bl	8001df0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f06f 020c 	mvn.w	r2, #12
 8001886:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	bf0c      	ite	eq
 8001896:	2301      	moveq	r3, #1
 8001898:	2300      	movne	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a8:	2b40      	cmp	r3, #64	; 0x40
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d017      	beq.n	80018ea <HAL_ADC_IRQHandler+0x21a>
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d014      	beq.n	80018ea <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d10d      	bne.n	80018ea <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f846 	bl	800196c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f06f 0201 	mvn.w	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800190a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d015      	beq.n	800194a <HAL_ADC_IRQHandler+0x27a>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d012      	beq.n	800194a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f043 0202 	orr.w	r2, r3, #2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0220 	mvn.w	r2, #32
 8001938:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f820 	bl	8001980 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f06f 0220 	mvn.w	r2, #32
 8001948:	601a      	str	r2, [r3, #0]
  }
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1c>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e113      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x244>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b09      	cmp	r3, #9
 80019be:	d925      	bls.n	8001a0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68d9      	ldr	r1, [r3, #12]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	3b1e      	subs	r3, #30
 80019d6:	2207      	movs	r2, #7
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43da      	mvns	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	400a      	ands	r2, r1
 80019e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68d9      	ldr	r1, [r3, #12]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4403      	add	r3, r0
 80019fe:	3b1e      	subs	r3, #30
 8001a00:	409a      	lsls	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	e022      	b.n	8001a52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	2207      	movs	r2, #7
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6919      	ldr	r1, [r3, #16]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4403      	add	r3, r0
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d824      	bhi.n	8001aa4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b05      	subs	r3, #5
 8001a6c:	221f      	movs	r2, #31
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	400a      	ands	r2, r1
 8001a7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3b05      	subs	r3, #5
 8001a96:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa2:	e04c      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d824      	bhi.n	8001af6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b23      	subs	r3, #35	; 0x23
 8001abe:	221f      	movs	r2, #31
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	400a      	ands	r2, r1
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b23      	subs	r3, #35	; 0x23
 8001ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
 8001af4:	e023      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	3b41      	subs	r3, #65	; 0x41
 8001b08:	221f      	movs	r2, #31
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	400a      	ands	r2, r1
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4618      	mov	r0, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b41      	subs	r3, #65	; 0x41
 8001b32:	fa00 f203 	lsl.w	r2, r0, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <HAL_ADC_ConfigChannel+0x250>)
 8001b40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a28      	ldr	r2, [pc, #160]	; (8001be8 <HAL_ADC_ConfigChannel+0x254>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d10f      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1d8>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b12      	cmp	r3, #18
 8001b52:	d10b      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <HAL_ADC_ConfigChannel+0x254>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12b      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x23a>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <HAL_ADC_ConfigChannel+0x258>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d003      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x1f4>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b11      	cmp	r3, #17
 8001b86:	d122      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a11      	ldr	r2, [pc, #68]	; (8001bec <HAL_ADC_ConfigChannel+0x258>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d111      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_ADC_ConfigChannel+0x25c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_ADC_ConfigChannel+0x260>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	0c9a      	lsrs	r2, r3, #18
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40012300 	.word	0x40012300
 8001be8:	40012000 	.word	0x40012000
 8001bec:	10000012 	.word	0x10000012
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	431bde83 	.word	0x431bde83

08001bf8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c00:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <ADC_Init+0x1f0>)
 8001c02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	021a      	lsls	r2, r3, #8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6899      	ldr	r1, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	4a58      	ldr	r2, [pc, #352]	; (8001dec <ADC_Init+0x1f4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6899      	ldr	r1, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	e00f      	b.n	8001cf6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0202 	bic.w	r2, r2, #2
 8001d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6899      	ldr	r1, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7e1b      	ldrb	r3, [r3, #24]
 8001d10:	005a      	lsls	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01b      	beq.n	8001d5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6859      	ldr	r1, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	035a      	lsls	r2, r3, #13
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	e007      	b.n	8001d6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	051a      	lsls	r2, r3, #20
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dae:	025a      	lsls	r2, r3, #9
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6899      	ldr	r1, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	029a      	lsls	r2, r3, #10
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40012300 	.word	0x40012300
 8001dec:	0f000001 	.word	0x0f000001

08001df0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <__NVIC_EnableIRQ+0x38>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff29 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff3e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff8e 	bl	8001ef8 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff31 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e159      	b.n	80022f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8148 	bne.w	80022f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d00b      	beq.n	8002082 <HAL_GPIO_Init+0x5a>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002076:	2b11      	cmp	r3, #17
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b12      	cmp	r3, #18
 8002080:	d130      	bne.n	80020e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0xfc>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b12      	cmp	r3, #18
 8002122:	d123      	bne.n	800216c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	69b9      	ldr	r1, [r7, #24]
 8002168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a2 	beq.w	80022f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b56      	ldr	r3, [pc, #344]	; (800230c <HAL_GPIO_Init+0x2e4>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a55      	ldr	r2, [pc, #340]	; (800230c <HAL_GPIO_Init+0x2e4>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_GPIO_Init+0x2e4>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ca:	4a51      	ldr	r2, [pc, #324]	; (8002310 <HAL_GPIO_Init+0x2e8>)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_GPIO_Init+0x2ec>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x202>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a47      	ldr	r2, [pc, #284]	; (8002318 <HAL_GPIO_Init+0x2f0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x1fe>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a46      	ldr	r2, [pc, #280]	; (800231c <HAL_GPIO_Init+0x2f4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x1fa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a45      	ldr	r2, [pc, #276]	; (8002320 <HAL_GPIO_Init+0x2f8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x1f6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a44      	ldr	r2, [pc, #272]	; (8002324 <HAL_GPIO_Init+0x2fc>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x1f2>
 8002216:	2304      	movs	r3, #4
 8002218:	e008      	b.n	800222c <HAL_GPIO_Init+0x204>
 800221a:	2307      	movs	r3, #7
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x204>
 800221e:	2303      	movs	r3, #3
 8002220:	e004      	b.n	800222c <HAL_GPIO_Init+0x204>
 8002222:	2302      	movs	r3, #2
 8002224:	e002      	b.n	800222c <HAL_GPIO_Init+0x204>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_GPIO_Init+0x204>
 800222a:	2300      	movs	r3, #0
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	f002 0203 	and.w	r2, r2, #3
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	4093      	lsls	r3, r2
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223c:	4934      	ldr	r1, [pc, #208]	; (8002310 <HAL_GPIO_Init+0x2e8>)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800224a:	4b37      	ldr	r3, [pc, #220]	; (8002328 <HAL_GPIO_Init+0x300>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226e:	4a2e      	ldr	r2, [pc, #184]	; (8002328 <HAL_GPIO_Init+0x300>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002274:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <HAL_GPIO_Init+0x300>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002298:	4a23      	ldr	r2, [pc, #140]	; (8002328 <HAL_GPIO_Init+0x300>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_GPIO_Init+0x300>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c2:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_GPIO_Init+0x300>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_GPIO_Init+0x300>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_GPIO_Init+0x300>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	f67f aea2 	bls.w	8002044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002300:	bf00      	nop
 8002302:	3724      	adds	r7, #36	; 0x24
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40023800 	.word	0x40023800
 8002310:	40013800 	.word	0x40013800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40021000 	.word	0x40021000
 8002328:	40013c00 	.word	0x40013c00

0800232c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002348:	e003      	b.n	8002352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	041a      	lsls	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	401a      	ands	r2, r3
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	429a      	cmp	r2, r3
 8002376:	d104      	bne.n	8002382 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002378:	887b      	ldrh	r3, [r7, #2]
 800237a:	041a      	lsls	r2, r3, #16
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002380:	e002      	b.n	8002388 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fd8c 	bl	8000ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e11f      	b.n	8002616 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fe22 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2224      	movs	r2, #36	; 0x24
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002428:	f001 f846 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 800242c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4a7b      	ldr	r2, [pc, #492]	; (8002620 <HAL_I2C_Init+0x25c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d807      	bhi.n	8002448 <HAL_I2C_Init+0x84>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a7a      	ldr	r2, [pc, #488]	; (8002624 <HAL_I2C_Init+0x260>)
 800243c:	4293      	cmp	r3, r2
 800243e:	bf94      	ite	ls
 8002440:	2301      	movls	r3, #1
 8002442:	2300      	movhi	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	e006      	b.n	8002456 <HAL_I2C_Init+0x92>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a77      	ldr	r2, [pc, #476]	; (8002628 <HAL_I2C_Init+0x264>)
 800244c:	4293      	cmp	r3, r2
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0db      	b.n	8002616 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a72      	ldr	r2, [pc, #456]	; (800262c <HAL_I2C_Init+0x268>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0c9b      	lsrs	r3, r3, #18
 8002468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a64      	ldr	r2, [pc, #400]	; (8002620 <HAL_I2C_Init+0x25c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d802      	bhi.n	8002498 <HAL_I2C_Init+0xd4>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3301      	adds	r3, #1
 8002496:	e009      	b.n	80024ac <HAL_I2C_Init+0xe8>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	4a63      	ldr	r2, [pc, #396]	; (8002630 <HAL_I2C_Init+0x26c>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	3301      	adds	r3, #1
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4956      	ldr	r1, [pc, #344]	; (8002620 <HAL_I2C_Init+0x25c>)
 80024c8:	428b      	cmp	r3, r1
 80024ca:	d80d      	bhi.n	80024e8 <HAL_I2C_Init+0x124>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e59      	subs	r1, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	bf38      	it	cc
 80024e4:	2304      	movcc	r3, #4
 80024e6:	e04f      	b.n	8002588 <HAL_I2C_Init+0x1c4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <HAL_I2C_Init+0x150>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e012      	b.n	800253a <HAL_I2C_Init+0x176>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1e58      	subs	r0, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	0099      	lsls	r1, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x17e>
 800253e:	2301      	movs	r3, #1
 8002540:	e022      	b.n	8002588 <HAL_I2C_Init+0x1c4>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10e      	bne.n	8002568 <HAL_I2C_Init+0x1a4>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1e58      	subs	r0, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	440b      	add	r3, r1
 8002558:	fbb0 f3f3 	udiv	r3, r0, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002566:	e00f      	b.n	8002588 <HAL_I2C_Init+0x1c4>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	0099      	lsls	r1, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	6809      	ldr	r1, [r1, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6911      	ldr	r1, [r2, #16]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	000186a0 	.word	0x000186a0
 8002624:	001e847f 	.word	0x001e847f
 8002628:	003d08ff 	.word	0x003d08ff
 800262c:	431bde83 	.word	0x431bde83
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	461a      	mov	r2, r3
 8002640:	460b      	mov	r3, r1
 8002642:	817b      	strh	r3, [r7, #10]
 8002644:	4613      	mov	r3, r2
 8002646:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7fe ff20 	bl	800148c <HAL_GetTick>
 800264c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	f040 80e0 	bne.w	800281c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2319      	movs	r3, #25
 8002662:	2201      	movs	r2, #1
 8002664:	4970      	ldr	r1, [pc, #448]	; (8002828 <HAL_I2C_Master_Transmit+0x1f4>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f964 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002672:	2302      	movs	r3, #2
 8002674:	e0d3      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_I2C_Master_Transmit+0x50>
 8002680:	2302      	movs	r3, #2
 8002682:	e0cc      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d007      	beq.n	80026aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2221      	movs	r2, #33	; 0x21
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2210      	movs	r2, #16
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	893a      	ldrh	r2, [r7, #8]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a50      	ldr	r2, [pc, #320]	; (800282c <HAL_I2C_Master_Transmit+0x1f8>)
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026ec:	8979      	ldrh	r1, [r7, #10]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	6a3a      	ldr	r2, [r7, #32]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f89c 	bl	8002830 <I2C_MasterRequestWrite>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e08d      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002718:	e066      	b.n	80027e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	6a39      	ldr	r1, [r7, #32]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f9de 	bl	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b04      	cmp	r3, #4
 8002730:	d107      	bne.n	8002742 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b04      	cmp	r3, #4
 8002782:	d11b      	bne.n	80027bc <HAL_I2C_Master_Transmit+0x188>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d017      	beq.n	80027bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	6a39      	ldr	r1, [r7, #32]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f9ce 	bl	8002b62 <I2C_WaitOnBTFFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d107      	bne.n	80027e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e01a      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d194      	bne.n	800271a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
  }
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	00100002 	.word	0x00100002
 800282c:	ffff0000 	.word	0xffff0000

08002830 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	460b      	mov	r3, r1
 800283e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d006      	beq.n	800285a <I2C_MasterRequestWrite+0x2a>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d003      	beq.n	800285a <I2C_MasterRequestWrite+0x2a>
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002858:	d108      	bne.n	800286c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e00b      	b.n	8002884 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	2b12      	cmp	r3, #18
 8002872:	d107      	bne.n	8002884 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002882:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f84f 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00c      	beq.n	80028b6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e035      	b.n	8002922 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028be:	d108      	bne.n	80028d2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028c0:	897b      	ldrh	r3, [r7, #10]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ce:	611a      	str	r2, [r3, #16]
 80028d0:	e01b      	b.n	800290a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	11db      	asrs	r3, r3, #7
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 0306 	and.w	r3, r3, #6
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f063 030f 	orn	r3, r3, #15
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	490f      	ldr	r1, [pc, #60]	; (800292c <I2C_MasterRequestWrite+0xfc>)
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f876 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e010      	b.n	8002922 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002900:	897b      	ldrh	r3, [r7, #10]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4908      	ldr	r1, [pc, #32]	; (8002930 <I2C_MasterRequestWrite+0x100>)
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f866 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	00010008 	.word	0x00010008
 8002930:	00010002 	.word	0x00010002

08002934 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002944:	e025      	b.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d021      	beq.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7fe fd9d 	bl	800148c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_WaitOnFlagUntilTimeout+0x30>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d116      	bne.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e023      	b.n	80029da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10d      	bne.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	e00c      	b.n	80029d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d0b6      	beq.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f0:	e051      	b.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d123      	bne.n	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f043 0204 	orr.w	r2, r3, #4
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e046      	b.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d021      	beq.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7fe fd1b 	bl	800148c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d116      	bne.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0220 	orr.w	r2, r3, #32
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e020      	b.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10c      	bne.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e00b      	b.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d18d      	bne.n	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aec:	e02d      	b.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f878 	bl	8002be4 <I2C_IsAcknowledgeFailed>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e02d      	b.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d021      	beq.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe fcc1 	bl	800148c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d116      	bne.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e007      	b.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	2b80      	cmp	r3, #128	; 0x80
 8002b56:	d1ca      	bne.n	8002aee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b6e:	e02d      	b.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f837 	bl	8002be4 <I2C_IsAcknowledgeFailed>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e02d      	b.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d021      	beq.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fe fc80 	bl	800148c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e007      	b.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d1ca      	bne.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfa:	d11b      	bne.n	8002c34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e25b      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d075      	beq.n	8002d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c62:	4ba3      	ldr	r3, [pc, #652]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d00c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6e:	4ba0      	ldr	r3, [pc, #640]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d112      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7a:	4b9d      	ldr	r3, [pc, #628]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	4b99      	ldr	r3, [pc, #612]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05b      	beq.n	8002d4c <HAL_RCC_OscConfig+0x108>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d157      	bne.n	8002d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e236      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x74>
 8002caa:	4b91      	ldr	r3, [pc, #580]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a90      	ldr	r2, [pc, #576]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e01d      	b.n	8002cf4 <HAL_RCC_OscConfig+0xb0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x98>
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a8a      	ldr	r2, [pc, #552]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a87      	ldr	r2, [pc, #540]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0xb0>
 8002cdc:	4b84      	ldr	r3, [pc, #528]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a83      	ldr	r2, [pc, #524]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b81      	ldr	r3, [pc, #516]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a80      	ldr	r2, [pc, #512]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fbc6 	bl	800148c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fbc2 	bl	800148c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1fb      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0xc0>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe fbb2 	bl	800148c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fbae 	bl	800148c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1e7      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0xe8>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d5a:	4b65      	ldr	r3, [pc, #404]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d66:	4b62      	ldr	r3, [pc, #392]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d72:	4b5f      	ldr	r3, [pc, #380]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x152>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1bb      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b56      	ldr	r3, [pc, #344]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4952      	ldr	r1, [pc, #328]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db4:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <HAL_RCC_OscConfig+0x2b0>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe fb67 	bl	800148c <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe fb63 	bl	800148c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e19c      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4940      	ldr	r1, [pc, #256]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <HAL_RCC_OscConfig+0x2b0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fb46 	bl	800148c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fe fb42 	bl	800148c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e17b      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d030      	beq.n	8002e90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCC_OscConfig+0x2b4>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fb26 	bl	800148c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe fb22 	bl	800148c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e15b      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x200>
 8002e62:	e015      	b.n	8002e90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e64:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCC_OscConfig+0x2b4>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fb0f 	bl	800148c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e72:	f7fe fb0b 	bl	800148c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e144      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80a0 	beq.w	8002fde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_OscConfig+0x2b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d121      	bne.n	8002f1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_RCC_OscConfig+0x2b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_RCC_OscConfig+0x2b8>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fad1 	bl	800148c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	e011      	b.n	8002f12 <HAL_RCC_OscConfig+0x2ce>
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	42470000 	.word	0x42470000
 8002ef8:	42470e80 	.word	0x42470e80
 8002efc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f00:	f7fe fac4 	bl	800148c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0fd      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f12:	4b81      	ldr	r3, [pc, #516]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d106      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2f0>
 8002f26:	4b7d      	ldr	r3, [pc, #500]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a7c      	ldr	r2, [pc, #496]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	e01c      	b.n	8002f6e <HAL_RCC_OscConfig+0x32a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b05      	cmp	r3, #5
 8002f3a:	d10c      	bne.n	8002f56 <HAL_RCC_OscConfig+0x312>
 8002f3c:	4b77      	ldr	r3, [pc, #476]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a76      	ldr	r2, [pc, #472]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	4b74      	ldr	r3, [pc, #464]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a73      	ldr	r2, [pc, #460]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
 8002f54:	e00b      	b.n	8002f6e <HAL_RCC_OscConfig+0x32a>
 8002f56:	4b71      	ldr	r3, [pc, #452]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a70      	ldr	r2, [pc, #448]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70
 8002f62:	4b6e      	ldr	r3, [pc, #440]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4a6d      	ldr	r2, [pc, #436]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f68:	f023 0304 	bic.w	r3, r3, #4
 8002f6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d015      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f76:	f7fe fa89 	bl	800148c <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fe fa85 	bl	800148c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0bc      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	4b61      	ldr	r3, [pc, #388]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ee      	beq.n	8002f7e <HAL_RCC_OscConfig+0x33a>
 8002fa0:	e014      	b.n	8002fcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fa73 	bl	800148c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fe fa6f 	bl	800148c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0a6      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc0:	4b56      	ldr	r3, [pc, #344]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ee      	bne.n	8002faa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d105      	bne.n	8002fde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd2:	4b52      	ldr	r3, [pc, #328]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a51      	ldr	r2, [pc, #324]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8092 	beq.w	800310c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe8:	4b4c      	ldr	r3, [pc, #304]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d05c      	beq.n	80030ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d141      	bne.n	8003080 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffc:	4b48      	ldr	r3, [pc, #288]	; (8003120 <HAL_RCC_OscConfig+0x4dc>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fe fa43 	bl	800148c <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300a:	f7fe fa3f 	bl	800148c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e078      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301c:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	019b      	lsls	r3, r3, #6
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	3b01      	subs	r3, #1
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	061b      	lsls	r3, r3, #24
 800304c:	4933      	ldr	r1, [pc, #204]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003052:	4b33      	ldr	r3, [pc, #204]	; (8003120 <HAL_RCC_OscConfig+0x4dc>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fe fa18 	bl	800148c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe fa14 	bl	800148c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e04d      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x41c>
 800307e:	e045      	b.n	800310c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003080:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_RCC_OscConfig+0x4dc>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe fa01 	bl	800148c <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308e:	f7fe f9fd 	bl	800148c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e036      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a0:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x44a>
 80030ac:	e02e      	b.n	800310c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e029      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d11c      	bne.n	8003108 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d115      	bne.n	8003108 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e2:	4013      	ands	r3, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10d      	bne.n	8003108 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d106      	bne.n	8003108 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40007000 	.word	0x40007000
 800311c:	40023800 	.word	0x40023800
 8003120:	42470060 	.word	0x42470060

08003124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0cc      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b68      	ldr	r3, [pc, #416]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d90c      	bls.n	8003160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b65      	ldr	r3, [pc, #404]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0b8      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003178:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800319a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	494d      	ldr	r1, [pc, #308]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d044      	beq.n	8003244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d119      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e07f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e06f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e067      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4934      	ldr	r1, [pc, #208]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003214:	f7fe f93a 	bl	800148c <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fe f936 	bl	800148c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e04f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d20c      	bcs.n	800326c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e032      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4916      	ldr	r1, [pc, #88]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	490e      	ldr	r1, [pc, #56]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032aa:	f000 f821 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032ae:	4601      	mov	r1, r0
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	5cd3      	ldrb	r3, [r2, r3]
 80032be:	fa21 f303 	lsr.w	r3, r1, r3
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe f89a 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00
 80032e0:	40023800 	.word	0x40023800
 80032e4:	080045b4 	.word	0x080045b4
 80032e8:	20000000 	.word	0x20000000
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	2300      	movs	r3, #0
 8003300:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003306:	4b63      	ldr	r3, [pc, #396]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b04      	cmp	r3, #4
 8003310:	d007      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x32>
 8003312:	2b08      	cmp	r3, #8
 8003314:	d008      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x38>
 8003316:	2b00      	cmp	r3, #0
 8003318:	f040 80b4 	bne.w	8003484 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b5e      	ldr	r3, [pc, #376]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800331e:	60bb      	str	r3, [r7, #8]
       break;
 8003320:	e0b3      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003322:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003324:	60bb      	str	r3, [r7, #8]
      break;
 8003326:	e0b0      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003328:	4b5a      	ldr	r3, [pc, #360]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003330:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003332:	4b58      	ldr	r3, [pc, #352]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d04a      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333e:	4b55      	ldr	r3, [pc, #340]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	099b      	lsrs	r3, r3, #6
 8003344:	f04f 0400 	mov.w	r4, #0
 8003348:	f240 11ff 	movw	r1, #511	; 0x1ff
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	ea03 0501 	and.w	r5, r3, r1
 8003354:	ea04 0602 	and.w	r6, r4, r2
 8003358:	4629      	mov	r1, r5
 800335a:	4632      	mov	r2, r6
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	f04f 0400 	mov.w	r4, #0
 8003364:	0154      	lsls	r4, r2, #5
 8003366:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800336a:	014b      	lsls	r3, r1, #5
 800336c:	4619      	mov	r1, r3
 800336e:	4622      	mov	r2, r4
 8003370:	1b49      	subs	r1, r1, r5
 8003372:	eb62 0206 	sbc.w	r2, r2, r6
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	f04f 0400 	mov.w	r4, #0
 800337e:	0194      	lsls	r4, r2, #6
 8003380:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003384:	018b      	lsls	r3, r1, #6
 8003386:	1a5b      	subs	r3, r3, r1
 8003388:	eb64 0402 	sbc.w	r4, r4, r2
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	00e2      	lsls	r2, r4, #3
 8003396:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800339a:	00d9      	lsls	r1, r3, #3
 800339c:	460b      	mov	r3, r1
 800339e:	4614      	mov	r4, r2
 80033a0:	195b      	adds	r3, r3, r5
 80033a2:	eb44 0406 	adc.w	r4, r4, r6
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	0262      	lsls	r2, r4, #9
 80033b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033b4:	0259      	lsls	r1, r3, #9
 80033b6:	460b      	mov	r3, r1
 80033b8:	4614      	mov	r4, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	4621      	mov	r1, r4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f04f 0400 	mov.w	r4, #0
 80033c4:	461a      	mov	r2, r3
 80033c6:	4623      	mov	r3, r4
 80033c8:	f7fc ff62 	bl	8000290 <__aeabi_uldivmod>
 80033cc:	4603      	mov	r3, r0
 80033ce:	460c      	mov	r4, r1
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e049      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d4:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	f04f 0400 	mov.w	r4, #0
 80033de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	ea03 0501 	and.w	r5, r3, r1
 80033ea:	ea04 0602 	and.w	r6, r4, r2
 80033ee:	4629      	mov	r1, r5
 80033f0:	4632      	mov	r2, r6
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	f04f 0400 	mov.w	r4, #0
 80033fa:	0154      	lsls	r4, r2, #5
 80033fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003400:	014b      	lsls	r3, r1, #5
 8003402:	4619      	mov	r1, r3
 8003404:	4622      	mov	r2, r4
 8003406:	1b49      	subs	r1, r1, r5
 8003408:	eb62 0206 	sbc.w	r2, r2, r6
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	f04f 0400 	mov.w	r4, #0
 8003414:	0194      	lsls	r4, r2, #6
 8003416:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800341a:	018b      	lsls	r3, r1, #6
 800341c:	1a5b      	subs	r3, r3, r1
 800341e:	eb64 0402 	sbc.w	r4, r4, r2
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	00e2      	lsls	r2, r4, #3
 800342c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003430:	00d9      	lsls	r1, r3, #3
 8003432:	460b      	mov	r3, r1
 8003434:	4614      	mov	r4, r2
 8003436:	195b      	adds	r3, r3, r5
 8003438:	eb44 0406 	adc.w	r4, r4, r6
 800343c:	f04f 0100 	mov.w	r1, #0
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	02a2      	lsls	r2, r4, #10
 8003446:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800344a:	0299      	lsls	r1, r3, #10
 800344c:	460b      	mov	r3, r1
 800344e:	4614      	mov	r4, r2
 8003450:	4618      	mov	r0, r3
 8003452:	4621      	mov	r1, r4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f04f 0400 	mov.w	r4, #0
 800345a:	461a      	mov	r2, r3
 800345c:	4623      	mov	r3, r4
 800345e:	f7fc ff17 	bl	8000290 <__aeabi_uldivmod>
 8003462:	4603      	mov	r3, r0
 8003464:	460c      	mov	r4, r1
 8003466:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	3301      	adds	r3, #1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	60bb      	str	r3, [r7, #8]
      break;
 8003482:	e002      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003486:	60bb      	str	r3, [r7, #8]
      break;
 8003488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348a:	68bb      	ldr	r3, [r7, #8]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	00f42400 	.word	0x00f42400
 800349c:	007a1200 	.word	0x007a1200

080034a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000000 	.word	0x20000000

080034b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034bc:	f7ff fff0 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034c0:	4601      	mov	r1, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0a9b      	lsrs	r3, r3, #10
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4a03      	ldr	r2, [pc, #12]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	080045c4 	.word	0x080045c4

080034e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e01d      	b.n	800352e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fd fddc 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f000 fa14 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b06      	cmp	r3, #6
 800355e:	d007      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	d122      	bne.n	80035da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d11b      	bne.n	80035da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0202 	mvn.w	r2, #2
 80035aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f9a5 	bl	8003910 <HAL_TIM_IC_CaptureCallback>
 80035c6:	e005      	b.n	80035d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f997 	bl	80038fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9a8 	bl	8003924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d122      	bne.n	800362e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d11b      	bne.n	800362e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f06f 0204 	mvn.w	r2, #4
 80035fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f97b 	bl	8003910 <HAL_TIM_IC_CaptureCallback>
 800361a:	e005      	b.n	8003628 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f96d 	bl	80038fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f97e 	bl	8003924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b08      	cmp	r3, #8
 800363a:	d122      	bne.n	8003682 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b08      	cmp	r3, #8
 8003648:	d11b      	bne.n	8003682 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0208 	mvn.w	r2, #8
 8003652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2204      	movs	r2, #4
 8003658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f951 	bl	8003910 <HAL_TIM_IC_CaptureCallback>
 800366e:	e005      	b.n	800367c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f943 	bl	80038fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f954 	bl	8003924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b10      	cmp	r3, #16
 800368e:	d122      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b10      	cmp	r3, #16
 800369c:	d11b      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0210 	mvn.w	r2, #16
 80036a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2208      	movs	r2, #8
 80036ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f927 	bl	8003910 <HAL_TIM_IC_CaptureCallback>
 80036c2:	e005      	b.n	80036d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f919 	bl	80038fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f92a 	bl	8003924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d10e      	bne.n	8003702 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d107      	bne.n	8003702 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f06f 0201 	mvn.w	r2, #1
 80036fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7fd fbfd 	bl	8000efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370c:	2b80      	cmp	r3, #128	; 0x80
 800370e:	d10e      	bne.n	800372e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	2b80      	cmp	r3, #128	; 0x80
 800371c:	d107      	bne.n	800372e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 faa1 	bl	8003c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d10e      	bne.n	800375a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d107      	bne.n	800375a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8ef 	bl	8003938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b20      	cmp	r3, #32
 8003766:	d10e      	bne.n	8003786 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b20      	cmp	r3, #32
 8003774:	d107      	bne.n	8003786 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0220 	mvn.w	r2, #32
 800377e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fa6b 	bl	8003c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_ConfigClockSource+0x18>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e0a6      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x166>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037cc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d067      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x120>
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d80b      	bhi.n	80037fa <HAL_TIM_ConfigClockSource+0x6c>
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d073      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x140>
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d802      	bhi.n	80037f0 <HAL_TIM_ConfigClockSource+0x62>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d06f      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037ee:	e078      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d06c      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x140>
 80037f4:	2b30      	cmp	r3, #48	; 0x30
 80037f6:	d06a      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037f8:	e073      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037fa:	2b70      	cmp	r3, #112	; 0x70
 80037fc:	d00d      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x8c>
 80037fe:	2b70      	cmp	r3, #112	; 0x70
 8003800:	d804      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x7e>
 8003802:	2b50      	cmp	r3, #80	; 0x50
 8003804:	d033      	beq.n	800386e <HAL_TIM_ConfigClockSource+0xe0>
 8003806:	2b60      	cmp	r3, #96	; 0x60
 8003808:	d041      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800380a:	e06a      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	d066      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0x152>
 8003812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003816:	d017      	beq.n	8003848 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003818:	e063      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6899      	ldr	r1, [r3, #8]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f000 f989 	bl	8003b40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800383c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	609a      	str	r2, [r3, #8]
      break;
 8003846:	e04c      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f000 f972 	bl	8003b40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800386a:	609a      	str	r2, [r3, #8]
      break;
 800386c:	e039      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	461a      	mov	r2, r3
 800387c:	f000 f8e6 	bl	8003a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2150      	movs	r1, #80	; 0x50
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f93f 	bl	8003b0a <TIM_ITRx_SetConfig>
      break;
 800388c:	e029      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	461a      	mov	r2, r3
 800389c:	f000 f905 	bl	8003aaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2160      	movs	r1, #96	; 0x60
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f92f 	bl	8003b0a <TIM_ITRx_SetConfig>
      break;
 80038ac:	e019      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f000 f8c6 	bl	8003a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f91f 	bl	8003b0a <TIM_ITRx_SetConfig>
      break;
 80038cc:	e009      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f000 f916 	bl	8003b0a <TIM_ITRx_SetConfig>
      break;
 80038de:	e000      	b.n	80038e2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80038e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <TIM_Base_SetConfig+0xe4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00f      	beq.n	8003984 <TIM_Base_SetConfig+0x38>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d00b      	beq.n	8003984 <TIM_Base_SetConfig+0x38>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a31      	ldr	r2, [pc, #196]	; (8003a34 <TIM_Base_SetConfig+0xe8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d007      	beq.n	8003984 <TIM_Base_SetConfig+0x38>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a30      	ldr	r2, [pc, #192]	; (8003a38 <TIM_Base_SetConfig+0xec>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_Base_SetConfig+0x38>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <TIM_Base_SetConfig+0xf0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d108      	bne.n	8003996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <TIM_Base_SetConfig+0xe4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01b      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d017      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <TIM_Base_SetConfig+0xe8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a21      	ldr	r2, [pc, #132]	; (8003a38 <TIM_Base_SetConfig+0xec>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00f      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a20      	ldr	r2, [pc, #128]	; (8003a3c <TIM_Base_SetConfig+0xf0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <TIM_Base_SetConfig+0xf4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <TIM_Base_SetConfig+0xf8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <TIM_Base_SetConfig+0xfc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d108      	bne.n	80039e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <TIM_Base_SetConfig+0xe4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d103      	bne.n	8003a1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	615a      	str	r2, [r3, #20]
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800

08003a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0201 	bic.w	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f023 030a 	bic.w	r3, r3, #10
 8003a88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	621a      	str	r2, [r3, #32]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0210 	bic.w	r2, r3, #16
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	031b      	lsls	r3, r3, #12
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ae6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f043 0307 	orr.w	r3, r3, #7
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	609a      	str	r2, [r3, #8]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	021a      	lsls	r2, r3, #8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	bf00      	nop
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e050      	b.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d013      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a18      	ldr	r2, [pc, #96]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10c      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40014000 	.word	0x40014000

08003c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <__errno>:
 8003c84:	4b01      	ldr	r3, [pc, #4]	; (8003c8c <__errno+0x8>)
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	2000000c 	.word	0x2000000c

08003c90 <__libc_init_array>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	4e0d      	ldr	r6, [pc, #52]	; (8003cc8 <__libc_init_array+0x38>)
 8003c94:	4c0d      	ldr	r4, [pc, #52]	; (8003ccc <__libc_init_array+0x3c>)
 8003c96:	1ba4      	subs	r4, r4, r6
 8003c98:	10a4      	asrs	r4, r4, #2
 8003c9a:	2500      	movs	r5, #0
 8003c9c:	42a5      	cmp	r5, r4
 8003c9e:	d109      	bne.n	8003cb4 <__libc_init_array+0x24>
 8003ca0:	4e0b      	ldr	r6, [pc, #44]	; (8003cd0 <__libc_init_array+0x40>)
 8003ca2:	4c0c      	ldr	r4, [pc, #48]	; (8003cd4 <__libc_init_array+0x44>)
 8003ca4:	f000 fc50 	bl	8004548 <_init>
 8003ca8:	1ba4      	subs	r4, r4, r6
 8003caa:	10a4      	asrs	r4, r4, #2
 8003cac:	2500      	movs	r5, #0
 8003cae:	42a5      	cmp	r5, r4
 8003cb0:	d105      	bne.n	8003cbe <__libc_init_array+0x2e>
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cb8:	4798      	blx	r3
 8003cba:	3501      	adds	r5, #1
 8003cbc:	e7ee      	b.n	8003c9c <__libc_init_array+0xc>
 8003cbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cc2:	4798      	blx	r3
 8003cc4:	3501      	adds	r5, #1
 8003cc6:	e7f2      	b.n	8003cae <__libc_init_array+0x1e>
 8003cc8:	08004608 	.word	0x08004608
 8003ccc:	08004608 	.word	0x08004608
 8003cd0:	08004608 	.word	0x08004608
 8003cd4:	0800460c 	.word	0x0800460c

08003cd8 <malloc>:
 8003cd8:	4b02      	ldr	r3, [pc, #8]	; (8003ce4 <malloc+0xc>)
 8003cda:	4601      	mov	r1, r0
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	f000 b861 	b.w	8003da4 <_malloc_r>
 8003ce2:	bf00      	nop
 8003ce4:	2000000c 	.word	0x2000000c

08003ce8 <free>:
 8003ce8:	4b02      	ldr	r3, [pc, #8]	; (8003cf4 <free+0xc>)
 8003cea:	4601      	mov	r1, r0
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	f000 b80b 	b.w	8003d08 <_free_r>
 8003cf2:	bf00      	nop
 8003cf4:	2000000c 	.word	0x2000000c

08003cf8 <memset>:
 8003cf8:	4402      	add	r2, r0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d100      	bne.n	8003d02 <memset+0xa>
 8003d00:	4770      	bx	lr
 8003d02:	f803 1b01 	strb.w	r1, [r3], #1
 8003d06:	e7f9      	b.n	8003cfc <memset+0x4>

08003d08 <_free_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	d045      	beq.n	8003d9c <_free_r+0x94>
 8003d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d14:	1f0c      	subs	r4, r1, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bfb8      	it	lt
 8003d1a:	18e4      	addlt	r4, r4, r3
 8003d1c:	f000 f8e6 	bl	8003eec <__malloc_lock>
 8003d20:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <_free_r+0x98>)
 8003d22:	6813      	ldr	r3, [r2, #0]
 8003d24:	4610      	mov	r0, r2
 8003d26:	b933      	cbnz	r3, 8003d36 <_free_r+0x2e>
 8003d28:	6063      	str	r3, [r4, #4]
 8003d2a:	6014      	str	r4, [r2, #0]
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d32:	f000 b8dc 	b.w	8003eee <__malloc_unlock>
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	d90c      	bls.n	8003d54 <_free_r+0x4c>
 8003d3a:	6821      	ldr	r1, [r4, #0]
 8003d3c:	1862      	adds	r2, r4, r1
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	bf04      	itt	eq
 8003d42:	681a      	ldreq	r2, [r3, #0]
 8003d44:	685b      	ldreq	r3, [r3, #4]
 8003d46:	6063      	str	r3, [r4, #4]
 8003d48:	bf04      	itt	eq
 8003d4a:	1852      	addeq	r2, r2, r1
 8003d4c:	6022      	streq	r2, [r4, #0]
 8003d4e:	6004      	str	r4, [r0, #0]
 8003d50:	e7ec      	b.n	8003d2c <_free_r+0x24>
 8003d52:	4613      	mov	r3, r2
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	b10a      	cbz	r2, 8003d5c <_free_r+0x54>
 8003d58:	42a2      	cmp	r2, r4
 8003d5a:	d9fa      	bls.n	8003d52 <_free_r+0x4a>
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	1858      	adds	r0, r3, r1
 8003d60:	42a0      	cmp	r0, r4
 8003d62:	d10b      	bne.n	8003d7c <_free_r+0x74>
 8003d64:	6820      	ldr	r0, [r4, #0]
 8003d66:	4401      	add	r1, r0
 8003d68:	1858      	adds	r0, r3, r1
 8003d6a:	4282      	cmp	r2, r0
 8003d6c:	6019      	str	r1, [r3, #0]
 8003d6e:	d1dd      	bne.n	8003d2c <_free_r+0x24>
 8003d70:	6810      	ldr	r0, [r2, #0]
 8003d72:	6852      	ldr	r2, [r2, #4]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	4401      	add	r1, r0
 8003d78:	6019      	str	r1, [r3, #0]
 8003d7a:	e7d7      	b.n	8003d2c <_free_r+0x24>
 8003d7c:	d902      	bls.n	8003d84 <_free_r+0x7c>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	602b      	str	r3, [r5, #0]
 8003d82:	e7d3      	b.n	8003d2c <_free_r+0x24>
 8003d84:	6820      	ldr	r0, [r4, #0]
 8003d86:	1821      	adds	r1, r4, r0
 8003d88:	428a      	cmp	r2, r1
 8003d8a:	bf04      	itt	eq
 8003d8c:	6811      	ldreq	r1, [r2, #0]
 8003d8e:	6852      	ldreq	r2, [r2, #4]
 8003d90:	6062      	str	r2, [r4, #4]
 8003d92:	bf04      	itt	eq
 8003d94:	1809      	addeq	r1, r1, r0
 8003d96:	6021      	streq	r1, [r4, #0]
 8003d98:	605c      	str	r4, [r3, #4]
 8003d9a:	e7c7      	b.n	8003d2c <_free_r+0x24>
 8003d9c:	bd38      	pop	{r3, r4, r5, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000098 	.word	0x20000098

08003da4 <_malloc_r>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	1ccd      	adds	r5, r1, #3
 8003da8:	f025 0503 	bic.w	r5, r5, #3
 8003dac:	3508      	adds	r5, #8
 8003dae:	2d0c      	cmp	r5, #12
 8003db0:	bf38      	it	cc
 8003db2:	250c      	movcc	r5, #12
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	4606      	mov	r6, r0
 8003db8:	db01      	blt.n	8003dbe <_malloc_r+0x1a>
 8003dba:	42a9      	cmp	r1, r5
 8003dbc:	d903      	bls.n	8003dc6 <_malloc_r+0x22>
 8003dbe:	230c      	movs	r3, #12
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
 8003dc6:	f000 f891 	bl	8003eec <__malloc_lock>
 8003dca:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <_malloc_r+0xac>)
 8003dcc:	6814      	ldr	r4, [r2, #0]
 8003dce:	4621      	mov	r1, r4
 8003dd0:	b991      	cbnz	r1, 8003df8 <_malloc_r+0x54>
 8003dd2:	4c20      	ldr	r4, [pc, #128]	; (8003e54 <_malloc_r+0xb0>)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	b91b      	cbnz	r3, 8003de0 <_malloc_r+0x3c>
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f000 f83d 	bl	8003e58 <_sbrk_r>
 8003dde:	6020      	str	r0, [r4, #0]
 8003de0:	4629      	mov	r1, r5
 8003de2:	4630      	mov	r0, r6
 8003de4:	f000 f838 	bl	8003e58 <_sbrk_r>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d124      	bne.n	8003e36 <_malloc_r+0x92>
 8003dec:	230c      	movs	r3, #12
 8003dee:	6033      	str	r3, [r6, #0]
 8003df0:	4630      	mov	r0, r6
 8003df2:	f000 f87c 	bl	8003eee <__malloc_unlock>
 8003df6:	e7e4      	b.n	8003dc2 <_malloc_r+0x1e>
 8003df8:	680b      	ldr	r3, [r1, #0]
 8003dfa:	1b5b      	subs	r3, r3, r5
 8003dfc:	d418      	bmi.n	8003e30 <_malloc_r+0x8c>
 8003dfe:	2b0b      	cmp	r3, #11
 8003e00:	d90f      	bls.n	8003e22 <_malloc_r+0x7e>
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	50cd      	str	r5, [r1, r3]
 8003e06:	18cc      	adds	r4, r1, r3
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f000 f870 	bl	8003eee <__malloc_unlock>
 8003e0e:	f104 000b 	add.w	r0, r4, #11
 8003e12:	1d23      	adds	r3, r4, #4
 8003e14:	f020 0007 	bic.w	r0, r0, #7
 8003e18:	1ac3      	subs	r3, r0, r3
 8003e1a:	d0d3      	beq.n	8003dc4 <_malloc_r+0x20>
 8003e1c:	425a      	negs	r2, r3
 8003e1e:	50e2      	str	r2, [r4, r3]
 8003e20:	e7d0      	b.n	8003dc4 <_malloc_r+0x20>
 8003e22:	428c      	cmp	r4, r1
 8003e24:	684b      	ldr	r3, [r1, #4]
 8003e26:	bf16      	itet	ne
 8003e28:	6063      	strne	r3, [r4, #4]
 8003e2a:	6013      	streq	r3, [r2, #0]
 8003e2c:	460c      	movne	r4, r1
 8003e2e:	e7eb      	b.n	8003e08 <_malloc_r+0x64>
 8003e30:	460c      	mov	r4, r1
 8003e32:	6849      	ldr	r1, [r1, #4]
 8003e34:	e7cc      	b.n	8003dd0 <_malloc_r+0x2c>
 8003e36:	1cc4      	adds	r4, r0, #3
 8003e38:	f024 0403 	bic.w	r4, r4, #3
 8003e3c:	42a0      	cmp	r0, r4
 8003e3e:	d005      	beq.n	8003e4c <_malloc_r+0xa8>
 8003e40:	1a21      	subs	r1, r4, r0
 8003e42:	4630      	mov	r0, r6
 8003e44:	f000 f808 	bl	8003e58 <_sbrk_r>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d0cf      	beq.n	8003dec <_malloc_r+0x48>
 8003e4c:	6025      	str	r5, [r4, #0]
 8003e4e:	e7db      	b.n	8003e08 <_malloc_r+0x64>
 8003e50:	20000098 	.word	0x20000098
 8003e54:	2000009c 	.word	0x2000009c

08003e58 <_sbrk_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4c06      	ldr	r4, [pc, #24]	; (8003e74 <_sbrk_r+0x1c>)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4605      	mov	r5, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	f7fd f9a0 	bl	80011a8 <_sbrk>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	d102      	bne.n	8003e72 <_sbrk_r+0x1a>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	b103      	cbz	r3, 8003e72 <_sbrk_r+0x1a>
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	bd38      	pop	{r3, r4, r5, pc}
 8003e74:	200001e0 	.word	0x200001e0

08003e78 <_vsniprintf_r>:
 8003e78:	b530      	push	{r4, r5, lr}
 8003e7a:	1e14      	subs	r4, r2, #0
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	b09b      	sub	sp, #108	; 0x6c
 8003e80:	4618      	mov	r0, r3
 8003e82:	da05      	bge.n	8003e90 <_vsniprintf_r+0x18>
 8003e84:	238b      	movs	r3, #139	; 0x8b
 8003e86:	602b      	str	r3, [r5, #0]
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	b01b      	add	sp, #108	; 0x6c
 8003e8e:	bd30      	pop	{r4, r5, pc}
 8003e90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003e94:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003e98:	bf14      	ite	ne
 8003e9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e9e:	4623      	moveq	r3, r4
 8003ea0:	9302      	str	r3, [sp, #8]
 8003ea2:	9305      	str	r3, [sp, #20]
 8003ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ea8:	9100      	str	r1, [sp, #0]
 8003eaa:	9104      	str	r1, [sp, #16]
 8003eac:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003eb4:	4669      	mov	r1, sp
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f000 f874 	bl	8003fa4 <_svfiprintf_r>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	bfbc      	itt	lt
 8003ec0:	238b      	movlt	r3, #139	; 0x8b
 8003ec2:	602b      	strlt	r3, [r5, #0]
 8003ec4:	2c00      	cmp	r4, #0
 8003ec6:	d0e1      	beq.n	8003e8c <_vsniprintf_r+0x14>
 8003ec8:	9b00      	ldr	r3, [sp, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e7dd      	b.n	8003e8c <_vsniprintf_r+0x14>

08003ed0 <vsniprintf>:
 8003ed0:	b507      	push	{r0, r1, r2, lr}
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	4601      	mov	r1, r0
 8003eda:	4803      	ldr	r0, [pc, #12]	; (8003ee8 <vsniprintf+0x18>)
 8003edc:	6800      	ldr	r0, [r0, #0]
 8003ede:	f7ff ffcb 	bl	8003e78 <_vsniprintf_r>
 8003ee2:	b003      	add	sp, #12
 8003ee4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ee8:	2000000c 	.word	0x2000000c

08003eec <__malloc_lock>:
 8003eec:	4770      	bx	lr

08003eee <__malloc_unlock>:
 8003eee:	4770      	bx	lr

08003ef0 <__ssputs_r>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	688e      	ldr	r6, [r1, #8]
 8003ef6:	429e      	cmp	r6, r3
 8003ef8:	4682      	mov	sl, r0
 8003efa:	460c      	mov	r4, r1
 8003efc:	4690      	mov	r8, r2
 8003efe:	4699      	mov	r9, r3
 8003f00:	d837      	bhi.n	8003f72 <__ssputs_r+0x82>
 8003f02:	898a      	ldrh	r2, [r1, #12]
 8003f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f08:	d031      	beq.n	8003f6e <__ssputs_r+0x7e>
 8003f0a:	6825      	ldr	r5, [r4, #0]
 8003f0c:	6909      	ldr	r1, [r1, #16]
 8003f0e:	1a6f      	subs	r7, r5, r1
 8003f10:	6965      	ldr	r5, [r4, #20]
 8003f12:	2302      	movs	r3, #2
 8003f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f18:	fb95 f5f3 	sdiv	r5, r5, r3
 8003f1c:	f109 0301 	add.w	r3, r9, #1
 8003f20:	443b      	add	r3, r7
 8003f22:	429d      	cmp	r5, r3
 8003f24:	bf38      	it	cc
 8003f26:	461d      	movcc	r5, r3
 8003f28:	0553      	lsls	r3, r2, #21
 8003f2a:	d530      	bpl.n	8003f8e <__ssputs_r+0x9e>
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f7ff ff39 	bl	8003da4 <_malloc_r>
 8003f32:	4606      	mov	r6, r0
 8003f34:	b950      	cbnz	r0, 8003f4c <__ssputs_r+0x5c>
 8003f36:	230c      	movs	r3, #12
 8003f38:	f8ca 3000 	str.w	r3, [sl]
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f42:	81a3      	strh	r3, [r4, #12]
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4c:	463a      	mov	r2, r7
 8003f4e:	6921      	ldr	r1, [r4, #16]
 8003f50:	f000 faa8 	bl	80044a4 <memcpy>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5e:	81a3      	strh	r3, [r4, #12]
 8003f60:	6126      	str	r6, [r4, #16]
 8003f62:	6165      	str	r5, [r4, #20]
 8003f64:	443e      	add	r6, r7
 8003f66:	1bed      	subs	r5, r5, r7
 8003f68:	6026      	str	r6, [r4, #0]
 8003f6a:	60a5      	str	r5, [r4, #8]
 8003f6c:	464e      	mov	r6, r9
 8003f6e:	454e      	cmp	r6, r9
 8003f70:	d900      	bls.n	8003f74 <__ssputs_r+0x84>
 8003f72:	464e      	mov	r6, r9
 8003f74:	4632      	mov	r2, r6
 8003f76:	4641      	mov	r1, r8
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	f000 fa9e 	bl	80044ba <memmove>
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	1b9b      	subs	r3, r3, r6
 8003f82:	60a3      	str	r3, [r4, #8]
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	441e      	add	r6, r3
 8003f88:	6026      	str	r6, [r4, #0]
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	e7dc      	b.n	8003f48 <__ssputs_r+0x58>
 8003f8e:	462a      	mov	r2, r5
 8003f90:	f000 faac 	bl	80044ec <_realloc_r>
 8003f94:	4606      	mov	r6, r0
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d1e2      	bne.n	8003f60 <__ssputs_r+0x70>
 8003f9a:	6921      	ldr	r1, [r4, #16]
 8003f9c:	4650      	mov	r0, sl
 8003f9e:	f7ff feb3 	bl	8003d08 <_free_r>
 8003fa2:	e7c8      	b.n	8003f36 <__ssputs_r+0x46>

08003fa4 <_svfiprintf_r>:
 8003fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa8:	461d      	mov	r5, r3
 8003faa:	898b      	ldrh	r3, [r1, #12]
 8003fac:	061f      	lsls	r7, r3, #24
 8003fae:	b09d      	sub	sp, #116	; 0x74
 8003fb0:	4680      	mov	r8, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	d50f      	bpl.n	8003fd8 <_svfiprintf_r+0x34>
 8003fb8:	690b      	ldr	r3, [r1, #16]
 8003fba:	b96b      	cbnz	r3, 8003fd8 <_svfiprintf_r+0x34>
 8003fbc:	2140      	movs	r1, #64	; 0x40
 8003fbe:	f7ff fef1 	bl	8003da4 <_malloc_r>
 8003fc2:	6020      	str	r0, [r4, #0]
 8003fc4:	6120      	str	r0, [r4, #16]
 8003fc6:	b928      	cbnz	r0, 8003fd4 <_svfiprintf_r+0x30>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	f8c8 3000 	str.w	r3, [r8]
 8003fce:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd2:	e0c8      	b.n	8004166 <_svfiprintf_r+0x1c2>
 8003fd4:	2340      	movs	r3, #64	; 0x40
 8003fd6:	6163      	str	r3, [r4, #20]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9309      	str	r3, [sp, #36]	; 0x24
 8003fdc:	2320      	movs	r3, #32
 8003fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fe2:	2330      	movs	r3, #48	; 0x30
 8003fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fe8:	9503      	str	r5, [sp, #12]
 8003fea:	f04f 0b01 	mov.w	fp, #1
 8003fee:	4637      	mov	r7, r6
 8003ff0:	463d      	mov	r5, r7
 8003ff2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ff6:	b10b      	cbz	r3, 8003ffc <_svfiprintf_r+0x58>
 8003ff8:	2b25      	cmp	r3, #37	; 0x25
 8003ffa:	d13e      	bne.n	800407a <_svfiprintf_r+0xd6>
 8003ffc:	ebb7 0a06 	subs.w	sl, r7, r6
 8004000:	d00b      	beq.n	800401a <_svfiprintf_r+0x76>
 8004002:	4653      	mov	r3, sl
 8004004:	4632      	mov	r2, r6
 8004006:	4621      	mov	r1, r4
 8004008:	4640      	mov	r0, r8
 800400a:	f7ff ff71 	bl	8003ef0 <__ssputs_r>
 800400e:	3001      	adds	r0, #1
 8004010:	f000 80a4 	beq.w	800415c <_svfiprintf_r+0x1b8>
 8004014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004016:	4453      	add	r3, sl
 8004018:	9309      	str	r3, [sp, #36]	; 0x24
 800401a:	783b      	ldrb	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 809d 	beq.w	800415c <_svfiprintf_r+0x1b8>
 8004022:	2300      	movs	r3, #0
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800402c:	9304      	str	r3, [sp, #16]
 800402e:	9307      	str	r3, [sp, #28]
 8004030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004034:	931a      	str	r3, [sp, #104]	; 0x68
 8004036:	462f      	mov	r7, r5
 8004038:	2205      	movs	r2, #5
 800403a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800403e:	4850      	ldr	r0, [pc, #320]	; (8004180 <_svfiprintf_r+0x1dc>)
 8004040:	f7fc f8d6 	bl	80001f0 <memchr>
 8004044:	9b04      	ldr	r3, [sp, #16]
 8004046:	b9d0      	cbnz	r0, 800407e <_svfiprintf_r+0xda>
 8004048:	06d9      	lsls	r1, r3, #27
 800404a:	bf44      	itt	mi
 800404c:	2220      	movmi	r2, #32
 800404e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004052:	071a      	lsls	r2, r3, #28
 8004054:	bf44      	itt	mi
 8004056:	222b      	movmi	r2, #43	; 0x2b
 8004058:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800405c:	782a      	ldrb	r2, [r5, #0]
 800405e:	2a2a      	cmp	r2, #42	; 0x2a
 8004060:	d015      	beq.n	800408e <_svfiprintf_r+0xea>
 8004062:	9a07      	ldr	r2, [sp, #28]
 8004064:	462f      	mov	r7, r5
 8004066:	2000      	movs	r0, #0
 8004068:	250a      	movs	r5, #10
 800406a:	4639      	mov	r1, r7
 800406c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004070:	3b30      	subs	r3, #48	; 0x30
 8004072:	2b09      	cmp	r3, #9
 8004074:	d94d      	bls.n	8004112 <_svfiprintf_r+0x16e>
 8004076:	b1b8      	cbz	r0, 80040a8 <_svfiprintf_r+0x104>
 8004078:	e00f      	b.n	800409a <_svfiprintf_r+0xf6>
 800407a:	462f      	mov	r7, r5
 800407c:	e7b8      	b.n	8003ff0 <_svfiprintf_r+0x4c>
 800407e:	4a40      	ldr	r2, [pc, #256]	; (8004180 <_svfiprintf_r+0x1dc>)
 8004080:	1a80      	subs	r0, r0, r2
 8004082:	fa0b f000 	lsl.w	r0, fp, r0
 8004086:	4318      	orrs	r0, r3
 8004088:	9004      	str	r0, [sp, #16]
 800408a:	463d      	mov	r5, r7
 800408c:	e7d3      	b.n	8004036 <_svfiprintf_r+0x92>
 800408e:	9a03      	ldr	r2, [sp, #12]
 8004090:	1d11      	adds	r1, r2, #4
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	9103      	str	r1, [sp, #12]
 8004096:	2a00      	cmp	r2, #0
 8004098:	db01      	blt.n	800409e <_svfiprintf_r+0xfa>
 800409a:	9207      	str	r2, [sp, #28]
 800409c:	e004      	b.n	80040a8 <_svfiprintf_r+0x104>
 800409e:	4252      	negs	r2, r2
 80040a0:	f043 0302 	orr.w	r3, r3, #2
 80040a4:	9207      	str	r2, [sp, #28]
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	783b      	ldrb	r3, [r7, #0]
 80040aa:	2b2e      	cmp	r3, #46	; 0x2e
 80040ac:	d10c      	bne.n	80040c8 <_svfiprintf_r+0x124>
 80040ae:	787b      	ldrb	r3, [r7, #1]
 80040b0:	2b2a      	cmp	r3, #42	; 0x2a
 80040b2:	d133      	bne.n	800411c <_svfiprintf_r+0x178>
 80040b4:	9b03      	ldr	r3, [sp, #12]
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	9203      	str	r2, [sp, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bfb8      	it	lt
 80040c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80040c4:	3702      	adds	r7, #2
 80040c6:	9305      	str	r3, [sp, #20]
 80040c8:	4d2e      	ldr	r5, [pc, #184]	; (8004184 <_svfiprintf_r+0x1e0>)
 80040ca:	7839      	ldrb	r1, [r7, #0]
 80040cc:	2203      	movs	r2, #3
 80040ce:	4628      	mov	r0, r5
 80040d0:	f7fc f88e 	bl	80001f0 <memchr>
 80040d4:	b138      	cbz	r0, 80040e6 <_svfiprintf_r+0x142>
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	1b40      	subs	r0, r0, r5
 80040da:	fa03 f000 	lsl.w	r0, r3, r0
 80040de:	9b04      	ldr	r3, [sp, #16]
 80040e0:	4303      	orrs	r3, r0
 80040e2:	3701      	adds	r7, #1
 80040e4:	9304      	str	r3, [sp, #16]
 80040e6:	7839      	ldrb	r1, [r7, #0]
 80040e8:	4827      	ldr	r0, [pc, #156]	; (8004188 <_svfiprintf_r+0x1e4>)
 80040ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ee:	2206      	movs	r2, #6
 80040f0:	1c7e      	adds	r6, r7, #1
 80040f2:	f7fc f87d 	bl	80001f0 <memchr>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	d038      	beq.n	800416c <_svfiprintf_r+0x1c8>
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <_svfiprintf_r+0x1e8>)
 80040fc:	bb13      	cbnz	r3, 8004144 <_svfiprintf_r+0x1a0>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	3307      	adds	r3, #7
 8004102:	f023 0307 	bic.w	r3, r3, #7
 8004106:	3308      	adds	r3, #8
 8004108:	9303      	str	r3, [sp, #12]
 800410a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410c:	444b      	add	r3, r9
 800410e:	9309      	str	r3, [sp, #36]	; 0x24
 8004110:	e76d      	b.n	8003fee <_svfiprintf_r+0x4a>
 8004112:	fb05 3202 	mla	r2, r5, r2, r3
 8004116:	2001      	movs	r0, #1
 8004118:	460f      	mov	r7, r1
 800411a:	e7a6      	b.n	800406a <_svfiprintf_r+0xc6>
 800411c:	2300      	movs	r3, #0
 800411e:	3701      	adds	r7, #1
 8004120:	9305      	str	r3, [sp, #20]
 8004122:	4619      	mov	r1, r3
 8004124:	250a      	movs	r5, #10
 8004126:	4638      	mov	r0, r7
 8004128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800412c:	3a30      	subs	r2, #48	; 0x30
 800412e:	2a09      	cmp	r2, #9
 8004130:	d903      	bls.n	800413a <_svfiprintf_r+0x196>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0c8      	beq.n	80040c8 <_svfiprintf_r+0x124>
 8004136:	9105      	str	r1, [sp, #20]
 8004138:	e7c6      	b.n	80040c8 <_svfiprintf_r+0x124>
 800413a:	fb05 2101 	mla	r1, r5, r1, r2
 800413e:	2301      	movs	r3, #1
 8004140:	4607      	mov	r7, r0
 8004142:	e7f0      	b.n	8004126 <_svfiprintf_r+0x182>
 8004144:	ab03      	add	r3, sp, #12
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4622      	mov	r2, r4
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <_svfiprintf_r+0x1ec>)
 800414c:	a904      	add	r1, sp, #16
 800414e:	4640      	mov	r0, r8
 8004150:	f3af 8000 	nop.w
 8004154:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004158:	4681      	mov	r9, r0
 800415a:	d1d6      	bne.n	800410a <_svfiprintf_r+0x166>
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	065b      	lsls	r3, r3, #25
 8004160:	f53f af35 	bmi.w	8003fce <_svfiprintf_r+0x2a>
 8004164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004166:	b01d      	add	sp, #116	; 0x74
 8004168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416c:	ab03      	add	r3, sp, #12
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	4622      	mov	r2, r4
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <_svfiprintf_r+0x1ec>)
 8004174:	a904      	add	r1, sp, #16
 8004176:	4640      	mov	r0, r8
 8004178:	f000 f882 	bl	8004280 <_printf_i>
 800417c:	e7ea      	b.n	8004154 <_svfiprintf_r+0x1b0>
 800417e:	bf00      	nop
 8004180:	080045cc 	.word	0x080045cc
 8004184:	080045d2 	.word	0x080045d2
 8004188:	080045d6 	.word	0x080045d6
 800418c:	00000000 	.word	0x00000000
 8004190:	08003ef1 	.word	0x08003ef1

08004194 <_printf_common>:
 8004194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	4691      	mov	r9, r2
 800419a:	461f      	mov	r7, r3
 800419c:	688a      	ldr	r2, [r1, #8]
 800419e:	690b      	ldr	r3, [r1, #16]
 80041a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041a4:	4293      	cmp	r3, r2
 80041a6:	bfb8      	it	lt
 80041a8:	4613      	movlt	r3, r2
 80041aa:	f8c9 3000 	str.w	r3, [r9]
 80041ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041b2:	4606      	mov	r6, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	b112      	cbz	r2, 80041be <_printf_common+0x2a>
 80041b8:	3301      	adds	r3, #1
 80041ba:	f8c9 3000 	str.w	r3, [r9]
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	0699      	lsls	r1, r3, #26
 80041c2:	bf42      	ittt	mi
 80041c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80041c8:	3302      	addmi	r3, #2
 80041ca:	f8c9 3000 	strmi.w	r3, [r9]
 80041ce:	6825      	ldr	r5, [r4, #0]
 80041d0:	f015 0506 	ands.w	r5, r5, #6
 80041d4:	d107      	bne.n	80041e6 <_printf_common+0x52>
 80041d6:	f104 0a19 	add.w	sl, r4, #25
 80041da:	68e3      	ldr	r3, [r4, #12]
 80041dc:	f8d9 2000 	ldr.w	r2, [r9]
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	42ab      	cmp	r3, r5
 80041e4:	dc28      	bgt.n	8004238 <_printf_common+0xa4>
 80041e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	3300      	adds	r3, #0
 80041ee:	bf18      	it	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	0692      	lsls	r2, r2, #26
 80041f4:	d42d      	bmi.n	8004252 <_printf_common+0xbe>
 80041f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041fa:	4639      	mov	r1, r7
 80041fc:	4630      	mov	r0, r6
 80041fe:	47c0      	blx	r8
 8004200:	3001      	adds	r0, #1
 8004202:	d020      	beq.n	8004246 <_printf_common+0xb2>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	68e5      	ldr	r5, [r4, #12]
 8004208:	f8d9 2000 	ldr.w	r2, [r9]
 800420c:	f003 0306 	and.w	r3, r3, #6
 8004210:	2b04      	cmp	r3, #4
 8004212:	bf08      	it	eq
 8004214:	1aad      	subeq	r5, r5, r2
 8004216:	68a3      	ldr	r3, [r4, #8]
 8004218:	6922      	ldr	r2, [r4, #16]
 800421a:	bf0c      	ite	eq
 800421c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004220:	2500      	movne	r5, #0
 8004222:	4293      	cmp	r3, r2
 8004224:	bfc4      	itt	gt
 8004226:	1a9b      	subgt	r3, r3, r2
 8004228:	18ed      	addgt	r5, r5, r3
 800422a:	f04f 0900 	mov.w	r9, #0
 800422e:	341a      	adds	r4, #26
 8004230:	454d      	cmp	r5, r9
 8004232:	d11a      	bne.n	800426a <_printf_common+0xd6>
 8004234:	2000      	movs	r0, #0
 8004236:	e008      	b.n	800424a <_printf_common+0xb6>
 8004238:	2301      	movs	r3, #1
 800423a:	4652      	mov	r2, sl
 800423c:	4639      	mov	r1, r7
 800423e:	4630      	mov	r0, r6
 8004240:	47c0      	blx	r8
 8004242:	3001      	adds	r0, #1
 8004244:	d103      	bne.n	800424e <_printf_common+0xba>
 8004246:	f04f 30ff 	mov.w	r0, #4294967295
 800424a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424e:	3501      	adds	r5, #1
 8004250:	e7c3      	b.n	80041da <_printf_common+0x46>
 8004252:	18e1      	adds	r1, r4, r3
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	2030      	movs	r0, #48	; 0x30
 8004258:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800425c:	4422      	add	r2, r4
 800425e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004262:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004266:	3302      	adds	r3, #2
 8004268:	e7c5      	b.n	80041f6 <_printf_common+0x62>
 800426a:	2301      	movs	r3, #1
 800426c:	4622      	mov	r2, r4
 800426e:	4639      	mov	r1, r7
 8004270:	4630      	mov	r0, r6
 8004272:	47c0      	blx	r8
 8004274:	3001      	adds	r0, #1
 8004276:	d0e6      	beq.n	8004246 <_printf_common+0xb2>
 8004278:	f109 0901 	add.w	r9, r9, #1
 800427c:	e7d8      	b.n	8004230 <_printf_common+0x9c>
	...

08004280 <_printf_i>:
 8004280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004284:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004288:	460c      	mov	r4, r1
 800428a:	7e09      	ldrb	r1, [r1, #24]
 800428c:	b085      	sub	sp, #20
 800428e:	296e      	cmp	r1, #110	; 0x6e
 8004290:	4617      	mov	r7, r2
 8004292:	4606      	mov	r6, r0
 8004294:	4698      	mov	r8, r3
 8004296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004298:	f000 80b3 	beq.w	8004402 <_printf_i+0x182>
 800429c:	d822      	bhi.n	80042e4 <_printf_i+0x64>
 800429e:	2963      	cmp	r1, #99	; 0x63
 80042a0:	d036      	beq.n	8004310 <_printf_i+0x90>
 80042a2:	d80a      	bhi.n	80042ba <_printf_i+0x3a>
 80042a4:	2900      	cmp	r1, #0
 80042a6:	f000 80b9 	beq.w	800441c <_printf_i+0x19c>
 80042aa:	2958      	cmp	r1, #88	; 0x58
 80042ac:	f000 8083 	beq.w	80043b6 <_printf_i+0x136>
 80042b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80042b8:	e032      	b.n	8004320 <_printf_i+0xa0>
 80042ba:	2964      	cmp	r1, #100	; 0x64
 80042bc:	d001      	beq.n	80042c2 <_printf_i+0x42>
 80042be:	2969      	cmp	r1, #105	; 0x69
 80042c0:	d1f6      	bne.n	80042b0 <_printf_i+0x30>
 80042c2:	6820      	ldr	r0, [r4, #0]
 80042c4:	6813      	ldr	r3, [r2, #0]
 80042c6:	0605      	lsls	r5, r0, #24
 80042c8:	f103 0104 	add.w	r1, r3, #4
 80042cc:	d52a      	bpl.n	8004324 <_printf_i+0xa4>
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6011      	str	r1, [r2, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da03      	bge.n	80042de <_printf_i+0x5e>
 80042d6:	222d      	movs	r2, #45	; 0x2d
 80042d8:	425b      	negs	r3, r3
 80042da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042de:	486f      	ldr	r0, [pc, #444]	; (800449c <_printf_i+0x21c>)
 80042e0:	220a      	movs	r2, #10
 80042e2:	e039      	b.n	8004358 <_printf_i+0xd8>
 80042e4:	2973      	cmp	r1, #115	; 0x73
 80042e6:	f000 809d 	beq.w	8004424 <_printf_i+0x1a4>
 80042ea:	d808      	bhi.n	80042fe <_printf_i+0x7e>
 80042ec:	296f      	cmp	r1, #111	; 0x6f
 80042ee:	d020      	beq.n	8004332 <_printf_i+0xb2>
 80042f0:	2970      	cmp	r1, #112	; 0x70
 80042f2:	d1dd      	bne.n	80042b0 <_printf_i+0x30>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	f043 0320 	orr.w	r3, r3, #32
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	e003      	b.n	8004306 <_printf_i+0x86>
 80042fe:	2975      	cmp	r1, #117	; 0x75
 8004300:	d017      	beq.n	8004332 <_printf_i+0xb2>
 8004302:	2978      	cmp	r1, #120	; 0x78
 8004304:	d1d4      	bne.n	80042b0 <_printf_i+0x30>
 8004306:	2378      	movs	r3, #120	; 0x78
 8004308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800430c:	4864      	ldr	r0, [pc, #400]	; (80044a0 <_printf_i+0x220>)
 800430e:	e055      	b.n	80043bc <_printf_i+0x13c>
 8004310:	6813      	ldr	r3, [r2, #0]
 8004312:	1d19      	adds	r1, r3, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6011      	str	r1, [r2, #0]
 8004318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800431c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004320:	2301      	movs	r3, #1
 8004322:	e08c      	b.n	800443e <_printf_i+0x1be>
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6011      	str	r1, [r2, #0]
 8004328:	f010 0f40 	tst.w	r0, #64	; 0x40
 800432c:	bf18      	it	ne
 800432e:	b21b      	sxthne	r3, r3
 8004330:	e7cf      	b.n	80042d2 <_printf_i+0x52>
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	6825      	ldr	r5, [r4, #0]
 8004336:	1d18      	adds	r0, r3, #4
 8004338:	6010      	str	r0, [r2, #0]
 800433a:	0628      	lsls	r0, r5, #24
 800433c:	d501      	bpl.n	8004342 <_printf_i+0xc2>
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	e002      	b.n	8004348 <_printf_i+0xc8>
 8004342:	0668      	lsls	r0, r5, #25
 8004344:	d5fb      	bpl.n	800433e <_printf_i+0xbe>
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	4854      	ldr	r0, [pc, #336]	; (800449c <_printf_i+0x21c>)
 800434a:	296f      	cmp	r1, #111	; 0x6f
 800434c:	bf14      	ite	ne
 800434e:	220a      	movne	r2, #10
 8004350:	2208      	moveq	r2, #8
 8004352:	2100      	movs	r1, #0
 8004354:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004358:	6865      	ldr	r5, [r4, #4]
 800435a:	60a5      	str	r5, [r4, #8]
 800435c:	2d00      	cmp	r5, #0
 800435e:	f2c0 8095 	blt.w	800448c <_printf_i+0x20c>
 8004362:	6821      	ldr	r1, [r4, #0]
 8004364:	f021 0104 	bic.w	r1, r1, #4
 8004368:	6021      	str	r1, [r4, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d13d      	bne.n	80043ea <_printf_i+0x16a>
 800436e:	2d00      	cmp	r5, #0
 8004370:	f040 808e 	bne.w	8004490 <_printf_i+0x210>
 8004374:	4665      	mov	r5, ip
 8004376:	2a08      	cmp	r2, #8
 8004378:	d10b      	bne.n	8004392 <_printf_i+0x112>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	07db      	lsls	r3, r3, #31
 800437e:	d508      	bpl.n	8004392 <_printf_i+0x112>
 8004380:	6923      	ldr	r3, [r4, #16]
 8004382:	6862      	ldr	r2, [r4, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	bfde      	ittt	le
 8004388:	2330      	movle	r3, #48	; 0x30
 800438a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800438e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004392:	ebac 0305 	sub.w	r3, ip, r5
 8004396:	6123      	str	r3, [r4, #16]
 8004398:	f8cd 8000 	str.w	r8, [sp]
 800439c:	463b      	mov	r3, r7
 800439e:	aa03      	add	r2, sp, #12
 80043a0:	4621      	mov	r1, r4
 80043a2:	4630      	mov	r0, r6
 80043a4:	f7ff fef6 	bl	8004194 <_printf_common>
 80043a8:	3001      	adds	r0, #1
 80043aa:	d14d      	bne.n	8004448 <_printf_i+0x1c8>
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	b005      	add	sp, #20
 80043b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043b6:	4839      	ldr	r0, [pc, #228]	; (800449c <_printf_i+0x21c>)
 80043b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80043bc:	6813      	ldr	r3, [r2, #0]
 80043be:	6821      	ldr	r1, [r4, #0]
 80043c0:	1d1d      	adds	r5, r3, #4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6015      	str	r5, [r2, #0]
 80043c6:	060a      	lsls	r2, r1, #24
 80043c8:	d50b      	bpl.n	80043e2 <_printf_i+0x162>
 80043ca:	07ca      	lsls	r2, r1, #31
 80043cc:	bf44      	itt	mi
 80043ce:	f041 0120 	orrmi.w	r1, r1, #32
 80043d2:	6021      	strmi	r1, [r4, #0]
 80043d4:	b91b      	cbnz	r3, 80043de <_printf_i+0x15e>
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	f022 0220 	bic.w	r2, r2, #32
 80043dc:	6022      	str	r2, [r4, #0]
 80043de:	2210      	movs	r2, #16
 80043e0:	e7b7      	b.n	8004352 <_printf_i+0xd2>
 80043e2:	064d      	lsls	r5, r1, #25
 80043e4:	bf48      	it	mi
 80043e6:	b29b      	uxthmi	r3, r3
 80043e8:	e7ef      	b.n	80043ca <_printf_i+0x14a>
 80043ea:	4665      	mov	r5, ip
 80043ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80043f0:	fb02 3311 	mls	r3, r2, r1, r3
 80043f4:	5cc3      	ldrb	r3, [r0, r3]
 80043f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043fa:	460b      	mov	r3, r1
 80043fc:	2900      	cmp	r1, #0
 80043fe:	d1f5      	bne.n	80043ec <_printf_i+0x16c>
 8004400:	e7b9      	b.n	8004376 <_printf_i+0xf6>
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	6825      	ldr	r5, [r4, #0]
 8004406:	6961      	ldr	r1, [r4, #20]
 8004408:	1d18      	adds	r0, r3, #4
 800440a:	6010      	str	r0, [r2, #0]
 800440c:	0628      	lsls	r0, r5, #24
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	d501      	bpl.n	8004416 <_printf_i+0x196>
 8004412:	6019      	str	r1, [r3, #0]
 8004414:	e002      	b.n	800441c <_printf_i+0x19c>
 8004416:	066a      	lsls	r2, r5, #25
 8004418:	d5fb      	bpl.n	8004412 <_printf_i+0x192>
 800441a:	8019      	strh	r1, [r3, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	6123      	str	r3, [r4, #16]
 8004420:	4665      	mov	r5, ip
 8004422:	e7b9      	b.n	8004398 <_printf_i+0x118>
 8004424:	6813      	ldr	r3, [r2, #0]
 8004426:	1d19      	adds	r1, r3, #4
 8004428:	6011      	str	r1, [r2, #0]
 800442a:	681d      	ldr	r5, [r3, #0]
 800442c:	6862      	ldr	r2, [r4, #4]
 800442e:	2100      	movs	r1, #0
 8004430:	4628      	mov	r0, r5
 8004432:	f7fb fedd 	bl	80001f0 <memchr>
 8004436:	b108      	cbz	r0, 800443c <_printf_i+0x1bc>
 8004438:	1b40      	subs	r0, r0, r5
 800443a:	6060      	str	r0, [r4, #4]
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	6123      	str	r3, [r4, #16]
 8004440:	2300      	movs	r3, #0
 8004442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004446:	e7a7      	b.n	8004398 <_printf_i+0x118>
 8004448:	6923      	ldr	r3, [r4, #16]
 800444a:	462a      	mov	r2, r5
 800444c:	4639      	mov	r1, r7
 800444e:	4630      	mov	r0, r6
 8004450:	47c0      	blx	r8
 8004452:	3001      	adds	r0, #1
 8004454:	d0aa      	beq.n	80043ac <_printf_i+0x12c>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	079b      	lsls	r3, r3, #30
 800445a:	d413      	bmi.n	8004484 <_printf_i+0x204>
 800445c:	68e0      	ldr	r0, [r4, #12]
 800445e:	9b03      	ldr	r3, [sp, #12]
 8004460:	4298      	cmp	r0, r3
 8004462:	bfb8      	it	lt
 8004464:	4618      	movlt	r0, r3
 8004466:	e7a3      	b.n	80043b0 <_printf_i+0x130>
 8004468:	2301      	movs	r3, #1
 800446a:	464a      	mov	r2, r9
 800446c:	4639      	mov	r1, r7
 800446e:	4630      	mov	r0, r6
 8004470:	47c0      	blx	r8
 8004472:	3001      	adds	r0, #1
 8004474:	d09a      	beq.n	80043ac <_printf_i+0x12c>
 8004476:	3501      	adds	r5, #1
 8004478:	68e3      	ldr	r3, [r4, #12]
 800447a:	9a03      	ldr	r2, [sp, #12]
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	42ab      	cmp	r3, r5
 8004480:	dcf2      	bgt.n	8004468 <_printf_i+0x1e8>
 8004482:	e7eb      	b.n	800445c <_printf_i+0x1dc>
 8004484:	2500      	movs	r5, #0
 8004486:	f104 0919 	add.w	r9, r4, #25
 800448a:	e7f5      	b.n	8004478 <_printf_i+0x1f8>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ac      	bne.n	80043ea <_printf_i+0x16a>
 8004490:	7803      	ldrb	r3, [r0, #0]
 8004492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004496:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800449a:	e76c      	b.n	8004376 <_printf_i+0xf6>
 800449c:	080045dd 	.word	0x080045dd
 80044a0:	080045ee 	.word	0x080045ee

080044a4 <memcpy>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	1e43      	subs	r3, r0, #1
 80044a8:	440a      	add	r2, r1
 80044aa:	4291      	cmp	r1, r2
 80044ac:	d100      	bne.n	80044b0 <memcpy+0xc>
 80044ae:	bd10      	pop	{r4, pc}
 80044b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b8:	e7f7      	b.n	80044aa <memcpy+0x6>

080044ba <memmove>:
 80044ba:	4288      	cmp	r0, r1
 80044bc:	b510      	push	{r4, lr}
 80044be:	eb01 0302 	add.w	r3, r1, r2
 80044c2:	d807      	bhi.n	80044d4 <memmove+0x1a>
 80044c4:	1e42      	subs	r2, r0, #1
 80044c6:	4299      	cmp	r1, r3
 80044c8:	d00a      	beq.n	80044e0 <memmove+0x26>
 80044ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80044d2:	e7f8      	b.n	80044c6 <memmove+0xc>
 80044d4:	4283      	cmp	r3, r0
 80044d6:	d9f5      	bls.n	80044c4 <memmove+0xa>
 80044d8:	1881      	adds	r1, r0, r2
 80044da:	1ad2      	subs	r2, r2, r3
 80044dc:	42d3      	cmn	r3, r2
 80044de:	d100      	bne.n	80044e2 <memmove+0x28>
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80044ea:	e7f7      	b.n	80044dc <memmove+0x22>

080044ec <_realloc_r>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	4607      	mov	r7, r0
 80044f0:	4614      	mov	r4, r2
 80044f2:	460e      	mov	r6, r1
 80044f4:	b921      	cbnz	r1, 8004500 <_realloc_r+0x14>
 80044f6:	4611      	mov	r1, r2
 80044f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044fc:	f7ff bc52 	b.w	8003da4 <_malloc_r>
 8004500:	b922      	cbnz	r2, 800450c <_realloc_r+0x20>
 8004502:	f7ff fc01 	bl	8003d08 <_free_r>
 8004506:	4625      	mov	r5, r4
 8004508:	4628      	mov	r0, r5
 800450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800450c:	f000 f814 	bl	8004538 <_malloc_usable_size_r>
 8004510:	42a0      	cmp	r0, r4
 8004512:	d20f      	bcs.n	8004534 <_realloc_r+0x48>
 8004514:	4621      	mov	r1, r4
 8004516:	4638      	mov	r0, r7
 8004518:	f7ff fc44 	bl	8003da4 <_malloc_r>
 800451c:	4605      	mov	r5, r0
 800451e:	2800      	cmp	r0, #0
 8004520:	d0f2      	beq.n	8004508 <_realloc_r+0x1c>
 8004522:	4631      	mov	r1, r6
 8004524:	4622      	mov	r2, r4
 8004526:	f7ff ffbd 	bl	80044a4 <memcpy>
 800452a:	4631      	mov	r1, r6
 800452c:	4638      	mov	r0, r7
 800452e:	f7ff fbeb 	bl	8003d08 <_free_r>
 8004532:	e7e9      	b.n	8004508 <_realloc_r+0x1c>
 8004534:	4635      	mov	r5, r6
 8004536:	e7e7      	b.n	8004508 <_realloc_r+0x1c>

08004538 <_malloc_usable_size_r>:
 8004538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453c:	1f18      	subs	r0, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	bfbc      	itt	lt
 8004542:	580b      	ldrlt	r3, [r1, r0]
 8004544:	18c0      	addlt	r0, r0, r3
 8004546:	4770      	bx	lr

08004548 <_init>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr

08004554 <_fini>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	bf00      	nop
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr
