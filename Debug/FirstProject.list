
FirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051cc  080051cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051cc  080051cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051d4  080051d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d4  080051d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051d8  080051d8  000151d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  0800524c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  0800524c  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f004  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000203d  00000000  00000000  0002f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  000310e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d88  00000000  00000000  00031f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001739d  00000000  00000000  00032cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b279  00000000  00000000  0004a08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092058  00000000  00000000  00055306  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e735e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004120  00000000  00000000  000e73dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005114 	.word	0x08005114

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005114 	.word	0x08005114

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b972 	b.w	8000dc8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	4688      	mov	r8, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14b      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	d967      	bls.n	8000be0 <__udivmoddi4+0xe4>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0720 	rsb	r7, r2, #32
 8000b1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b22:	4095      	lsls	r5, r2
 8000b24:	ea47 0803 	orr.w	r8, r7, r3
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b34:	fa1f fc85 	uxth.w	ip, r5
 8000b38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b40:	fb07 f10c 	mul.w	r1, r7, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x60>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b4e:	f080 811b 	bcs.w	8000d88 <__udivmoddi4+0x28c>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 8118 	bls.w	8000d88 <__udivmoddi4+0x28c>
 8000b58:	3f02      	subs	r7, #2
 8000b5a:	442b      	add	r3, r5
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b70:	45a4      	cmp	ip, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x8c>
 8000b74:	192c      	adds	r4, r5, r4
 8000b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7a:	f080 8107 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	f240 8104 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b84:	3802      	subs	r0, #2
 8000b86:	442c      	add	r4, r5
 8000b88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b8c:	eba4 040c 	sub.w	r4, r4, ip
 8000b90:	2700      	movs	r7, #0
 8000b92:	b11e      	cbz	r6, 8000b9c <__udivmoddi4+0xa0>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0xbe>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80eb 	beq.w	8000d82 <__udivmoddi4+0x286>
 8000bac:	2700      	movs	r7, #0
 8000bae:	e9c6 0100 	strd	r0, r1, [r6]
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f783 	clz	r7, r3
 8000bbe:	2f00      	cmp	r7, #0
 8000bc0:	d147      	bne.n	8000c52 <__udivmoddi4+0x156>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xd0>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80fa 	bhi.w	8000dc0 <__udivmoddi4+0x2c4>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d0e0      	beq.n	8000b9c <__udivmoddi4+0xa0>
 8000bda:	e9c6 4800 	strd	r4, r8, [r6]
 8000bde:	e7dd      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000be0:	b902      	cbnz	r2, 8000be4 <__udivmoddi4+0xe8>
 8000be2:	deff      	udf	#255	; 0xff
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	f040 808f 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bee:	1b49      	subs	r1, r1, r5
 8000bf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf4:	fa1f f885 	uxth.w	r8, r5
 8000bf8:	2701      	movs	r7, #1
 8000bfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb08 f10c 	mul.w	r1, r8, ip
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c10:	18eb      	adds	r3, r5, r3
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2bc>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x14c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x14a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80b6 	bhi.w	8000db2 <__udivmoddi4+0x2b6>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e79f      	b.n	8000b92 <__udivmoddi4+0x96>
 8000c52:	f1c7 0c20 	rsb	ip, r7, #32
 8000c56:	40bb      	lsls	r3, r7
 8000c58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c60:	fa01 f407 	lsl.w	r4, r1, r7
 8000c64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c70:	4325      	orrs	r5, r4
 8000c72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c76:	0c2c      	lsrs	r4, r5, #16
 8000c78:	fb08 3319 	mls	r3, r8, r9, r3
 8000c7c:	fa1f fa8e 	uxth.w	sl, lr
 8000c80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c84:	fb09 f40a 	mul.w	r4, r9, sl
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1e 0303 	adds.w	r3, lr, r3
 8000c98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c9c:	f080 8087 	bcs.w	8000dae <__udivmoddi4+0x2b2>
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	f240 8084 	bls.w	8000dae <__udivmoddi4+0x2b2>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4473      	add	r3, lr
 8000cac:	1b1b      	subs	r3, r3, r4
 8000cae:	b2ad      	uxth	r5, r5
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cc0:	45a2      	cmp	sl, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	d26b      	bcs.n	8000da6 <__udivmoddi4+0x2aa>
 8000cce:	45a2      	cmp	sl, r4
 8000cd0:	d969      	bls.n	8000da6 <__udivmoddi4+0x2aa>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4474      	add	r4, lr
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	fba0 8902 	umull	r8, r9, r0, r2
 8000cde:	eba4 040a 	sub.w	r4, r4, sl
 8000ce2:	454c      	cmp	r4, r9
 8000ce4:	46c2      	mov	sl, r8
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	d354      	bcc.n	8000d94 <__udivmoddi4+0x298>
 8000cea:	d051      	beq.n	8000d90 <__udivmoddi4+0x294>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d069      	beq.n	8000dc4 <__udivmoddi4+0x2c8>
 8000cf0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cf4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cfc:	40fd      	lsrs	r5, r7
 8000cfe:	40fc      	lsrs	r4, r7
 8000d00:	ea4c 0505 	orr.w	r5, ip, r5
 8000d04:	e9c6 5400 	strd	r5, r4, [r6]
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e747      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f703 	lsr.w	r7, r0, r3
 8000d14:	4095      	lsls	r5, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d22:	4338      	orrs	r0, r7
 8000d24:	0c01      	lsrs	r1, r0, #16
 8000d26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d2a:	fa1f f885 	uxth.w	r8, r5
 8000d2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb07 f308 	mul.w	r3, r7, r8
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x256>
 8000d42:	1869      	adds	r1, r5, r1
 8000d44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d48:	d22f      	bcs.n	8000daa <__udivmoddi4+0x2ae>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d92d      	bls.n	8000daa <__udivmoddi4+0x2ae>
 8000d4e:	3f02      	subs	r7, #2
 8000d50:	4429      	add	r1, r5
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	b281      	uxth	r1, r0
 8000d56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d62:	fb00 f308 	mul.w	r3, r0, r8
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x27e>
 8000d6a:	1869      	adds	r1, r5, r1
 8000d6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d70:	d217      	bcs.n	8000da2 <__udivmoddi4+0x2a6>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d915      	bls.n	8000da2 <__udivmoddi4+0x2a6>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4429      	add	r1, r5
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d80:	e73b      	b.n	8000bfa <__udivmoddi4+0xfe>
 8000d82:	4637      	mov	r7, r6
 8000d84:	4630      	mov	r0, r6
 8000d86:	e709      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d88:	4607      	mov	r7, r0
 8000d8a:	e6e7      	b.n	8000b5c <__udivmoddi4+0x60>
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	e6fb      	b.n	8000b88 <__udivmoddi4+0x8c>
 8000d90:	4541      	cmp	r1, r8
 8000d92:	d2ab      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d98:	eb69 020e 	sbc.w	r2, r9, lr
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	4613      	mov	r3, r2
 8000da0:	e7a4      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da2:	4660      	mov	r0, ip
 8000da4:	e7e9      	b.n	8000d7a <__udivmoddi4+0x27e>
 8000da6:	4618      	mov	r0, r3
 8000da8:	e795      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000daa:	4667      	mov	r7, ip
 8000dac:	e7d1      	b.n	8000d52 <__udivmoddi4+0x256>
 8000dae:	4681      	mov	r9, r0
 8000db0:	e77c      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	442c      	add	r4, r5
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0x14c>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	442b      	add	r3, r5
 8000dbe:	e72f      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xda>
 8000dc4:	4637      	mov	r7, r6
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0xa0>

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <LCD_I2C_Init>:
#define SHIFT_CURSOT_TO_THE_RIGTH 0x04

#define SECOND_LINE_ADDRESS_OFFSET 0x40

void LCD_I2C_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(100); // wait for >40ms
 8000dd0:	2064      	movs	r0, #100	; 0x64
 8000dd2:	f001 f83b 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd(INIT_CMD);
 8000dd6:	2030      	movs	r0, #48	; 0x30
 8000dd8:	f000 f968 	bl	80010ac <lcd_send_cmd>
	HAL_Delay(10); // wait for >4.1ms
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f001 f835 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd(INIT_CMD);
 8000de2:	2030      	movs	r0, #48	; 0x30
 8000de4:	f000 f962 	bl	80010ac <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 8000de8:	2001      	movs	r0, #1
 8000dea:	f001 f82f 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd(INIT_CMD);
 8000dee:	2030      	movs	r0, #48	; 0x30
 8000df0:	f000 f95c 	bl	80010ac <lcd_send_cmd>
	HAL_Delay(50);
 8000df4:	2032      	movs	r0, #50	; 0x32
 8000df6:	f001 f829 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd(FUNCTION_SET_CMD); // 4bit mode
 8000dfa:	2020      	movs	r0, #32
 8000dfc:	f000 f956 	bl	80010ac <lcd_send_cmd>
	HAL_Delay(50);
 8000e00:	2032      	movs	r0, #50	; 0x32
 8000e02:	f001 f823 	bl	8001e4c <HAL_Delay>

	lcd_send_cmd(FUNCTION_SET_CMD | TWO_LINE_DISPLAY_MODE); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e06:	2028      	movs	r0, #40	; 0x28
 8000e08:	f000 f950 	bl	80010ac <lcd_send_cmd>
	HAL_Delay(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f001 f81d 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd(DISPLAY_ON_OFF_CMD); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e12:	2008      	movs	r0, #8
 8000e14:	f000 f94a 	bl	80010ac <lcd_send_cmd>
	HAL_Delay(10);
 8000e18:	200a      	movs	r0, #10
 8000e1a:	f001 f817 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd(CLEAR_DISPLAY_CMD); // clear display
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 f944 	bl	80010ac <lcd_send_cmd>
	HAL_Delay(10);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f001 f811 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd(ENTRY_MODE_CMD | INCREMENT_DDRAM_ADDRESS); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e2a:	2006      	movs	r0, #6
 8000e2c:	f000 f93e 	bl	80010ac <lcd_send_cmd>
	HAL_Delay(10);
 8000e30:	200a      	movs	r0, #10
 8000e32:	f001 f80b 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd(DISPLAY_ON_OFF_CMD | DISPLAY_ON_BIT); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e36:	200c      	movs	r0, #12
 8000e38:	f000 f938 	bl	80010ac <lcd_send_cmd>
	HAL_Delay(10);
 8000e3c:	200a      	movs	r0, #10
 8000e3e:	f001 f805 	bl	8001e4c <HAL_Delay>
	LCD_Clear();
 8000e42:	f000 f8b5 	bl	8000fb0 <LCD_Clear>
	HAL_Delay(100);
 8000e46:	2064      	movs	r0, #100	; 0x64
 8000e48:	f001 f800 	bl	8001e4c <HAL_Delay>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LCD_Set_Shifting_Time>:

void LCD_Set_Shifting_Time(uint16_t time)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
	LCDService.shiftTime = time;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <LCD_Set_Shifting_Time+0x1c>)
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	8053      	strh	r3, [r2, #2]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	200000a0 	.word	0x200000a0

08000e70 <LCD_Print_With_Position>:

void LCD_Print_With_Position(char *str, uint8_t lineNumber, uint8_t position)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	70bb      	strb	r3, [r7, #2]
	if (lineNumber >= COUNT_OF_LINES || position >= COUNT_OF_LETTERS_IN_ONE_LINE || LCDService.communicationStatus != COMMUNICATION_OK_STATUS)
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d82e      	bhi.n	8000ee4 <LCD_Print_With_Position+0x74>
 8000e86:	78bb      	ldrb	r3, [r7, #2]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d82b      	bhi.n	8000ee4 <LCD_Print_With_Position+0x74>
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <LCD_Print_With_Position+0x7c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d127      	bne.n	8000ee4 <LCD_Print_With_Position+0x74>
		return;

	if (lineNumber)
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <LCD_Print_With_Position+0x3a>
		lcd_send_cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET | position);
 8000e9a:	78bb      	ldrb	r3, [r7, #2]
 8000e9c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f902 	bl	80010ac <lcd_send_cmd>
 8000ea8:	e006      	b.n	8000eb8 <LCD_Print_With_Position+0x48>
	else
		lcd_send_cmd(SET_DDRAM_ADDRESS | position);
 8000eaa:	78bb      	ldrb	r3, [r7, #2]
 8000eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f8fa 	bl	80010ac <lcd_send_cmd>
	lcd_send_string(str);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f96f 	bl	800119c <lcd_send_string>
	LCDService.displayMode = NONE_DISPLAY_MODE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <LCD_Print_With_Position+0x7c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	711a      	strb	r2, [r3, #4]

	memset(LCDService.firstLineString, 0, sizeof(LCDService.firstLineString));
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <LCD_Print_With_Position+0x80>)
 8000eca:	f003 fcfb 	bl	80048c4 <memset>
	memset(LCDService.secondLineString, 0, sizeof(LCDService.secondLineString));
 8000ece:	2220      	movs	r2, #32
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <LCD_Print_With_Position+0x84>)
 8000ed4:	f003 fcf6 	bl	80048c4 <memset>
	free(LCDService.multilineString);
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <LCD_Print_With_Position+0x7c>)
 8000eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fce9 	bl	80048b4 <free>
 8000ee2:	e000      	b.n	8000ee6 <LCD_Print_With_Position+0x76>
		return;
 8000ee4:	bf00      	nop
}
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200000a0 	.word	0x200000a0
 8000ef0:	200000af 	.word	0x200000af
 8000ef4:	200000cf 	.word	0x200000cf

08000ef8 <LCD_Print_MultiLines>:
void LCD_Print_MultiLines(char *format, ...)
{
 8000ef8:	b40f      	push	{r0, r1, r2, r3}
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
	if (LCDService.communicationStatus != COMMUNICATION_OK_STATUS)
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <LCD_Print_MultiLines+0xac>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d145      	bne.n	8000f94 <LCD_Print_MultiLines+0x9c>
		return;
	va_list args;
	uint16_t textLength = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	80fb      	strh	r3, [r7, #6]
	va_start(args, format);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	603b      	str	r3, [r7, #0]
	free(LCDService.multilineString);
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <LCD_Print_MultiLines+0xac>)
 8000f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fccc 	bl	80048b4 <free>
	textLength = vsnprintf(NULL, 0, format, args);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	2100      	movs	r1, #0
 8000f22:	2000      	movs	r0, #0
 8000f24:	f003 fdba 	bl	8004a9c <vsniprintf>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	80fb      	strh	r3, [r7, #6]
	LCDService.multilineString = (char*) malloc((textLength + 1) * sizeof(char*));
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fcb6 	bl	80048a4 <malloc>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <LCD_Print_MultiLines+0xac>)
 8000f3e:	651a      	str	r2, [r3, #80]	; 0x50
	vsnprintf(LCDService.multilineString, textLength + 1, format, args);
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <LCD_Print_MultiLines+0xac>)
 8000f42:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	f003 fda5 	bl	8004a9c <vsniprintf>
	va_end(args);

	LCD_Clear();
 8000f52:	f000 f82d 	bl	8000fb0 <LCD_Clear>
	LCDService.displayMode = MULTILINE_MODE;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <LCD_Print_MultiLines+0xac>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	711a      	strb	r2, [r3, #4]
	memset(LCDService.secondLineString, 0, sizeof(LCDService.secondLineString));
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <LCD_Print_MultiLines+0xb0>)
 8000f62:	f003 fcaf 	bl	80048c4 <memset>
	memset(LCDService.firstLineString, 0, sizeof(LCDService.firstLineString));
 8000f66:	2220      	movs	r2, #32
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4810      	ldr	r0, [pc, #64]	; (8000fac <LCD_Print_MultiLines+0xb4>)
 8000f6c:	f003 fcaa 	bl	80048c4 <memset>
	LCDService.firstLinePrintPosition = 0;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <LCD_Print_MultiLines+0xac>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	731a      	strb	r2, [r3, #12]
	LCDService.secondLinePrintPosition = 0;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <LCD_Print_MultiLines+0xac>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	735a      	strb	r2, [r3, #13]
	LCDService.multilinePrintPosition = 0;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <LCD_Print_MultiLines+0xac>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	739a      	strb	r2, [r3, #14]
	LCDService.previousMilisecond = Get_Sys_Time();
 8000f82:	f000 feaf 	bl	8001ce4 <Get_Sys_Time>
 8000f86:	4602      	mov	r2, r0
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <LCD_Print_MultiLines+0xac>)
 8000f8a:	609a      	str	r2, [r3, #8]
	Multi_Line_Service(1);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 f997 	bl	80012c0 <Multi_Line_Service>
 8000f92:	e000      	b.n	8000f96 <LCD_Print_MultiLines+0x9e>
		return;
 8000f94:	bf00      	nop
}
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f9e:	b004      	add	sp, #16
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200000a0 	.word	0x200000a0
 8000fa8:	200000cf 	.word	0x200000cf
 8000fac:	200000af 	.word	0x200000af

08000fb0 <LCD_Clear>:

	LCDService.previousMilisecond = Get_Sys_Time();
}

void LCD_Clear(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	if (LCDService.communicationStatus == COMMUNICATION_OK_STATUS)
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <LCD_Clear+0x18>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <LCD_Clear+0x12>
		lcd_send_cmd(CLEAR_DISPLAY_CMD);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 f875 	bl	80010ac <lcd_send_cmd>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000a0 	.word	0x200000a0

08000fcc <LCD_Service>:

void LCD_Service(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	uint8_t static communicationErrorWasActive = 0;
	if (LCDService.communicationStatus != COMMUNICATION_OK_STATUS)
 8000fd0:	4b31      	ldr	r3, [pc, #196]	; (8001098 <LCD_Service+0xcc>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d03c      	beq.n	8001052 <LCD_Service+0x86>
	{
		if (LCDService.displayMode != NONE_DISPLAY_MODE)
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <LCD_Service+0xcc>)
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d01a      	beq.n	8001016 <LCD_Service+0x4a>
		{
			LCDService.firstLinePrintPosition = 0;
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <LCD_Service+0xcc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	731a      	strb	r2, [r3, #12]
			LCDService.secondLinePrintPosition = 0;
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <LCD_Service+0xcc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	735a      	strb	r2, [r3, #13]
			LCDService.multilinePrintPosition = 0;
 8000fec:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <LCD_Service+0xcc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	739a      	strb	r2, [r3, #14]
			LCDService.displayMode = NONE_DISPLAY_MODE;
 8000ff2:	4b29      	ldr	r3, [pc, #164]	; (8001098 <LCD_Service+0xcc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	711a      	strb	r2, [r3, #4]
			memset(LCDService.firstLineString, 0, sizeof(LCDService.firstLineString));
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4827      	ldr	r0, [pc, #156]	; (800109c <LCD_Service+0xd0>)
 8000ffe:	f003 fc61 	bl	80048c4 <memset>
			memset(LCDService.secondLineString, 0, sizeof(LCDService.secondLineString));
 8001002:	2220      	movs	r2, #32
 8001004:	2100      	movs	r1, #0
 8001006:	4826      	ldr	r0, [pc, #152]	; (80010a0 <LCD_Service+0xd4>)
 8001008:	f003 fc5c 	bl	80048c4 <memset>
			free(LCDService.multilineString);
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <LCD_Service+0xcc>)
 800100e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fc4f 	bl	80048b4 <free>
		}
		if (Get_Sys_Time() - LCDService.previousMilisecond > REINIT_TIME_IN_MILIS)
 8001016:	f000 fe65 	bl	8001ce4 <Get_Sys_Time>
 800101a:	4602      	mov	r2, r0
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <LCD_Service+0xcc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f241 3288 	movw	r2, #5000	; 0x1388
 8001026:	4293      	cmp	r3, r2
 8001028:	d90f      	bls.n	800104a <LCD_Service+0x7e>
		{
			LCDService.previousMilisecond = Get_Sys_Time();
 800102a:	f000 fe5b 	bl	8001ce4 <Get_Sys_Time>
 800102e:	4602      	mov	r2, r0
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <LCD_Service+0xcc>)
 8001032:	609a      	str	r2, [r3, #8]
			HAL_I2C_DeInit(&hi2c1);
 8001034:	481b      	ldr	r0, [pc, #108]	; (80010a4 <LCD_Service+0xd8>)
 8001036:	f002 f8b3 	bl	80031a0 <HAL_I2C_DeInit>
			HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f000 ff06 	bl	8001e4c <HAL_Delay>
			HAL_I2C_Init(&hi2c1);
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <LCD_Service+0xd8>)
 8001042:	f001 ff75 	bl	8002f30 <HAL_I2C_Init>
			LCD_I2C_Init();
 8001046:	f7ff fec1 	bl	8000dcc <LCD_I2C_Init>
		}
		communicationErrorWasActive = 1;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <LCD_Service+0xdc>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
		return;
 8001050:	e020      	b.n	8001094 <LCD_Service+0xc8>
	}
	else if (communicationErrorWasActive)
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <LCD_Service+0xdc>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00e      	beq.n	8001078 <LCD_Service+0xac>
	{
		communicationErrorWasActive = 0;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <LCD_Service+0xdc>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_DeInit(&hi2c1);
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <LCD_Service+0xd8>)
 8001062:	f002 f89d 	bl	80031a0 <HAL_I2C_DeInit>
		HAL_Delay(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f000 fef0 	bl	8001e4c <HAL_Delay>
		HAL_I2C_Init(&hi2c1);
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LCD_Service+0xd8>)
 800106e:	f001 ff5f 	bl	8002f30 <HAL_I2C_Init>
		LCD_I2C_Init();
 8001072:	f7ff feab 	bl	8000dcc <LCD_I2C_Init>
		return;
 8001076:	e00d      	b.n	8001094 <LCD_Service+0xc8>
	}
	if (LCDService.displayMode == TWO_LINES_SEPARATELY_MODE)
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <LCD_Service+0xcc>)
 800107a:	791b      	ldrb	r3, [r3, #4]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d102      	bne.n	8001086 <LCD_Service+0xba>
	{
		Two_Lines_Separately_Service();
 8001080:	f000 f8b8 	bl	80011f4 <Two_Lines_Separately_Service>
 8001084:	e006      	b.n	8001094 <LCD_Service+0xc8>
	}
	else if (LCDService.displayMode == MULTILINE_MODE)
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <LCD_Service+0xcc>)
 8001088:	791b      	ldrb	r3, [r3, #4]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <LCD_Service+0xc8>
	{
		Multi_Line_Service(0);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f916 	bl	80012c0 <Multi_Line_Service>
	}
}
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000a0 	.word	0x200000a0
 800109c:	200000af 	.word	0x200000af
 80010a0:	200000cf 	.word	0x200000cf
 80010a4:	200000f4 	.word	0x200000f4
 80010a8:	2000008c 	.word	0x2000008c

080010ac <lcd_send_cmd>:

static void lcd_send_cmd(uint8_t cmd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f023 030f 	bic.w	r3, r3, #15
 80010bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | (DUMMY_BIT | ENABLE_BIT); //en=1, rs=0
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f043 030c 	orr.w	r3, r3, #12
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | DUMMY_BIT;				   //en=0, rs=0
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | (DUMMY_BIT | ENABLE_BIT); //en=1, rs=0
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	f043 030c 	orr.w	r3, r3, #12
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | DUMMY_BIT;				   //en=0, rs=0
 80010e2:	7bbb      	ldrb	r3, [r7, #14]
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	72fb      	strb	r3, [r7, #11]
	LCDService.communicationStatus = HAL_I2C_Master_Transmit(&hi2c1,
 80010ec:	f107 0208 	add.w	r2, r7, #8
 80010f0:	23c8      	movs	r3, #200	; 0xc8
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2304      	movs	r3, #4
 80010f6:	217e      	movs	r1, #126	; 0x7e
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <lcd_send_cmd+0x7c>)
 80010fa:	f002 f881 	bl	8003200 <HAL_I2C_Master_Transmit>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <lcd_send_cmd+0x80>)
 8001104:	701a      	strb	r2, [r3, #0]
	SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 200);
	if (cmd == CLEAR_DISPLAY_CMD || cmd == RETURN_HOME_CMD)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d002      	beq.n	8001112 <lcd_send_cmd+0x66>
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d103      	bne.n	800111a <lcd_send_cmd+0x6e>
		HAL_Delay(6);
 8001112:	2006      	movs	r0, #6
 8001114:	f000 fe9a 	bl	8001e4c <HAL_Delay>
 8001118:	e002      	b.n	8001120 <lcd_send_cmd+0x74>
	else
		HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f000 fe96 	bl	8001e4c <HAL_Delay>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000f4 	.word	0x200000f4
 800112c:	200000a0 	.word	0x200000a0

08001130 <lcd_send_data>:

static void lcd_send_data(char data)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af02      	add	r7, sp, #8
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f023 030f 	bic.w	r3, r3, #15
 8001140:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | (DUMMY_BIT | ENABLE_BIT | RESET_BIT); //en=1, rs=1
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	f043 030d 	orr.w	r3, r3, #13
 800114e:	b2db      	uxtb	r3, r3
 8001150:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | (DUMMY_BIT | RESET_BIT);			   //en=0, rs=1
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	f043 0309 	orr.w	r3, r3, #9
 8001158:	b2db      	uxtb	r3, r3
 800115a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | (DUMMY_BIT | ENABLE_BIT | RESET_BIT); //en=1, rs=1
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	f043 030d 	orr.w	r3, r3, #13
 8001162:	b2db      	uxtb	r3, r3
 8001164:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | (DUMMY_BIT | RESET_BIT);			   //en=0, rs=1
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	f043 0309 	orr.w	r3, r3, #9
 800116c:	b2db      	uxtb	r3, r3
 800116e:	72fb      	strb	r3, [r7, #11]
	LCDService.communicationStatus = HAL_I2C_Master_Transmit(&hi2c1,
 8001170:	f107 0208 	add.w	r2, r7, #8
 8001174:	23c8      	movs	r3, #200	; 0xc8
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2304      	movs	r3, #4
 800117a:	217e      	movs	r1, #126	; 0x7e
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <lcd_send_data+0x64>)
 800117e:	f002 f83f 	bl	8003200 <HAL_I2C_Master_Transmit>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <lcd_send_data+0x68>)
 8001188:	701a      	strb	r2, [r3, #0]
	SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 200);
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000f4 	.word	0x200000f4
 8001198:	200000a0 	.word	0x200000a0

0800119c <lcd_send_string>:

static void lcd_send_string(char *str)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	while (*str)
 80011a4:	e006      	b.n	80011b4 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffbe 	bl	8001130 <lcd_send_data>
	while (*str)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f4      	bne.n	80011a6 <lcd_send_string+0xa>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <lcd_send_string_2>:

static void lcd_send_string_2(char *str, uint8_t countOfChars)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
	while (countOfChars)
 80011d0:	e009      	b.n	80011e6 <lcd_send_string_2+0x22>
	{
		lcd_send_data(*str++);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ffa8 	bl	8001130 <lcd_send_data>
		countOfChars--;
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	70fb      	strb	r3, [r7, #3]
	while (countOfChars)
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f2      	bne.n	80011d2 <lcd_send_string_2+0xe>
	}
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <Two_Lines_Separately_Service>:
		lcd_send_string(" ");
	}
}

static void Two_Lines_Separately_Service(void)
{
 80011f4:	b598      	push	{r3, r4, r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	if (LCDService.shiftTime == 0)
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 80011fa:	885b      	ldrh	r3, [r3, #2]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d056      	beq.n	80012ae <Two_Lines_Separately_Service+0xba>
		return;
	if (Get_Sys_Time() - LCDService.previousMilisecond >= LCDService.shiftTime)
 8001200:	f000 fd70 	bl	8001ce4 <Get_Sys_Time>
 8001204:	4602      	mov	r2, r0
 8001206:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 800120e:	8852      	ldrh	r2, [r2, #2]
 8001210:	4293      	cmp	r3, r2
 8001212:	d34d      	bcc.n	80012b0 <Two_Lines_Separately_Service+0xbc>
	{
		LCDService.previousMilisecond = Get_Sys_Time();
 8001214:	f000 fd66 	bl	8001ce4 <Get_Sys_Time>
 8001218:	4602      	mov	r2, r0
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 800121c:	609a      	str	r2, [r3, #8]
		if (LCDService.firstLineString[0] != 0)
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001220:	7bdb      	ldrb	r3, [r3, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d01e      	beq.n	8001264 <Two_Lines_Separately_Service+0x70>
		{
			LCDService.firstLinePrintPosition++;
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001228:	7b1b      	ldrb	r3, [r3, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001230:	731a      	strb	r2, [r3, #12]
			if (LCDService.firstLinePrintPosition + COUNT_OF_LETTERS_IN_ONE_LINE > strlen(LCDService.firstLineString))
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	3310      	adds	r3, #16
 8001238:	461c      	mov	r4, r3
 800123a:	481f      	ldr	r0, [pc, #124]	; (80012b8 <Two_Lines_Separately_Service+0xc4>)
 800123c:	f7fe ffd0 	bl	80001e0 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	429c      	cmp	r4, r3
 8001244:	d902      	bls.n	800124c <Two_Lines_Separately_Service+0x58>
			{
				LCDService.firstLinePrintPosition = 0;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001248:	2200      	movs	r2, #0
 800124a:	731a      	strb	r2, [r3, #12]
			}
			lcd_send_cmd(RETURN_HOME_CMD);
 800124c:	2002      	movs	r0, #2
 800124e:	f7ff ff2d 	bl	80010ac <lcd_send_cmd>
			lcd_send_string_2(LCDService.firstLineString + LCDService.firstLinePrintPosition,
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001254:	7b1b      	ldrb	r3, [r3, #12]
 8001256:	461a      	mov	r2, r3
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <Two_Lines_Separately_Service+0xc4>)
 800125a:	4413      	add	r3, r2
 800125c:	2110      	movs	r1, #16
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ffb0 	bl	80011c4 <lcd_send_string_2>
			COUNT_OF_LETTERS_IN_ONE_LINE);
		}
		if (LCDService.secondLineString[0] != 0)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001266:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800126a:	2b00      	cmp	r3, #0
 800126c:	d020      	beq.n	80012b0 <Two_Lines_Separately_Service+0xbc>
		{
			LCDService.secondLinePrintPosition++;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001270:	7b5b      	ldrb	r3, [r3, #13]
 8001272:	3301      	adds	r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001278:	735a      	strb	r2, [r3, #13]
			if (LCDService.secondLinePrintPosition + COUNT_OF_LETTERS_IN_ONE_LINE > strlen(LCDService.secondLineString))
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 800127c:	7b5b      	ldrb	r3, [r3, #13]
 800127e:	3310      	adds	r3, #16
 8001280:	461c      	mov	r4, r3
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <Two_Lines_Separately_Service+0xc8>)
 8001284:	f7fe ffac 	bl	80001e0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	429c      	cmp	r4, r3
 800128c:	d902      	bls.n	8001294 <Two_Lines_Separately_Service+0xa0>
			{
				LCDService.secondLinePrintPosition = 0;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	735a      	strb	r2, [r3, #13]
			}
			lcd_send_cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 8001294:	20c0      	movs	r0, #192	; 0xc0
 8001296:	f7ff ff09 	bl	80010ac <lcd_send_cmd>
			lcd_send_string_2(LCDService.secondLineString + LCDService.secondLinePrintPosition,
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <Two_Lines_Separately_Service+0xc0>)
 800129c:	7b5b      	ldrb	r3, [r3, #13]
 800129e:	461a      	mov	r2, r3
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <Two_Lines_Separately_Service+0xc8>)
 80012a2:	4413      	add	r3, r2
 80012a4:	2110      	movs	r1, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff8c 	bl	80011c4 <lcd_send_string_2>
 80012ac:	e000      	b.n	80012b0 <Two_Lines_Separately_Service+0xbc>
		return;
 80012ae:	bf00      	nop
			COUNT_OF_LETTERS_IN_ONE_LINE);
		}
	}
}
 80012b0:	bd98      	pop	{r3, r4, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200000a0 	.word	0x200000a0
 80012b8:	200000af 	.word	0x200000af
 80012bc:	200000cf 	.word	0x200000cf

080012c0 <Multi_Line_Service>:
static void Multi_Line_Service(uint8_t ignoreTime)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	uint8_t secondLine = 0, charCounter = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	2300      	movs	r3, #0
 80012d0:	73bb      	strb	r3, [r7, #14]
	if (LCDService.shiftTime == 0 || LCDService.multilineString == NULL)
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <Multi_Line_Service+0x108>)
 80012d4:	885b      	ldrh	r3, [r3, #2]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d072      	beq.n	80013c0 <Multi_Line_Service+0x100>
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <Multi_Line_Service+0x108>)
 80012dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d06e      	beq.n	80013c0 <Multi_Line_Service+0x100>
	{
		return;
	}
	if (Get_Sys_Time() - LCDService.previousMilisecond >= LCDService.shiftTime || ignoreTime)
 80012e2:	f000 fcff 	bl	8001ce4 <Get_Sys_Time>
 80012e6:	4602      	mov	r2, r0
 80012e8:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <Multi_Line_Service+0x108>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	4a36      	ldr	r2, [pc, #216]	; (80013c8 <Multi_Line_Service+0x108>)
 80012f0:	8852      	ldrh	r2, [r2, #2]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d202      	bcs.n	80012fc <Multi_Line_Service+0x3c>
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d062      	beq.n	80013c2 <Multi_Line_Service+0x102>
	{
		LCDService.previousMilisecond = Get_Sys_Time();
 80012fc:	f000 fcf2 	bl	8001ce4 <Get_Sys_Time>
 8001300:	4602      	mov	r2, r0
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <Multi_Line_Service+0x108>)
 8001304:	609a      	str	r2, [r3, #8]
		LCD_Clear();
 8001306:	f7ff fe53 	bl	8000fb0 <LCD_Clear>
		for (uint8_t i = LCDService.multilinePrintPosition; i < strlen(LCDService.multilineString); i++)
 800130a:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <Multi_Line_Service+0x108>)
 800130c:	7b9b      	ldrb	r3, [r3, #14]
 800130e:	737b      	strb	r3, [r7, #13]
 8001310:	e039      	b.n	8001386 <Multi_Line_Service+0xc6>
		{
			if (!secondLine) //zapisujemy pozycję, od której zaczniemy drukowanie po upływie czasu wypisania kolejnej linii
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d104      	bne.n	8001322 <Multi_Line_Service+0x62>
			{
				LCDService.multilinePrintPosition = i + 1;
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	3301      	adds	r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <Multi_Line_Service+0x108>)
 8001320:	739a      	strb	r2, [r3, #14]
			}
			if (LCDService.multilineString[i] == '\n')
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <Multi_Line_Service+0x108>)
 8001324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b0a      	cmp	r3, #10
 800132e:	d10b      	bne.n	8001348 <Multi_Line_Service+0x88>
			{
				charCounter = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	73bb      	strb	r3, [r7, #14]
				if (!secondLine)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <Multi_Line_Service+0x80>
					lcd_send_cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 800133a:	20c0      	movs	r0, #192	; 0xc0
 800133c:	f7ff feb6 	bl	80010ac <lcd_send_cmd>
				secondLine++;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
				continue;
 8001346:	e01b      	b.n	8001380 <Multi_Line_Service+0xc0>
			}
			else if (charCounter == COUNT_OF_LETTERS_IN_ONE_LINE)
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d10a      	bne.n	8001364 <Multi_Line_Service+0xa4>
			{
				charCounter = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73bb      	strb	r3, [r7, #14]
				if (!secondLine)
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <Multi_Line_Service+0x9e>
					lcd_send_cmd(SET_DDRAM_ADDRESS | SECOND_LINE_ADDRESS_OFFSET);
 8001358:	20c0      	movs	r0, #192	; 0xc0
 800135a:	f7ff fea7 	bl	80010ac <lcd_send_cmd>
				secondLine++;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	3301      	adds	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
			}
			if (secondLine >= 2)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d817      	bhi.n	800139a <Multi_Line_Service+0xda>
				break;
			lcd_send_data(LCDService.multilineString[i]);
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <Multi_Line_Service+0x108>)
 800136c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	4413      	add	r3, r2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fedb 	bl	8001130 <lcd_send_data>
			charCounter++;
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	3301      	adds	r3, #1
 800137e:	73bb      	strb	r3, [r7, #14]
		for (uint8_t i = LCDService.multilinePrintPosition; i < strlen(LCDService.multilineString); i++)
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	3301      	adds	r3, #1
 8001384:	737b      	strb	r3, [r7, #13]
 8001386:	7b7c      	ldrb	r4, [r7, #13]
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <Multi_Line_Service+0x108>)
 800138a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe ff27 	bl	80001e0 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	429c      	cmp	r4, r3
 8001396:	d3bc      	bcc.n	8001312 <Multi_Line_Service+0x52>
 8001398:	e000      	b.n	800139c <Multi_Line_Service+0xdc>
				break;
 800139a:	bf00      	nop
		}
		if (LCDService.multilinePrintPosition + charCounter >= strlen(LCDService.multilineString))
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <Multi_Line_Service+0x108>)
 800139e:	7b9b      	ldrb	r3, [r3, #14]
 80013a0:	461a      	mov	r2, r3
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	4413      	add	r3, r2
 80013a6:	461c      	mov	r4, r3
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <Multi_Line_Service+0x108>)
 80013aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe ff17 	bl	80001e0 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	429c      	cmp	r4, r3
 80013b6:	d304      	bcc.n	80013c2 <Multi_Line_Service+0x102>
		{
			LCDService.multilinePrintPosition = 0;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <Multi_Line_Service+0x108>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	739a      	strb	r2, [r3, #14]
 80013be:	e000      	b.n	80013c2 <Multi_Line_Service+0x102>
		return;
 80013c0:	bf00      	nop
		}
	}
}
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	200000a0 	.word	0x200000a0

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fcc9 	bl	8001d68 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f863 	bl	80014a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f000 f997 	bl	800170c <MX_GPIO_Init>
  MX_TIM3_Init();
 80013de:	f000 f947 	bl	8001670 <MX_TIM3_Init>
  MX_I2C1_Init();
 80013e2:	f000 f917 	bl	8001614 <MX_I2C1_Init>
  MX_ADC1_Init();
 80013e6:	f000 f8c3 	bl	8001570 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80013ea:	4826      	ldr	r0, [pc, #152]	; (8001484 <main+0xb8>)
 80013ec:	f002 fe89 	bl	8004102 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 80013f0:	4825      	ldr	r0, [pc, #148]	; (8001488 <main+0xbc>)
 80013f2:	f000 fd91 	bl	8001f18 <HAL_ADC_Start_IT>
	LCD_I2C_Init();
 80013f6:	f7ff fce9 	bl	8000dcc <LCD_I2C_Init>
	LCD_Set_Shifting_Time(2000);
 80013fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013fe:	f7ff fd27 	bl	8000e50 <LCD_Set_Shifting_Time>
	LCD_Print_MultiLines("jakis dlugi %d, ktory niech mi sie tutaj wyswietla, bo musi", 3);
 8001402:	2103      	movs	r1, #3
 8001404:	4821      	ldr	r0, [pc, #132]	; (800148c <main+0xc0>)
 8001406:	f7ff fd77 	bl	8000ef8 <LCD_Print_MultiLines>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t value = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
	while (1)
	{
		if (value != Get_Sys_Seconds())
 800140e:	f000 fc75 	bl	8001cfc <Get_Sys_Seconds>
 8001412:	4602      	mov	r2, r0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4293      	cmp	r3, r2
 8001418:	d0f9      	beq.n	800140e <main+0x42>
		{
			value = Get_Sys_Seconds();
 800141a:	f000 fc6f 	bl	8001cfc <Get_Sys_Seconds>
 800141e:	6078      	str	r0, [r7, #4]
			LCD_Service();
 8001420:	f7ff fdd4 	bl	8000fcc <LCD_Service>
			float temp = 0;
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
			if (Get_Current_Temperature(&temp))
 800142a:	463b      	mov	r3, r7
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fbb1 	bl	8001b94 <Get_Current_Temperature>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01e      	beq.n	8001476 <main+0xaa>
			{
				LCD_Print_MultiLines("temp = %d.%d", (int)temp, (int)(temp * 100) % 100);
 8001438:	edd7 7a00 	vldr	s15, [r7]
 800143c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001440:	edd7 7a00 	vldr	s15, [r7]
 8001444:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001490 <main+0xc4>
 8001448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001450:	ee17 2a90 	vmov	r2, s15
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <main+0xc8>)
 8001456:	fb83 1302 	smull	r1, r3, r3, r2
 800145a:	1159      	asrs	r1, r3, #5
 800145c:	17d3      	asrs	r3, r2, #31
 800145e:	1acb      	subs	r3, r1, r3
 8001460:	2164      	movs	r1, #100	; 0x64
 8001462:	fb01 f303 	mul.w	r3, r1, r3
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	461a      	mov	r2, r3
 800146a:	ee16 1a90 	vmov	r1, s13
 800146e:	480a      	ldr	r0, [pc, #40]	; (8001498 <main+0xcc>)
 8001470:	f7ff fd42 	bl	8000ef8 <LCD_Print_MultiLines>
 8001474:	e7cb      	b.n	800140e <main+0x42>
			}
			else
			{
				LCD_Print_With_Position("ERROR", 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	4808      	ldr	r0, [pc, #32]	; (800149c <main+0xd0>)
 800147c:	f7ff fcf8 	bl	8000e70 <LCD_Print_With_Position>
		if (value != Get_Sys_Seconds())
 8001480:	e7c5      	b.n	800140e <main+0x42>
 8001482:	bf00      	nop
 8001484:	20000148 	.word	0x20000148
 8001488:	20000188 	.word	0x20000188
 800148c:	0800512c 	.word	0x0800512c
 8001490:	42c80000 	.word	0x42c80000
 8001494:	51eb851f 	.word	0x51eb851f
 8001498:	08005168 	.word	0x08005168
 800149c:	08005178 	.word	0x08005178

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2230      	movs	r2, #48	; 0x30
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 fa08 	bl	80048c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <SystemClock_Config+0xc8>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a26      	ldr	r2, [pc, #152]	; (8001568 <SystemClock_Config+0xc8>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <SystemClock_Config+0xc8>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <SystemClock_Config+0xcc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a20      	ldr	r2, [pc, #128]	; (800156c <SystemClock_Config+0xcc>)
 80014ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <SystemClock_Config+0xcc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001510:	2304      	movs	r3, #4
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001514:	2364      	movs	r3, #100	; 0x64
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800151c:	2304      	movs	r3, #4
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	4618      	mov	r0, r3
 8001526:	f002 f973 	bl	8003810 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001530:	f000 f99b 	bl	800186a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	2103      	movs	r1, #3
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fbcd 	bl	8003cf0 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800155c:	f000 f985 	bl	800186a <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3750      	adds	r7, #80	; 0x50
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000

08001570 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_ADC1_Init+0x98>)
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <MX_ADC1_Init+0x9c>)
 8001586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_ADC1_Init+0x98>)
 800158a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800158e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_ADC1_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_ADC1_Init+0x98>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_ADC1_Init+0x98>)
 800159e:	2201      	movs	r2, #1
 80015a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_ADC1_Init+0x98>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_ADC1_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_ADC1_Init+0x98>)
 80015b2:	4a17      	ldr	r2, [pc, #92]	; (8001610 <MX_ADC1_Init+0xa0>)
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_ADC1_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_ADC1_Init+0x98>)
 80015be:	2201      	movs	r2, #1
 80015c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_ADC1_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_ADC1_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_ADC1_Init+0x98>)
 80015d2:	f000 fc5d 	bl	8001e90 <HAL_ADC_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015dc:	f000 f945 	bl	800186a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80015e0:	230b      	movs	r3, #11
 80015e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015e8:	2307      	movs	r3, #7
 80015ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_ADC1_Init+0x98>)
 80015f2:	f000 fea3 	bl	800233c <HAL_ADC_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015fc:	f000 f935 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000188 	.word	0x20000188
 800160c:	40012000 	.word	0x40012000
 8001610:	0f000001 	.word	0x0f000001

08001614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_I2C1_Init+0x50>)
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <MX_I2C1_Init+0x54>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_I2C1_Init+0x50>)
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_I2C1_Init+0x58>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_I2C1_Init+0x50>)
 8001632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_I2C1_Init+0x50>)
 8001652:	f001 fc6d 	bl	8002f30 <HAL_I2C_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800165c:	f000 f905 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200000f4 	.word	0x200000f4
 8001668:	40005400 	.word	0x40005400
 800166c:	000186a0 	.word	0x000186a0

08001670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <MX_TIM3_Init+0x94>)
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <MX_TIM3_Init+0x98>)
 8001690:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_TIM3_Init+0x94>)
 8001694:	22c7      	movs	r2, #199	; 0xc7
 8001696:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_TIM3_Init+0x94>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_TIM3_Init+0x94>)
 80016a0:	f241 3287 	movw	r2, #4999	; 0x1387
 80016a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_TIM3_Init+0x94>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_TIM3_Init+0x94>)
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016b2:	4814      	ldr	r0, [pc, #80]	; (8001704 <MX_TIM3_Init+0x94>)
 80016b4:	f002 fcfa 	bl	80040ac <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016be:	f000 f8d4 	bl	800186a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4619      	mov	r1, r3
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_TIM3_Init+0x94>)
 80016d0:	f002 fe43 	bl	800435a <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80016da:	f000 f8c6 	bl	800186a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016e6:	463b      	mov	r3, r7
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_TIM3_Init+0x94>)
 80016ec:	f003 f82e 	bl	800474c <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016f6:	f000 f8b8 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000148 	.word	0x20000148
 8001708:	40000400 	.word	0x40000400

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a30      	ldr	r2, [pc, #192]	; (80017ec <MX_GPIO_Init+0xe0>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a29      	ldr	r2, [pc, #164]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <MX_GPIO_Init+0xe0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_GPIO_Init+0xe0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2120      	movs	r1, #32
 8001796:	4816      	ldr	r0, [pc, #88]	; (80017f0 <MX_GPIO_Init+0xe4>)
 8001798:	f001 fb7e 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 800179c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_GPIO_Init+0xe8>)
 80017a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <MX_GPIO_Init+0xec>)
 80017b2:	f001 f90d 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017b6:	2320      	movs	r3, #32
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <MX_GPIO_Init+0xe4>)
 80017ce:	f001 f8ff 	bl	80029d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2028      	movs	r0, #40	; 0x28
 80017d8:	f001 f8c3 	bl	8002962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017dc:	2028      	movs	r0, #40	; 0x28
 80017de:	f001 f8dc 	bl	800299a <HAL_NVIC_EnableIRQ>

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	10210000 	.word	0x10210000
 80017f8:	40020800 	.word	0x40020800

080017fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BlueButton_Pin)
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800180c:	d104      	bne.n	8001818 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800180e:	2120      	movs	r1, #32
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <HAL_GPIO_EXTI_Callback+0x28>)
 8001812:	f001 fb5a 	bl	8002eca <HAL_GPIO_TogglePin>
	else
	{
		__NOP();
	}
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, HAL_GPIO_ReadPin(BlueButton_GPIO_Port, BlueButton_Pin));
}
 8001816:	e000      	b.n	800181a <HAL_GPIO_EXTI_Callback+0x1e>
		__NOP();
 8001818:	bf00      	nop
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40020000 	.word	0x40020000

08001828 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Time_Service();
 800183a:	f000 fa1d 	bl	8001c78 <Time_Service>
	}
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40000400 	.word	0x40000400

0800184c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	Temperature_Service(HAL_ADC_GetValue(hadc));
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fd50 	bl	80022fa <HAL_ADC_GetValue>
 800185a:	4603      	mov	r3, r0
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f9b1 	bl	8001bc4 <Temperature_Service>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_MspInit+0x4c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <HAL_MspInit+0x4c>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_MspInit+0x4c>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_MspInit+0x4c>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_MspInit+0x4c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <HAL_ADC_MspInit+0x8c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d12f      	bne.n	800194a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_ADC_MspInit+0x90>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a19      	ldr	r2, [pc, #100]	; (8001958 <HAL_ADC_MspInit+0x90>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_ADC_MspInit+0x90>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_ADC_MspInit+0x90>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_ADC_MspInit+0x90>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_ADC_MspInit+0x90>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001922:	2302      	movs	r3, #2
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001926:	2303      	movs	r3, #3
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4809      	ldr	r0, [pc, #36]	; (800195c <HAL_ADC_MspInit+0x94>)
 8001936:	f001 f84b 	bl	80029d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	2012      	movs	r0, #18
 8001940:	f001 f80f 	bl	8002962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001944:	2012      	movs	r0, #18
 8001946:	f001 f828 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40012000 	.word	0x40012000
 8001958:	40023800 	.word	0x40023800
 800195c:	40020800 	.word	0x40020800

08001960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <HAL_I2C_MspInit+0x84>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12c      	bne.n	80019dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800199e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a4:	2312      	movs	r3, #18
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b0:	2304      	movs	r3, #4
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	480c      	ldr	r0, [pc, #48]	; (80019ec <HAL_I2C_MspInit+0x8c>)
 80019bc:	f001 f808 	bl	80029d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 80019ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ce:	6413      	str	r3, [r2, #64]	; 0x40
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40005400 	.word	0x40005400
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020400 	.word	0x40020400

080019f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_I2C_MspDeInit+0x30>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10a      	bne.n	8001a18 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_I2C_MspDeInit+0x34>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_I2C_MspDeInit+0x34>)
 8001a08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001a0e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_I2C_MspDeInit+0x38>)
 8001a14:	f001 f95e 	bl	8002cd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40005400 	.word	0x40005400
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020400 	.word	0x40020400

08001a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_TIM_Base_MspInit+0x48>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d115      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_TIM_Base_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_TIM_Base_MspInit+0x4c>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_TIM_Base_MspInit+0x4c>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	201d      	movs	r0, #29
 8001a60:	f000 ff7f 	bl	8002962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a64:	201d      	movs	r0, #29
 8001a66:	f000 ff98 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40000400 	.word	0x40000400
 8001a78:	40023800 	.word	0x40023800

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f99c 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <ADC_IRQHandler+0x10>)
 8001ade:	f000 facb 	bl	8002078 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000188 	.word	0x20000188

08001aec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <TIM3_IRQHandler+0x10>)
 8001af2:	f002 fb2a 	bl	800414a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000148 	.word	0x20000148

08001b00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b08:	f001 f9fa 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <_sbrk+0x50>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x16>
		heap_end = &end;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <_sbrk+0x50>)
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <_sbrk+0x54>)
 8001b24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <_sbrk+0x50>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <_sbrk+0x50>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	466a      	mov	r2, sp
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d907      	bls.n	8001b4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b3a:	f002 fe89 	bl	8004850 <__errno>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	230c      	movs	r3, #12
 8001b42:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
 8001b48:	e006      	b.n	8001b58 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <_sbrk+0x50>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a03      	ldr	r2, [pc, #12]	; (8001b60 <_sbrk+0x50>)
 8001b54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000090 	.word	0x20000090
 8001b64:	200001f0 	.word	0x200001f0

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <SystemInit+0x28>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <SystemInit+0x28>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SystemInit+0x28>)
 8001b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b82:	609a      	str	r2, [r3, #8]
#endif
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Get_Current_Temperature>:
#define COUNT_OF_SAMPLES 65535

temperature_struct temperatureService;

uint8_t Get_Current_Temperature(float *temperature)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	if (temperatureService.valueReadedCorrectly)
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <Get_Current_Temperature+0x2c>)
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <Get_Current_Temperature+0x1c>
	{
		*temperature = temperatureService.temperature;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <Get_Current_Temperature+0x2c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	601a      	str	r2, [r3, #0]
		return 1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <Get_Current_Temperature+0x1e>
	}
	return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	200001d0 	.word	0x200001d0

08001bc4 <Temperature_Service>:
uint8_t Get_Average_Temperature(float *temperature)
{
	return 0; //todo zrobic usredniania z zapisem dla flash
}
void Temperature_Service(uint32_t adcValue)
{
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	static float sumOfTemperatures = 0;
	temperatureService.samplesCounter++;
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <Temperature_Service+0xa0>)
 8001bce:	88db      	ldrh	r3, [r3, #6]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <Temperature_Service+0xa0>)
 8001bd6:	80da      	strh	r2, [r3, #6]
	sumOfTemperatures += (SUPPLY_VOLTAGE / ADC_RESOLUTION) * adcValue * 100.0;
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <Temperature_Service+0xa4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcbb 	bl	8000558 <__aeabi_f2d>
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001c6c <Temperature_Service+0xa8>
 8001bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf8:	ee17 0a90 	vmov	r0, s15
 8001bfc:	f7fe fcac 	bl	8000558 <__aeabi_f2d>
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <Temperature_Service+0xac>)
 8001c06:	f7fe fcff 	bl	8000608 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe fb43 	bl	800029c <__adddf3>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	f7fe ff05 	bl	8000a2c <__aeabi_d2f>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <Temperature_Service+0xa4>)
 8001c26:	601a      	str	r2, [r3, #0]

	if(temperatureService.samplesCounter == COUNT_OF_SAMPLES)
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <Temperature_Service+0xa0>)
 8001c2a:	88db      	ldrh	r3, [r3, #6]
 8001c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d113      	bne.n	8001c5c <Temperature_Service+0x98>
	{
		temperatureService.samplesCounter = 0;
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <Temperature_Service+0xa0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	80da      	strh	r2, [r3, #6]
		temperatureService.temperature = sumOfTemperatures/COUNT_OF_SAMPLES;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <Temperature_Service+0xa4>)
 8001c3c:	ed93 7a00 	vldr	s14, [r3]
 8001c40:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001c74 <Temperature_Service+0xb0>
 8001c44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <Temperature_Service+0xa0>)
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
		temperatureService.valueReadedCorrectly = 1;
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <Temperature_Service+0xa0>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	711a      	strb	r2, [r3, #4]
		sumOfTemperatures = 0;
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <Temperature_Service+0xa4>)
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}
 8001c64:	200001d0 	.word	0x200001d0
 8001c68:	20000094 	.word	0x20000094
 8001c6c:	3a534067 	.word	0x3a534067
 8001c70:	40590000 	.word	0x40590000
 8001c74:	477fff00 	.word	0x477fff00

08001c78 <Time_Service>:

#define INTERUPT_TIME_IN_MILIS 10
timer_struct timerService;

void Time_Service(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
	timerService.miliseconds+=INTERUPT_TIME_IN_MILIS;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <Time_Service+0x60>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	330a      	adds	r3, #10
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <Time_Service+0x60>)
 8001c84:	6013      	str	r3, [r2, #0]
	if(timerService.miliseconds % 1000 == 0)
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <Time_Service+0x60>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <Time_Service+0x64>)
 8001c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d116      	bne.n	8001cce <Time_Service+0x56>
	{
		timerService.seconds++;
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <Time_Service+0x60>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <Time_Service+0x60>)
 8001ca8:	6053      	str	r3, [r2, #4]
		if(timerService.seconds %60==0)
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <Time_Service+0x60>)
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <Time_Service+0x68>)
 8001cb0:	fba3 2301 	umull	r2, r3, r3, r1
 8001cb4:	095a      	lsrs	r2, r3, #5
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	1aca      	subs	r2, r1, r3
 8001cc0:	2a00      	cmp	r2, #0
 8001cc2:	d104      	bne.n	8001cce <Time_Service+0x56>
		{
			timerService.minutes++;
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <Time_Service+0x60>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <Time_Service+0x60>)
 8001ccc:	6093      	str	r3, [r2, #8]
		}
	}

}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	200001d8 	.word	0x200001d8
 8001cdc:	10624dd3 	.word	0x10624dd3
 8001ce0:	88888889 	.word	0x88888889

08001ce4 <Get_Sys_Time>:
uint32_t Get_Sys_Time(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	return timerService.miliseconds;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <Get_Sys_Time+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	200001d8 	.word	0x200001d8

08001cfc <Get_Sys_Seconds>:
uint32_t Get_Sys_Seconds(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
	return timerService.seconds;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <Get_Sys_Seconds+0x14>)
 8001d02:	685b      	ldr	r3, [r3, #4]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	200001d8 	.word	0x200001d8

08001d14 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d1a:	e003      	b.n	8001d24 <LoopCopyDataInit>

08001d1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d22:	3104      	adds	r1, #4

08001d24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d2c:	d3f6      	bcc.n	8001d1c <CopyDataInit>
  ldr  r2, =_sbss
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d30:	e002      	b.n	8001d38 <LoopFillZerobss>

08001d32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d34:	f842 3b04 	str.w	r3, [r2], #4

08001d38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d3c:	d3f9      	bcc.n	8001d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d3e:	f7ff ff13 	bl	8001b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d42:	f002 fd8b 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d46:	f7ff fb41 	bl	80013cc <main>
  bx  lr    
 8001d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d50:	080051dc 	.word	0x080051dc
  ldr  r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d58:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001d5c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001d60:	200001ec 	.word	0x200001ec

08001d64 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <DMA1_Stream0_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_Init+0x40>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_Init+0x40>)
 8001d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_Init+0x40>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 fddb 	bl	800294c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f808 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff fd6c 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x54>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x58>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fdf3 	bl	80029b6 <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00e      	b.n	8001df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d80a      	bhi.n	8001df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f000 fdbb 	bl	8002962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <HAL_InitTick+0x5c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000008 	.word	0x20000008
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	200001e4 	.word	0x200001e4

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200001e4 	.word	0x200001e4

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff ffee 	bl	8001e34 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_Delay+0x40>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000008 	.word	0x20000008

08001e90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e033      	b.n	8001f0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fd0a 	bl	80018c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ed6:	f023 0302 	bic.w	r3, r3, #2
 8001eda:	f043 0202 	orr.w	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fb5c 	bl	80025a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
 8001efe:	e001      	b.n	8001f04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Start_IT+0x1a>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e094      	b.n	800205c <HAL_ADC_Start_IT+0x144>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d018      	beq.n	8001f7a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_ADC_Start_IT+0x150>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a43      	ldr	r2, [pc, #268]	; (800206c <HAL_ADC_Start_IT+0x154>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9a      	lsrs	r2, r3, #18
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f6c:	e002      	b.n	8001f74 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f9      	bne.n	8001f6e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d168      	bne.n	800205a <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc6:	d106      	bne.n	8001fd6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f023 0206 	bic.w	r2, r3, #6
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_ADC_Start_IT+0x158>)
 8001fe6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ff0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002000:	f043 0320 	orr.w	r3, r3, #32
 8002004:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d11c      	bne.n	800205a <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	e013      	b.n	800205a <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <HAL_ADC_Start_IT+0x15c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10e      	bne.n	800205a <HAL_ADC_Start_IT+0x142>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002058:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	20000000 	.word	0x20000000
 800206c:	431bde83 	.word	0x431bde83
 8002070:	40012300 	.word	0x40012300
 8002074:	40012000 	.word	0x40012000

08002078 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	bf0c      	ite	eq
 8002096:	2301      	moveq	r3, #1
 8002098:	2300      	movne	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d049      	beq.n	800214e <HAL_ADC_IRQHandler+0xd6>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d046      	beq.n	800214e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d12b      	bne.n	800213e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d127      	bne.n	800213e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002106:	2b00      	cmp	r3, #0
 8002108:	d119      	bne.n	800213e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0220 	bic.w	r2, r2, #32
 8002118:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fb84 	bl	800184c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0212 	mvn.w	r2, #18
 800214c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b04      	cmp	r3, #4
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	2b80      	cmp	r3, #128	; 0x80
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d057      	beq.n	8002230 <HAL_ADC_IRQHandler+0x1b8>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d054      	beq.n	8002230 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d139      	bne.n	8002220 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d12b      	bne.n	8002220 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d124      	bne.n	8002220 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d11d      	bne.n	8002220 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d119      	bne.n	8002220 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f043 0201 	orr.w	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fab9 	bl	8002798 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f06f 020c 	mvn.w	r2, #12
 800222e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	bf0c      	ite	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	2300      	movne	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d017      	beq.n	8002292 <HAL_ADC_IRQHandler+0x21a>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d014      	beq.n	8002292 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10d      	bne.n	8002292 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f846 	bl	8002314 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0201 	mvn.w	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b20      	cmp	r3, #32
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_ADC_IRQHandler+0x27a>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d012      	beq.n	80022f2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f043 0202 	orr.w	r2, r3, #2
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0220 	mvn.w	r2, #32
 80022e0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f820 	bl	8002328 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0220 	mvn.w	r2, #32
 80022f0:	601a      	str	r2, [r3, #0]
  }
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1c>
 8002354:	2302      	movs	r3, #2
 8002356:	e113      	b.n	8002580 <HAL_ADC_ConfigChannel+0x244>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b09      	cmp	r3, #9
 8002366:	d925      	bls.n	80023b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	3b1e      	subs	r3, #30
 800237e:	2207      	movs	r2, #7
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43da      	mvns	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	400a      	ands	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68d9      	ldr	r1, [r3, #12]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	4603      	mov	r3, r0
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4403      	add	r3, r0
 80023a6:	3b1e      	subs	r3, #30
 80023a8:	409a      	lsls	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	e022      	b.n	80023fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	2207      	movs	r2, #7
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	400a      	ands	r2, r1
 80023d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4403      	add	r3, r0
 80023f0:	409a      	lsls	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d824      	bhi.n	800244c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	3b05      	subs	r3, #5
 8002414:	221f      	movs	r2, #31
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	3b05      	subs	r3, #5
 800243e:	fa00 f203 	lsl.w	r2, r0, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
 800244a:	e04c      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b0c      	cmp	r3, #12
 8002452:	d824      	bhi.n	800249e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b23      	subs	r3, #35	; 0x23
 8002466:	221f      	movs	r2, #31
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43da      	mvns	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	400a      	ands	r2, r1
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b23      	subs	r3, #35	; 0x23
 8002490:	fa00 f203 	lsl.w	r2, r0, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
 800249c:	e023      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	3b41      	subs	r3, #65	; 0x41
 80024b0:	221f      	movs	r2, #31
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	400a      	ands	r2, r1
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3b41      	subs	r3, #65	; 0x41
 80024da:	fa00 f203 	lsl.w	r2, r0, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e6:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_ADC_ConfigChannel+0x250>)
 80024e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a28      	ldr	r2, [pc, #160]	; (8002590 <HAL_ADC_ConfigChannel+0x254>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d10f      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1d8>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b12      	cmp	r3, #18
 80024fa:	d10b      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_ADC_ConfigChannel+0x254>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12b      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x23a>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_ADC_ConfigChannel+0x258>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d003      	beq.n	8002530 <HAL_ADC_ConfigChannel+0x1f4>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b11      	cmp	r3, #17
 800252e:	d122      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_ADC_ConfigChannel+0x258>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d111      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_ADC_ConfigChannel+0x25c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a11      	ldr	r2, [pc, #68]	; (800259c <HAL_ADC_ConfigChannel+0x260>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	0c9a      	lsrs	r2, r3, #18
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002568:	e002      	b.n	8002570 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3b01      	subs	r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f9      	bne.n	800256a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40012300 	.word	0x40012300
 8002590:	40012000 	.word	0x40012000
 8002594:	10000012 	.word	0x10000012
 8002598:	20000000 	.word	0x20000000
 800259c:	431bde83 	.word	0x431bde83

080025a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a8:	4b79      	ldr	r3, [pc, #484]	; (8002790 <ADC_Init+0x1f0>)
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	021a      	lsls	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	4a58      	ldr	r2, [pc, #352]	; (8002794 <ADC_Init+0x1f4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d022      	beq.n	800267e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002646:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6899      	ldr	r1, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6899      	ldr	r1, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	e00f      	b.n	800269e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800268c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800269c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0202 	bic.w	r2, r2, #2
 80026ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7e1b      	ldrb	r3, [r3, #24]
 80026b8:	005a      	lsls	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01b      	beq.n	8002704 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	3b01      	subs	r3, #1
 80026f8:	035a      	lsls	r2, r3, #13
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	e007      	b.n	8002714 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	3b01      	subs	r3, #1
 8002730:	051a      	lsls	r2, r3, #20
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002748:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002756:	025a      	lsls	r2, r3, #9
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	029a      	lsls	r2, r3, #10
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40012300 	.word	0x40012300
 8002794:	0f000001 	.word	0x0f000001

08002798 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027de:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	60d3      	str	r3, [r2, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <__NVIC_GetPriorityGrouping+0x18>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0307 	and.w	r3, r3, #7
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	2b00      	cmp	r3, #0
 8002820:	db0b      	blt.n	800283a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	f003 021f 	and.w	r2, r3, #31
 8002828:	4907      	ldr	r1, [pc, #28]	; (8002848 <__NVIC_EnableIRQ+0x38>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2001      	movs	r0, #1
 8002832:	fa00 f202 	lsl.w	r2, r0, r2
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100

0800284c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db0a      	blt.n	8002876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	490c      	ldr	r1, [pc, #48]	; (8002898 <__NVIC_SetPriority+0x4c>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	0112      	lsls	r2, r2, #4
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	440b      	add	r3, r1
 8002870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002874:	e00a      	b.n	800288c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4908      	ldr	r1, [pc, #32]	; (800289c <__NVIC_SetPriority+0x50>)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	3b04      	subs	r3, #4
 8002884:	0112      	lsls	r2, r2, #4
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	440b      	add	r3, r1
 800288a:	761a      	strb	r2, [r3, #24]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000e100 	.word	0xe000e100
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f1c3 0307 	rsb	r3, r3, #7
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	bf28      	it	cs
 80028be:	2304      	movcs	r3, #4
 80028c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d902      	bls.n	80028d0 <NVIC_EncodePriority+0x30>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3b03      	subs	r3, #3
 80028ce:	e000      	b.n	80028d2 <NVIC_EncodePriority+0x32>
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43da      	mvns	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	401a      	ands	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43d9      	mvns	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	4313      	orrs	r3, r2
         );
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002918:	d301      	bcc.n	800291e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291a:	2301      	movs	r3, #1
 800291c:	e00f      	b.n	800293e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <SysTick_Config+0x40>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002926:	210f      	movs	r1, #15
 8002928:	f04f 30ff 	mov.w	r0, #4294967295
 800292c:	f7ff ff8e 	bl	800284c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <SysTick_Config+0x40>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <SysTick_Config+0x40>)
 8002938:	2207      	movs	r2, #7
 800293a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	e000e010 	.word	0xe000e010

0800294c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ff29 	bl	80027ac <__NVIC_SetPriorityGrouping>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002974:	f7ff ff3e 	bl	80027f4 <__NVIC_GetPriorityGrouping>
 8002978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f7ff ff8e 	bl	80028a0 <NVIC_EncodePriority>
 8002984:	4602      	mov	r2, r0
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff5d 	bl	800284c <__NVIC_SetPriority>
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff31 	bl	8002810 <__NVIC_EnableIRQ>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffa2 	bl	8002908 <SysTick_Config>
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	e159      	b.n	8002ca0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029ec:	2201      	movs	r2, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	f040 8148 	bne.w	8002c9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d00b      	beq.n	8002a2a <HAL_GPIO_Init+0x5a>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a1e:	2b11      	cmp	r3, #17
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b12      	cmp	r3, #18
 8002a28:	d130      	bne.n	8002a8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	2203      	movs	r2, #3
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 0201 	and.w	r2, r3, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0xfc>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b12      	cmp	r3, #18
 8002aca:	d123      	bne.n	8002b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	08da      	lsrs	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3208      	adds	r2, #8
 8002ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	08da      	lsrs	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3208      	adds	r2, #8
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0203 	and.w	r2, r3, #3
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a2 	beq.w	8002c9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <HAL_GPIO_Init+0x2e4>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4a55      	ldr	r2, [pc, #340]	; (8002cb4 <HAL_GPIO_Init+0x2e4>)
 8002b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b64:	6453      	str	r3, [r2, #68]	; 0x44
 8002b66:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <HAL_GPIO_Init+0x2e4>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b72:	4a51      	ldr	r2, [pc, #324]	; (8002cb8 <HAL_GPIO_Init+0x2e8>)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	220f      	movs	r2, #15
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a48      	ldr	r2, [pc, #288]	; (8002cbc <HAL_GPIO_Init+0x2ec>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d019      	beq.n	8002bd2 <HAL_GPIO_Init+0x202>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a47      	ldr	r2, [pc, #284]	; (8002cc0 <HAL_GPIO_Init+0x2f0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_GPIO_Init+0x1fe>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a46      	ldr	r2, [pc, #280]	; (8002cc4 <HAL_GPIO_Init+0x2f4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00d      	beq.n	8002bca <HAL_GPIO_Init+0x1fa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a45      	ldr	r2, [pc, #276]	; (8002cc8 <HAL_GPIO_Init+0x2f8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <HAL_GPIO_Init+0x1f6>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a44      	ldr	r2, [pc, #272]	; (8002ccc <HAL_GPIO_Init+0x2fc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_GPIO_Init+0x1f2>
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	e008      	b.n	8002bd4 <HAL_GPIO_Init+0x204>
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	e006      	b.n	8002bd4 <HAL_GPIO_Init+0x204>
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e004      	b.n	8002bd4 <HAL_GPIO_Init+0x204>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_Init+0x204>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_GPIO_Init+0x204>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	f002 0203 	and.w	r2, r2, #3
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	4093      	lsls	r3, r2
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be4:	4934      	ldr	r1, [pc, #208]	; (8002cb8 <HAL_GPIO_Init+0x2e8>)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3302      	adds	r3, #2
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf2:	4b37      	ldr	r3, [pc, #220]	; (8002cd0 <HAL_GPIO_Init+0x300>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c16:	4a2e      	ldr	r2, [pc, #184]	; (8002cd0 <HAL_GPIO_Init+0x300>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <HAL_GPIO_Init+0x300>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c40:	4a23      	ldr	r2, [pc, #140]	; (8002cd0 <HAL_GPIO_Init+0x300>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <HAL_GPIO_Init+0x300>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c6a:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_GPIO_Init+0x300>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c70:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_GPIO_Init+0x300>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c94:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <HAL_GPIO_Init+0x300>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	f67f aea2 	bls.w	80029ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3724      	adds	r7, #36	; 0x24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	40020800 	.word	0x40020800
 8002cc8:	40020c00 	.word	0x40020c00
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e0bb      	b.n	8002e68 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	f040 80ab 	bne.w	8002e62 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d0c:	4a5b      	ldr	r2, [pc, #364]	; (8002e7c <HAL_GPIO_DeInit+0x1a8>)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d18:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	220f      	movs	r2, #15
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a53      	ldr	r2, [pc, #332]	; (8002e80 <HAL_GPIO_DeInit+0x1ac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_DeInit+0x96>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_GPIO_DeInit+0x1b0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_DeInit+0x92>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a51      	ldr	r2, [pc, #324]	; (8002e88 <HAL_GPIO_DeInit+0x1b4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_DeInit+0x8e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a50      	ldr	r2, [pc, #320]	; (8002e8c <HAL_GPIO_DeInit+0x1b8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_DeInit+0x8a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4f      	ldr	r2, [pc, #316]	; (8002e90 <HAL_GPIO_DeInit+0x1bc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_DeInit+0x86>
 8002d56:	2304      	movs	r3, #4
 8002d58:	e008      	b.n	8002d6c <HAL_GPIO_DeInit+0x98>
 8002d5a:	2307      	movs	r3, #7
 8002d5c:	e006      	b.n	8002d6c <HAL_GPIO_DeInit+0x98>
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e004      	b.n	8002d6c <HAL_GPIO_DeInit+0x98>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e002      	b.n	8002d6c <HAL_GPIO_DeInit+0x98>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_GPIO_DeInit+0x98>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	f002 0203 	and.w	r2, r2, #3
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	4093      	lsls	r3, r2
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d132      	bne.n	8002de2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002d7c:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <HAL_GPIO_DeInit+0x1c0>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	4943      	ldr	r1, [pc, #268]	; (8002e94 <HAL_GPIO_DeInit+0x1c0>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002d8a:	4b42      	ldr	r3, [pc, #264]	; (8002e94 <HAL_GPIO_DeInit+0x1c0>)
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	4940      	ldr	r1, [pc, #256]	; (8002e94 <HAL_GPIO_DeInit+0x1c0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002d98:	4b3e      	ldr	r3, [pc, #248]	; (8002e94 <HAL_GPIO_DeInit+0x1c0>)
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	493c      	ldr	r1, [pc, #240]	; (8002e94 <HAL_GPIO_DeInit+0x1c0>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_GPIO_DeInit+0x1c0>)
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	4939      	ldr	r1, [pc, #228]	; (8002e94 <HAL_GPIO_DeInit+0x1c0>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002dc4:	4a2d      	ldr	r2, [pc, #180]	; (8002e7c <HAL_GPIO_DeInit+0x1a8>)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	4829      	ldr	r0, [pc, #164]	; (8002e7c <HAL_GPIO_DeInit+0x1a8>)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	400a      	ands	r2, r1
 8002ddc:	3302      	adds	r3, #2
 8002dde:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2103      	movs	r1, #3
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	08da      	lsrs	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	4019      	ands	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3208      	adds	r2, #8
 8002e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	401a      	ands	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	401a      	ands	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2103      	movs	r1, #3
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	f67f af40 	bls.w	8002cf0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	40020000 	.word	0x40020000
 8002e84:	40020400 	.word	0x40020400
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	40020c00 	.word	0x40020c00
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40013c00 	.word	0x40013c00

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb4:	e003      	b.n	8002ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	041a      	lsls	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	887b      	ldrh	r3, [r7, #2]
 8002edc:	401a      	ands	r2, r3
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d104      	bne.n	8002eee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	041a      	lsls	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002eec:	e002      	b.n	8002ef4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fc6c 	bl	80017fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013c00 	.word	0x40013c00

08002f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e11f      	b.n	8003182 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe fd02 	bl	8001960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	; 0x24
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f94:	f001 f876 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8002f98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a7b      	ldr	r2, [pc, #492]	; (800318c <HAL_I2C_Init+0x25c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d807      	bhi.n	8002fb4 <HAL_I2C_Init+0x84>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4a7a      	ldr	r2, [pc, #488]	; (8003190 <HAL_I2C_Init+0x260>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bf94      	ite	ls
 8002fac:	2301      	movls	r3, #1
 8002fae:	2300      	movhi	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e006      	b.n	8002fc2 <HAL_I2C_Init+0x92>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a77      	ldr	r2, [pc, #476]	; (8003194 <HAL_I2C_Init+0x264>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	bf94      	ite	ls
 8002fbc:	2301      	movls	r3, #1
 8002fbe:	2300      	movhi	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0db      	b.n	8003182 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a72      	ldr	r2, [pc, #456]	; (8003198 <HAL_I2C_Init+0x268>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0c9b      	lsrs	r3, r3, #18
 8002fd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a64      	ldr	r2, [pc, #400]	; (800318c <HAL_I2C_Init+0x25c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d802      	bhi.n	8003004 <HAL_I2C_Init+0xd4>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	3301      	adds	r3, #1
 8003002:	e009      	b.n	8003018 <HAL_I2C_Init+0xe8>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	4a63      	ldr	r2, [pc, #396]	; (800319c <HAL_I2C_Init+0x26c>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	3301      	adds	r3, #1
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	430b      	orrs	r3, r1
 800301e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800302a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4956      	ldr	r1, [pc, #344]	; (800318c <HAL_I2C_Init+0x25c>)
 8003034:	428b      	cmp	r3, r1
 8003036:	d80d      	bhi.n	8003054 <HAL_I2C_Init+0x124>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e59      	subs	r1, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fbb1 f3f3 	udiv	r3, r1, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	2b04      	cmp	r3, #4
 800304e:	bf38      	it	cc
 8003050:	2304      	movcc	r3, #4
 8003052:	e04f      	b.n	80030f4 <HAL_I2C_Init+0x1c4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d111      	bne.n	8003080 <HAL_I2C_Init+0x150>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	440b      	add	r3, r1
 800306a:	fbb0 f3f3 	udiv	r3, r0, r3
 800306e:	3301      	adds	r3, #1
 8003070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e012      	b.n	80030a6 <HAL_I2C_Init+0x176>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e58      	subs	r0, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	0099      	lsls	r1, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	fbb0 f3f3 	udiv	r3, r0, r3
 8003096:	3301      	adds	r3, #1
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Init+0x17e>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e022      	b.n	80030f4 <HAL_I2C_Init+0x1c4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10e      	bne.n	80030d4 <HAL_I2C_Init+0x1a4>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1e58      	subs	r0, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	440b      	add	r3, r1
 80030c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d2:	e00f      	b.n	80030f4 <HAL_I2C_Init+0x1c4>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	0099      	lsls	r1, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	6809      	ldr	r1, [r1, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6911      	ldr	r1, [r2, #16]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68d2      	ldr	r2, [r2, #12]
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	430b      	orrs	r3, r1
 8003136:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	000186a0 	.word	0x000186a0
 8003190:	001e847f 	.word	0x001e847f
 8003194:	003d08ff 	.word	0x003d08ff
 8003198:	431bde83 	.word	0x431bde83
 800319c:	10624dd3 	.word	0x10624dd3

080031a0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e021      	b.n	80031f6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2224      	movs	r2, #36	; 0x24
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe fc10 	bl	80019f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	461a      	mov	r2, r3
 800320c:	460b      	mov	r3, r1
 800320e:	817b      	strh	r3, [r7, #10]
 8003210:	4613      	mov	r3, r2
 8003212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7fe fe0e 	bl	8001e34 <HAL_GetTick>
 8003218:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b20      	cmp	r3, #32
 8003224:	f040 80e0 	bne.w	80033e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2319      	movs	r3, #25
 800322e:	2201      	movs	r2, #1
 8003230:	4970      	ldr	r1, [pc, #448]	; (80033f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f964 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
 8003240:	e0d3      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_I2C_Master_Transmit+0x50>
 800324c:	2302      	movs	r3, #2
 800324e:	e0cc      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d007      	beq.n	8003276 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2221      	movs	r2, #33	; 0x21
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2210      	movs	r2, #16
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	893a      	ldrh	r2, [r7, #8]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a50      	ldr	r2, [pc, #320]	; (80033f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f89c 	bl	80033fc <I2C_MasterRequestWrite>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e08d      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032e4:	e066      	b.n	80033b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	6a39      	ldr	r1, [r7, #32]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f9de 	bl	80036ac <I2C_WaitOnTXEFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d107      	bne.n	800330e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e06b      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b04      	cmp	r3, #4
 800334e:	d11b      	bne.n	8003388 <HAL_I2C_Master_Transmit+0x188>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	d017      	beq.n	8003388 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	6a39      	ldr	r1, [r7, #32]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f9ce 	bl	800372e <I2C_WaitOnBTFFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e01a      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d194      	bne.n	80032e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	00100002 	.word	0x00100002
 80033f8:	ffff0000 	.word	0xffff0000

080033fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	460b      	mov	r3, r1
 800340a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d006      	beq.n	8003426 <I2C_MasterRequestWrite+0x2a>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d003      	beq.n	8003426 <I2C_MasterRequestWrite+0x2a>
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003424:	d108      	bne.n	8003438 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	e00b      	b.n	8003450 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	2b12      	cmp	r3, #18
 800343e:	d107      	bne.n	8003450 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f84f 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00c      	beq.n	8003482 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e035      	b.n	80034ee <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348a:	d108      	bne.n	800349e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800348c:	897b      	ldrh	r3, [r7, #10]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800349a:	611a      	str	r2, [r3, #16]
 800349c:	e01b      	b.n	80034d6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	11db      	asrs	r3, r3, #7
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 0306 	and.w	r3, r3, #6
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f063 030f 	orn	r3, r3, #15
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	490f      	ldr	r1, [pc, #60]	; (80034f8 <I2C_MasterRequestWrite+0xfc>)
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f876 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e010      	b.n	80034ee <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034cc:	897b      	ldrh	r3, [r7, #10]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <I2C_MasterRequestWrite+0x100>)
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f866 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	00010008 	.word	0x00010008
 80034fc:	00010002 	.word	0x00010002

08003500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003510:	e025      	b.n	800355e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d021      	beq.n	800355e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe fc8b 	bl	8001e34 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d116      	bne.n	800355e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e023      	b.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d10d      	bne.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	43da      	mvns	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	e00c      	b.n	800359e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4013      	ands	r3, r2
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d0b6      	beq.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035bc:	e051      	b.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035cc:	d123      	bne.n	8003616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e046      	b.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d021      	beq.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fe fc09 	bl	8001e34 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e020      	b.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d10c      	bne.n	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e00b      	b.n	800369e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	43da      	mvns	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d18d      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b8:	e02d      	b.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f878 	bl	80037b0 <I2C_IsAcknowledgeFailed>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e02d      	b.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d021      	beq.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7fe fbaf 	bl	8001e34 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d116      	bne.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d1ca      	bne.n	80036ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800373a:	e02d      	b.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f837 	bl	80037b0 <I2C_IsAcknowledgeFailed>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e02d      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d021      	beq.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003754:	f7fe fb6e 	bl	8001e34 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d116      	bne.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e007      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d1ca      	bne.n	800373c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c6:	d11b      	bne.n	8003800 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e25b      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d075      	beq.n	800391a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382e:	4ba3      	ldr	r3, [pc, #652]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b04      	cmp	r3, #4
 8003838:	d00c      	beq.n	8003854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383a:	4ba0      	ldr	r3, [pc, #640]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003842:	2b08      	cmp	r3, #8
 8003844:	d112      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003846:	4b9d      	ldr	r3, [pc, #628]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003852:	d10b      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	4b99      	ldr	r3, [pc, #612]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d05b      	beq.n	8003918 <HAL_RCC_OscConfig+0x108>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d157      	bne.n	8003918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e236      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x74>
 8003876:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a90      	ldr	r2, [pc, #576]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e01d      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x98>
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a8a      	ldr	r2, [pc, #552]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a87      	ldr	r2, [pc, #540]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 80038a8:	4b84      	ldr	r3, [pc, #528]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a83      	ldr	r2, [pc, #524]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a80      	ldr	r2, [pc, #512]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe fab4 	bl	8001e34 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fe fab0 	bl	8001e34 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1fb      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b76      	ldr	r3, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0xc0>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe faa0 	bl	8001e34 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe fa9c 	bl	8001e34 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e1e7      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0xe8>
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d063      	beq.n	80039ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003926:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d11c      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d116      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e1bb      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b56      	ldr	r3, [pc, #344]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4952      	ldr	r1, [pc, #328]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	e03a      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003980:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <HAL_RCC_OscConfig+0x2b0>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe fa55 	bl	8001e34 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398e:	f7fe fa51 	bl	8001e34 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e19c      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a0:	4b46      	ldr	r3, [pc, #280]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ac:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4940      	ldr	r1, [pc, #256]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
 80039c0:	e015      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c2:	4b3f      	ldr	r3, [pc, #252]	; (8003ac0 <HAL_RCC_OscConfig+0x2b0>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe fa34 	bl	8001e34 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d0:	f7fe fa30 	bl	8001e34 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e17b      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d030      	beq.n	8003a5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d016      	beq.n	8003a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a02:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCC_OscConfig+0x2b4>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fe fa14 	bl	8001e34 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a10:	f7fe fa10 	bl	8001e34 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e15b      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x200>
 8003a2e:	e015      	b.n	8003a5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x2b4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a36:	f7fe f9fd 	bl	8001e34 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3e:	f7fe f9f9 	bl	8001e34 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e144      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a0 	beq.w	8003baa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d121      	bne.n	8003aea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fe f9bf 	bl	8001e34 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	e011      	b.n	8003ade <HAL_RCC_OscConfig+0x2ce>
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470000 	.word	0x42470000
 8003ac4:	42470e80 	.word	0x42470e80
 8003ac8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003acc:	f7fe f9b2 	bl	8001e34 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0fd      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b81      	ldr	r3, [pc, #516]	; (8003ce4 <HAL_RCC_OscConfig+0x4d4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
 8003af2:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a7c      	ldr	r2, [pc, #496]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6713      	str	r3, [r2, #112]	; 0x70
 8003afe:	e01c      	b.n	8003b3a <HAL_RCC_OscConfig+0x32a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x312>
 8003b08:	4b77      	ldr	r3, [pc, #476]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a76      	ldr	r2, [pc, #472]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b74      	ldr	r3, [pc, #464]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a73      	ldr	r2, [pc, #460]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x32a>
 8003b22:	4b71      	ldr	r3, [pc, #452]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a70      	ldr	r2, [pc, #448]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b6e      	ldr	r3, [pc, #440]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a6d      	ldr	r2, [pc, #436]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fe f977 	bl	8001e34 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe f973 	bl	8001e34 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0bc      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RCC_OscConfig+0x33a>
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6e:	f7fe f961 	bl	8001e34 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe f95d 	bl	8001e34 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0a6      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8c:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a51      	ldr	r2, [pc, #324]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8092 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb4:	4b4c      	ldr	r3, [pc, #304]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d05c      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d141      	bne.n	8003c4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b48      	ldr	r3, [pc, #288]	; (8003cec <HAL_RCC_OscConfig+0x4dc>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe f931 	bl	8001e34 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe f92d 	bl	8001e34 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e078      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be8:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	019b      	lsls	r3, r3, #6
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	061b      	lsls	r3, r3, #24
 8003c18:	4933      	ldr	r1, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1e:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_RCC_OscConfig+0x4dc>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fe f906 	bl	8001e34 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fe f902 	bl	8001e34 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e04d      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x41c>
 8003c4a:	e045      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <HAL_RCC_OscConfig+0x4dc>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe f8ef 	bl	8001e34 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe f8eb 	bl	8001e34 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e036      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x44a>
 8003c78:	e02e      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e029      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c86:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d11c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d115      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cae:	4013      	ands	r3, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10d      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	42470060 	.word	0x42470060

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0cc      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d90c      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a52      	ldr	r2, [pc, #328]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d044      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d119      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e067      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dce:	4b37      	ldr	r3, [pc, #220]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4934      	ldr	r1, [pc, #208]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de0:	f7fe f828 	bl	8001e34 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7fe f824 	bl	8001e34 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e04f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 020c 	and.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d1eb      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20c      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f821 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd ff88 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	08005180 	.word	0x08005180
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	20000004 	.word	0x20000004

08003ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d007      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x32>
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d008      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x38>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 80b4 	bne.w	8004050 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eea:	60bb      	str	r3, [r7, #8]
       break;
 8003eec:	e0b3      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eee:	4b5e      	ldr	r3, [pc, #376]	; (8004068 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ef0:	60bb      	str	r3, [r7, #8]
      break;
 8003ef2:	e0b0      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef4:	4b5a      	ldr	r3, [pc, #360]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003efc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efe:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d04a      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0a:	4b55      	ldr	r3, [pc, #340]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	f04f 0400 	mov.w	r4, #0
 8003f14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	ea03 0501 	and.w	r5, r3, r1
 8003f20:	ea04 0602 	and.w	r6, r4, r2
 8003f24:	4629      	mov	r1, r5
 8003f26:	4632      	mov	r2, r6
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	f04f 0400 	mov.w	r4, #0
 8003f30:	0154      	lsls	r4, r2, #5
 8003f32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f36:	014b      	lsls	r3, r1, #5
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	1b49      	subs	r1, r1, r5
 8003f3e:	eb62 0206 	sbc.w	r2, r2, r6
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	0194      	lsls	r4, r2, #6
 8003f4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f50:	018b      	lsls	r3, r1, #6
 8003f52:	1a5b      	subs	r3, r3, r1
 8003f54:	eb64 0402 	sbc.w	r4, r4, r2
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	00e2      	lsls	r2, r4, #3
 8003f62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f66:	00d9      	lsls	r1, r3, #3
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4614      	mov	r4, r2
 8003f6c:	195b      	adds	r3, r3, r5
 8003f6e:	eb44 0406 	adc.w	r4, r4, r6
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	0262      	lsls	r2, r4, #9
 8003f7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f80:	0259      	lsls	r1, r3, #9
 8003f82:	460b      	mov	r3, r1
 8003f84:	4614      	mov	r4, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	4621      	mov	r1, r4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f04f 0400 	mov.w	r4, #0
 8003f90:	461a      	mov	r2, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	f7fc fd9a 	bl	8000acc <__aeabi_uldivmod>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	e049      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	099b      	lsrs	r3, r3, #6
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	ea03 0501 	and.w	r5, r3, r1
 8003fb6:	ea04 0602 	and.w	r6, r4, r2
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	f04f 0400 	mov.w	r4, #0
 8003fc6:	0154      	lsls	r4, r2, #5
 8003fc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fcc:	014b      	lsls	r3, r1, #5
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	1b49      	subs	r1, r1, r5
 8003fd4:	eb62 0206 	sbc.w	r2, r2, r6
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	f04f 0400 	mov.w	r4, #0
 8003fe0:	0194      	lsls	r4, r2, #6
 8003fe2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fe6:	018b      	lsls	r3, r1, #6
 8003fe8:	1a5b      	subs	r3, r3, r1
 8003fea:	eb64 0402 	sbc.w	r4, r4, r2
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	00e2      	lsls	r2, r4, #3
 8003ff8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ffc:	00d9      	lsls	r1, r3, #3
 8003ffe:	460b      	mov	r3, r1
 8004000:	4614      	mov	r4, r2
 8004002:	195b      	adds	r3, r3, r5
 8004004:	eb44 0406 	adc.w	r4, r4, r6
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	02a2      	lsls	r2, r4, #10
 8004012:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004016:	0299      	lsls	r1, r3, #10
 8004018:	460b      	mov	r3, r1
 800401a:	4614      	mov	r4, r2
 800401c:	4618      	mov	r0, r3
 800401e:	4621      	mov	r1, r4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f04f 0400 	mov.w	r4, #0
 8004026:	461a      	mov	r2, r3
 8004028:	4623      	mov	r3, r4
 800402a:	f7fc fd4f 	bl	8000acc <__aeabi_uldivmod>
 800402e:	4603      	mov	r3, r0
 8004030:	460c      	mov	r4, r1
 8004032:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	60bb      	str	r3, [r7, #8]
      break;
 800404e:	e002      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004052:	60bb      	str	r3, [r7, #8]
      break;
 8004054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004056:	68bb      	ldr	r3, [r7, #8]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	00f42400 	.word	0x00f42400
 8004068:	007a1200 	.word	0x007a1200

0800406c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <HAL_RCC_GetHCLKFreq+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000000 	.word	0x20000000

08004084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004088:	f7ff fff0 	bl	800406c <HAL_RCC_GetHCLKFreq>
 800408c:	4601      	mov	r1, r0
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	0a9b      	lsrs	r3, r3, #10
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800409a:	5cd3      	ldrb	r3, [r2, r3]
 800409c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	08005190 	.word	0x08005190

080040ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e01d      	b.n	80040fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd fcaa 	bl	8001a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fa14 	bl	8004518 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b06      	cmp	r3, #6
 800412a:	d007      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d122      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b02      	cmp	r3, #2
 800416c:	d11b      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0202 	mvn.w	r2, #2
 8004176:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f9a5 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 8004192:	e005      	b.n	80041a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f997 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f9a8 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d122      	bne.n	80041fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d11b      	bne.n	80041fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0204 	mvn.w	r2, #4
 80041ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f97b 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 80041e6:	e005      	b.n	80041f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f96d 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f97e 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d122      	bne.n	800424e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b08      	cmp	r3, #8
 8004214:	d11b      	bne.n	800424e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0208 	mvn.w	r2, #8
 800421e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2204      	movs	r2, #4
 8004224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f951 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 800423a:	e005      	b.n	8004248 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f943 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f954 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b10      	cmp	r3, #16
 800425a:	d122      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b10      	cmp	r3, #16
 8004268:	d11b      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0210 	mvn.w	r2, #16
 8004272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2208      	movs	r2, #8
 8004278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f927 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 800428e:	e005      	b.n	800429c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f919 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f92a 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d10e      	bne.n	80042ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f06f 0201 	mvn.w	r2, #1
 80042c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fd faad 	bl	8001828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d10e      	bne.n	80042fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e6:	2b80      	cmp	r3, #128	; 0x80
 80042e8:	d107      	bne.n	80042fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 faa1 	bl	800483c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d10e      	bne.n	8004326 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d107      	bne.n	8004326 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800431e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8ef 	bl	8004504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d10e      	bne.n	8004352 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b20      	cmp	r3, #32
 8004340:	d107      	bne.n	8004352 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f06f 0220 	mvn.w	r2, #32
 800434a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fa6b 	bl	8004828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_TIM_ConfigClockSource+0x18>
 800436e:	2302      	movs	r3, #2
 8004370:	e0a6      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x166>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004390:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004398:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d067      	beq.n	800447a <HAL_TIM_ConfigClockSource+0x120>
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d80b      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x6c>
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d073      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x140>
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d802      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x62>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d06f      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80043ba:	e078      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d06c      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x140>
 80043c0:	2b30      	cmp	r3, #48	; 0x30
 80043c2:	d06a      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043c4:	e073      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043c6:	2b70      	cmp	r3, #112	; 0x70
 80043c8:	d00d      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x8c>
 80043ca:	2b70      	cmp	r3, #112	; 0x70
 80043cc:	d804      	bhi.n	80043d8 <HAL_TIM_ConfigClockSource+0x7e>
 80043ce:	2b50      	cmp	r3, #80	; 0x50
 80043d0:	d033      	beq.n	800443a <HAL_TIM_ConfigClockSource+0xe0>
 80043d2:	2b60      	cmp	r3, #96	; 0x60
 80043d4:	d041      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80043d6:	e06a      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043dc:	d066      	beq.n	80044ac <HAL_TIM_ConfigClockSource+0x152>
 80043de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e2:	d017      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80043e4:	e063      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6899      	ldr	r1, [r3, #8]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f000 f989 	bl	800470c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004408:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	609a      	str	r2, [r3, #8]
      break;
 8004412:	e04c      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6899      	ldr	r1, [r3, #8]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f000 f972 	bl	800470c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004436:	609a      	str	r2, [r3, #8]
      break;
 8004438:	e039      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	461a      	mov	r2, r3
 8004448:	f000 f8e6 	bl	8004618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2150      	movs	r1, #80	; 0x50
 8004452:	4618      	mov	r0, r3
 8004454:	f000 f93f 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004458:	e029      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	461a      	mov	r2, r3
 8004468:	f000 f905 	bl	8004676 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2160      	movs	r1, #96	; 0x60
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f92f 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004478:	e019      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	461a      	mov	r2, r3
 8004488:	f000 f8c6 	bl	8004618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2140      	movs	r1, #64	; 0x40
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f91f 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004498:	e009      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f000 f916 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 80044aa:	e000      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x154>
      break;
 80044ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a34      	ldr	r2, [pc, #208]	; (80045fc <TIM_Base_SetConfig+0xe4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00f      	beq.n	8004550 <TIM_Base_SetConfig+0x38>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004536:	d00b      	beq.n	8004550 <TIM_Base_SetConfig+0x38>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a31      	ldr	r2, [pc, #196]	; (8004600 <TIM_Base_SetConfig+0xe8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0x38>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a30      	ldr	r2, [pc, #192]	; (8004604 <TIM_Base_SetConfig+0xec>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0x38>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a2f      	ldr	r2, [pc, #188]	; (8004608 <TIM_Base_SetConfig+0xf0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a25      	ldr	r2, [pc, #148]	; (80045fc <TIM_Base_SetConfig+0xe4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01b      	beq.n	80045a2 <TIM_Base_SetConfig+0x8a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004570:	d017      	beq.n	80045a2 <TIM_Base_SetConfig+0x8a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a22      	ldr	r2, [pc, #136]	; (8004600 <TIM_Base_SetConfig+0xe8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <TIM_Base_SetConfig+0x8a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a21      	ldr	r2, [pc, #132]	; (8004604 <TIM_Base_SetConfig+0xec>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00f      	beq.n	80045a2 <TIM_Base_SetConfig+0x8a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a20      	ldr	r2, [pc, #128]	; (8004608 <TIM_Base_SetConfig+0xf0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00b      	beq.n	80045a2 <TIM_Base_SetConfig+0x8a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1f      	ldr	r2, [pc, #124]	; (800460c <TIM_Base_SetConfig+0xf4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <TIM_Base_SetConfig+0x8a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <TIM_Base_SetConfig+0xf8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_Base_SetConfig+0x8a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <TIM_Base_SetConfig+0xfc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d108      	bne.n	80045b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a08      	ldr	r2, [pc, #32]	; (80045fc <TIM_Base_SetConfig+0xe4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d103      	bne.n	80045e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	615a      	str	r2, [r3, #20]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40014000 	.word	0x40014000
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800

08004618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 030a 	bic.w	r3, r3, #10
 8004654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004676:	b480      	push	{r7}
 8004678:	b087      	sub	sp, #28
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0210 	bic.w	r2, r3, #16
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	031b      	lsls	r3, r3, #12
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f043 0307 	orr.w	r3, r3, #7
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	609a      	str	r2, [r3, #8]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	431a      	orrs	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004760:	2302      	movs	r3, #2
 8004762:	e050      	b.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d013      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a16      	ldr	r2, [pc, #88]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a15      	ldr	r2, [pc, #84]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a13      	ldr	r2, [pc, #76]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10c      	bne.n	80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40010000 	.word	0x40010000
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	40000c00 	.word	0x40000c00
 8004824:	40014000 	.word	0x40014000

08004828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <__errno>:
 8004850:	4b01      	ldr	r3, [pc, #4]	; (8004858 <__errno+0x8>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	2000000c 	.word	0x2000000c

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4e0d      	ldr	r6, [pc, #52]	; (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004862:	1ba4      	subs	r4, r4, r6
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2500      	movs	r5, #0
 8004868:	42a5      	cmp	r5, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4e0b      	ldr	r6, [pc, #44]	; (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <__libc_init_array+0x44>)
 8004870:	f000 fc50 	bl	8005114 <_init>
 8004874:	1ba4      	subs	r4, r4, r6
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2500      	movs	r5, #0
 800487a:	42a5      	cmp	r5, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004884:	4798      	blx	r3
 8004886:	3501      	adds	r5, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800488e:	4798      	blx	r3
 8004890:	3501      	adds	r5, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	080051d4 	.word	0x080051d4
 8004898:	080051d4 	.word	0x080051d4
 800489c:	080051d4 	.word	0x080051d4
 80048a0:	080051d8 	.word	0x080051d8

080048a4 <malloc>:
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <malloc+0xc>)
 80048a6:	4601      	mov	r1, r0
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f000 b861 	b.w	8004970 <_malloc_r>
 80048ae:	bf00      	nop
 80048b0:	2000000c 	.word	0x2000000c

080048b4 <free>:
 80048b4:	4b02      	ldr	r3, [pc, #8]	; (80048c0 <free+0xc>)
 80048b6:	4601      	mov	r1, r0
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	f000 b80b 	b.w	80048d4 <_free_r>
 80048be:	bf00      	nop
 80048c0:	2000000c 	.word	0x2000000c

080048c4 <memset>:
 80048c4:	4402      	add	r2, r0
 80048c6:	4603      	mov	r3, r0
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d100      	bne.n	80048ce <memset+0xa>
 80048cc:	4770      	bx	lr
 80048ce:	f803 1b01 	strb.w	r1, [r3], #1
 80048d2:	e7f9      	b.n	80048c8 <memset+0x4>

080048d4 <_free_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4605      	mov	r5, r0
 80048d8:	2900      	cmp	r1, #0
 80048da:	d045      	beq.n	8004968 <_free_r+0x94>
 80048dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e0:	1f0c      	subs	r4, r1, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bfb8      	it	lt
 80048e6:	18e4      	addlt	r4, r4, r3
 80048e8:	f000 f8e6 	bl	8004ab8 <__malloc_lock>
 80048ec:	4a1f      	ldr	r2, [pc, #124]	; (800496c <_free_r+0x98>)
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	4610      	mov	r0, r2
 80048f2:	b933      	cbnz	r3, 8004902 <_free_r+0x2e>
 80048f4:	6063      	str	r3, [r4, #4]
 80048f6:	6014      	str	r4, [r2, #0]
 80048f8:	4628      	mov	r0, r5
 80048fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048fe:	f000 b8dc 	b.w	8004aba <__malloc_unlock>
 8004902:	42a3      	cmp	r3, r4
 8004904:	d90c      	bls.n	8004920 <_free_r+0x4c>
 8004906:	6821      	ldr	r1, [r4, #0]
 8004908:	1862      	adds	r2, r4, r1
 800490a:	4293      	cmp	r3, r2
 800490c:	bf04      	itt	eq
 800490e:	681a      	ldreq	r2, [r3, #0]
 8004910:	685b      	ldreq	r3, [r3, #4]
 8004912:	6063      	str	r3, [r4, #4]
 8004914:	bf04      	itt	eq
 8004916:	1852      	addeq	r2, r2, r1
 8004918:	6022      	streq	r2, [r4, #0]
 800491a:	6004      	str	r4, [r0, #0]
 800491c:	e7ec      	b.n	80048f8 <_free_r+0x24>
 800491e:	4613      	mov	r3, r2
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	b10a      	cbz	r2, 8004928 <_free_r+0x54>
 8004924:	42a2      	cmp	r2, r4
 8004926:	d9fa      	bls.n	800491e <_free_r+0x4a>
 8004928:	6819      	ldr	r1, [r3, #0]
 800492a:	1858      	adds	r0, r3, r1
 800492c:	42a0      	cmp	r0, r4
 800492e:	d10b      	bne.n	8004948 <_free_r+0x74>
 8004930:	6820      	ldr	r0, [r4, #0]
 8004932:	4401      	add	r1, r0
 8004934:	1858      	adds	r0, r3, r1
 8004936:	4282      	cmp	r2, r0
 8004938:	6019      	str	r1, [r3, #0]
 800493a:	d1dd      	bne.n	80048f8 <_free_r+0x24>
 800493c:	6810      	ldr	r0, [r2, #0]
 800493e:	6852      	ldr	r2, [r2, #4]
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	4401      	add	r1, r0
 8004944:	6019      	str	r1, [r3, #0]
 8004946:	e7d7      	b.n	80048f8 <_free_r+0x24>
 8004948:	d902      	bls.n	8004950 <_free_r+0x7c>
 800494a:	230c      	movs	r3, #12
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	e7d3      	b.n	80048f8 <_free_r+0x24>
 8004950:	6820      	ldr	r0, [r4, #0]
 8004952:	1821      	adds	r1, r4, r0
 8004954:	428a      	cmp	r2, r1
 8004956:	bf04      	itt	eq
 8004958:	6811      	ldreq	r1, [r2, #0]
 800495a:	6852      	ldreq	r2, [r2, #4]
 800495c:	6062      	str	r2, [r4, #4]
 800495e:	bf04      	itt	eq
 8004960:	1809      	addeq	r1, r1, r0
 8004962:	6021      	streq	r1, [r4, #0]
 8004964:	605c      	str	r4, [r3, #4]
 8004966:	e7c7      	b.n	80048f8 <_free_r+0x24>
 8004968:	bd38      	pop	{r3, r4, r5, pc}
 800496a:	bf00      	nop
 800496c:	20000098 	.word	0x20000098

08004970 <_malloc_r>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	1ccd      	adds	r5, r1, #3
 8004974:	f025 0503 	bic.w	r5, r5, #3
 8004978:	3508      	adds	r5, #8
 800497a:	2d0c      	cmp	r5, #12
 800497c:	bf38      	it	cc
 800497e:	250c      	movcc	r5, #12
 8004980:	2d00      	cmp	r5, #0
 8004982:	4606      	mov	r6, r0
 8004984:	db01      	blt.n	800498a <_malloc_r+0x1a>
 8004986:	42a9      	cmp	r1, r5
 8004988:	d903      	bls.n	8004992 <_malloc_r+0x22>
 800498a:	230c      	movs	r3, #12
 800498c:	6033      	str	r3, [r6, #0]
 800498e:	2000      	movs	r0, #0
 8004990:	bd70      	pop	{r4, r5, r6, pc}
 8004992:	f000 f891 	bl	8004ab8 <__malloc_lock>
 8004996:	4a21      	ldr	r2, [pc, #132]	; (8004a1c <_malloc_r+0xac>)
 8004998:	6814      	ldr	r4, [r2, #0]
 800499a:	4621      	mov	r1, r4
 800499c:	b991      	cbnz	r1, 80049c4 <_malloc_r+0x54>
 800499e:	4c20      	ldr	r4, [pc, #128]	; (8004a20 <_malloc_r+0xb0>)
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	b91b      	cbnz	r3, 80049ac <_malloc_r+0x3c>
 80049a4:	4630      	mov	r0, r6
 80049a6:	f000 f83d 	bl	8004a24 <_sbrk_r>
 80049aa:	6020      	str	r0, [r4, #0]
 80049ac:	4629      	mov	r1, r5
 80049ae:	4630      	mov	r0, r6
 80049b0:	f000 f838 	bl	8004a24 <_sbrk_r>
 80049b4:	1c43      	adds	r3, r0, #1
 80049b6:	d124      	bne.n	8004a02 <_malloc_r+0x92>
 80049b8:	230c      	movs	r3, #12
 80049ba:	6033      	str	r3, [r6, #0]
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 f87c 	bl	8004aba <__malloc_unlock>
 80049c2:	e7e4      	b.n	800498e <_malloc_r+0x1e>
 80049c4:	680b      	ldr	r3, [r1, #0]
 80049c6:	1b5b      	subs	r3, r3, r5
 80049c8:	d418      	bmi.n	80049fc <_malloc_r+0x8c>
 80049ca:	2b0b      	cmp	r3, #11
 80049cc:	d90f      	bls.n	80049ee <_malloc_r+0x7e>
 80049ce:	600b      	str	r3, [r1, #0]
 80049d0:	50cd      	str	r5, [r1, r3]
 80049d2:	18cc      	adds	r4, r1, r3
 80049d4:	4630      	mov	r0, r6
 80049d6:	f000 f870 	bl	8004aba <__malloc_unlock>
 80049da:	f104 000b 	add.w	r0, r4, #11
 80049de:	1d23      	adds	r3, r4, #4
 80049e0:	f020 0007 	bic.w	r0, r0, #7
 80049e4:	1ac3      	subs	r3, r0, r3
 80049e6:	d0d3      	beq.n	8004990 <_malloc_r+0x20>
 80049e8:	425a      	negs	r2, r3
 80049ea:	50e2      	str	r2, [r4, r3]
 80049ec:	e7d0      	b.n	8004990 <_malloc_r+0x20>
 80049ee:	428c      	cmp	r4, r1
 80049f0:	684b      	ldr	r3, [r1, #4]
 80049f2:	bf16      	itet	ne
 80049f4:	6063      	strne	r3, [r4, #4]
 80049f6:	6013      	streq	r3, [r2, #0]
 80049f8:	460c      	movne	r4, r1
 80049fa:	e7eb      	b.n	80049d4 <_malloc_r+0x64>
 80049fc:	460c      	mov	r4, r1
 80049fe:	6849      	ldr	r1, [r1, #4]
 8004a00:	e7cc      	b.n	800499c <_malloc_r+0x2c>
 8004a02:	1cc4      	adds	r4, r0, #3
 8004a04:	f024 0403 	bic.w	r4, r4, #3
 8004a08:	42a0      	cmp	r0, r4
 8004a0a:	d005      	beq.n	8004a18 <_malloc_r+0xa8>
 8004a0c:	1a21      	subs	r1, r4, r0
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f000 f808 	bl	8004a24 <_sbrk_r>
 8004a14:	3001      	adds	r0, #1
 8004a16:	d0cf      	beq.n	80049b8 <_malloc_r+0x48>
 8004a18:	6025      	str	r5, [r4, #0]
 8004a1a:	e7db      	b.n	80049d4 <_malloc_r+0x64>
 8004a1c:	20000098 	.word	0x20000098
 8004a20:	2000009c 	.word	0x2000009c

08004a24 <_sbrk_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4c06      	ldr	r4, [pc, #24]	; (8004a40 <_sbrk_r+0x1c>)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	f7fd f86e 	bl	8001b10 <_sbrk>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d102      	bne.n	8004a3e <_sbrk_r+0x1a>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	b103      	cbz	r3, 8004a3e <_sbrk_r+0x1a>
 8004a3c:	602b      	str	r3, [r5, #0]
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	200001e8 	.word	0x200001e8

08004a44 <_vsniprintf_r>:
 8004a44:	b530      	push	{r4, r5, lr}
 8004a46:	1e14      	subs	r4, r2, #0
 8004a48:	4605      	mov	r5, r0
 8004a4a:	b09b      	sub	sp, #108	; 0x6c
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	da05      	bge.n	8004a5c <_vsniprintf_r+0x18>
 8004a50:	238b      	movs	r3, #139	; 0x8b
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	b01b      	add	sp, #108	; 0x6c
 8004a5a:	bd30      	pop	{r4, r5, pc}
 8004a5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004a60:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004a64:	bf14      	ite	ne
 8004a66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a6a:	4623      	moveq	r3, r4
 8004a6c:	9302      	str	r3, [sp, #8]
 8004a6e:	9305      	str	r3, [sp, #20]
 8004a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a74:	9100      	str	r1, [sp, #0]
 8004a76:	9104      	str	r1, [sp, #16]
 8004a78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a80:	4669      	mov	r1, sp
 8004a82:	4628      	mov	r0, r5
 8004a84:	f000 f874 	bl	8004b70 <_svfiprintf_r>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	bfbc      	itt	lt
 8004a8c:	238b      	movlt	r3, #139	; 0x8b
 8004a8e:	602b      	strlt	r3, [r5, #0]
 8004a90:	2c00      	cmp	r4, #0
 8004a92:	d0e1      	beq.n	8004a58 <_vsniprintf_r+0x14>
 8004a94:	9b00      	ldr	r3, [sp, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e7dd      	b.n	8004a58 <_vsniprintf_r+0x14>

08004a9c <vsniprintf>:
 8004a9c:	b507      	push	{r0, r1, r2, lr}
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	4601      	mov	r1, r0
 8004aa6:	4803      	ldr	r0, [pc, #12]	; (8004ab4 <vsniprintf+0x18>)
 8004aa8:	6800      	ldr	r0, [r0, #0]
 8004aaa:	f7ff ffcb 	bl	8004a44 <_vsniprintf_r>
 8004aae:	b003      	add	sp, #12
 8004ab0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ab4:	2000000c 	.word	0x2000000c

08004ab8 <__malloc_lock>:
 8004ab8:	4770      	bx	lr

08004aba <__malloc_unlock>:
 8004aba:	4770      	bx	lr

08004abc <__ssputs_r>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	688e      	ldr	r6, [r1, #8]
 8004ac2:	429e      	cmp	r6, r3
 8004ac4:	4682      	mov	sl, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4690      	mov	r8, r2
 8004aca:	4699      	mov	r9, r3
 8004acc:	d837      	bhi.n	8004b3e <__ssputs_r+0x82>
 8004ace:	898a      	ldrh	r2, [r1, #12]
 8004ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ad4:	d031      	beq.n	8004b3a <__ssputs_r+0x7e>
 8004ad6:	6825      	ldr	r5, [r4, #0]
 8004ad8:	6909      	ldr	r1, [r1, #16]
 8004ada:	1a6f      	subs	r7, r5, r1
 8004adc:	6965      	ldr	r5, [r4, #20]
 8004ade:	2302      	movs	r3, #2
 8004ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae4:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ae8:	f109 0301 	add.w	r3, r9, #1
 8004aec:	443b      	add	r3, r7
 8004aee:	429d      	cmp	r5, r3
 8004af0:	bf38      	it	cc
 8004af2:	461d      	movcc	r5, r3
 8004af4:	0553      	lsls	r3, r2, #21
 8004af6:	d530      	bpl.n	8004b5a <__ssputs_r+0x9e>
 8004af8:	4629      	mov	r1, r5
 8004afa:	f7ff ff39 	bl	8004970 <_malloc_r>
 8004afe:	4606      	mov	r6, r0
 8004b00:	b950      	cbnz	r0, 8004b18 <__ssputs_r+0x5c>
 8004b02:	230c      	movs	r3, #12
 8004b04:	f8ca 3000 	str.w	r3, [sl]
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b18:	463a      	mov	r2, r7
 8004b1a:	6921      	ldr	r1, [r4, #16]
 8004b1c:	f000 faa8 	bl	8005070 <memcpy>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	6126      	str	r6, [r4, #16]
 8004b2e:	6165      	str	r5, [r4, #20]
 8004b30:	443e      	add	r6, r7
 8004b32:	1bed      	subs	r5, r5, r7
 8004b34:	6026      	str	r6, [r4, #0]
 8004b36:	60a5      	str	r5, [r4, #8]
 8004b38:	464e      	mov	r6, r9
 8004b3a:	454e      	cmp	r6, r9
 8004b3c:	d900      	bls.n	8004b40 <__ssputs_r+0x84>
 8004b3e:	464e      	mov	r6, r9
 8004b40:	4632      	mov	r2, r6
 8004b42:	4641      	mov	r1, r8
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	f000 fa9e 	bl	8005086 <memmove>
 8004b4a:	68a3      	ldr	r3, [r4, #8]
 8004b4c:	1b9b      	subs	r3, r3, r6
 8004b4e:	60a3      	str	r3, [r4, #8]
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	441e      	add	r6, r3
 8004b54:	6026      	str	r6, [r4, #0]
 8004b56:	2000      	movs	r0, #0
 8004b58:	e7dc      	b.n	8004b14 <__ssputs_r+0x58>
 8004b5a:	462a      	mov	r2, r5
 8004b5c:	f000 faac 	bl	80050b8 <_realloc_r>
 8004b60:	4606      	mov	r6, r0
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d1e2      	bne.n	8004b2c <__ssputs_r+0x70>
 8004b66:	6921      	ldr	r1, [r4, #16]
 8004b68:	4650      	mov	r0, sl
 8004b6a:	f7ff feb3 	bl	80048d4 <_free_r>
 8004b6e:	e7c8      	b.n	8004b02 <__ssputs_r+0x46>

08004b70 <_svfiprintf_r>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	461d      	mov	r5, r3
 8004b76:	898b      	ldrh	r3, [r1, #12]
 8004b78:	061f      	lsls	r7, r3, #24
 8004b7a:	b09d      	sub	sp, #116	; 0x74
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	4616      	mov	r6, r2
 8004b82:	d50f      	bpl.n	8004ba4 <_svfiprintf_r+0x34>
 8004b84:	690b      	ldr	r3, [r1, #16]
 8004b86:	b96b      	cbnz	r3, 8004ba4 <_svfiprintf_r+0x34>
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	f7ff fef1 	bl	8004970 <_malloc_r>
 8004b8e:	6020      	str	r0, [r4, #0]
 8004b90:	6120      	str	r0, [r4, #16]
 8004b92:	b928      	cbnz	r0, 8004ba0 <_svfiprintf_r+0x30>
 8004b94:	230c      	movs	r3, #12
 8004b96:	f8c8 3000 	str.w	r3, [r8]
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9e:	e0c8      	b.n	8004d32 <_svfiprintf_r+0x1c2>
 8004ba0:	2340      	movs	r3, #64	; 0x40
 8004ba2:	6163      	str	r3, [r4, #20]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba8:	2320      	movs	r3, #32
 8004baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bae:	2330      	movs	r3, #48	; 0x30
 8004bb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bb4:	9503      	str	r5, [sp, #12]
 8004bb6:	f04f 0b01 	mov.w	fp, #1
 8004bba:	4637      	mov	r7, r6
 8004bbc:	463d      	mov	r5, r7
 8004bbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004bc2:	b10b      	cbz	r3, 8004bc8 <_svfiprintf_r+0x58>
 8004bc4:	2b25      	cmp	r3, #37	; 0x25
 8004bc6:	d13e      	bne.n	8004c46 <_svfiprintf_r+0xd6>
 8004bc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004bcc:	d00b      	beq.n	8004be6 <_svfiprintf_r+0x76>
 8004bce:	4653      	mov	r3, sl
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	f7ff ff71 	bl	8004abc <__ssputs_r>
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f000 80a4 	beq.w	8004d28 <_svfiprintf_r+0x1b8>
 8004be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be2:	4453      	add	r3, sl
 8004be4:	9309      	str	r3, [sp, #36]	; 0x24
 8004be6:	783b      	ldrb	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 809d 	beq.w	8004d28 <_svfiprintf_r+0x1b8>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bf8:	9304      	str	r3, [sp, #16]
 8004bfa:	9307      	str	r3, [sp, #28]
 8004bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c00:	931a      	str	r3, [sp, #104]	; 0x68
 8004c02:	462f      	mov	r7, r5
 8004c04:	2205      	movs	r2, #5
 8004c06:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004c0a:	4850      	ldr	r0, [pc, #320]	; (8004d4c <_svfiprintf_r+0x1dc>)
 8004c0c:	f7fb faf0 	bl	80001f0 <memchr>
 8004c10:	9b04      	ldr	r3, [sp, #16]
 8004c12:	b9d0      	cbnz	r0, 8004c4a <_svfiprintf_r+0xda>
 8004c14:	06d9      	lsls	r1, r3, #27
 8004c16:	bf44      	itt	mi
 8004c18:	2220      	movmi	r2, #32
 8004c1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c1e:	071a      	lsls	r2, r3, #28
 8004c20:	bf44      	itt	mi
 8004c22:	222b      	movmi	r2, #43	; 0x2b
 8004c24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c28:	782a      	ldrb	r2, [r5, #0]
 8004c2a:	2a2a      	cmp	r2, #42	; 0x2a
 8004c2c:	d015      	beq.n	8004c5a <_svfiprintf_r+0xea>
 8004c2e:	9a07      	ldr	r2, [sp, #28]
 8004c30:	462f      	mov	r7, r5
 8004c32:	2000      	movs	r0, #0
 8004c34:	250a      	movs	r5, #10
 8004c36:	4639      	mov	r1, r7
 8004c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c3c:	3b30      	subs	r3, #48	; 0x30
 8004c3e:	2b09      	cmp	r3, #9
 8004c40:	d94d      	bls.n	8004cde <_svfiprintf_r+0x16e>
 8004c42:	b1b8      	cbz	r0, 8004c74 <_svfiprintf_r+0x104>
 8004c44:	e00f      	b.n	8004c66 <_svfiprintf_r+0xf6>
 8004c46:	462f      	mov	r7, r5
 8004c48:	e7b8      	b.n	8004bbc <_svfiprintf_r+0x4c>
 8004c4a:	4a40      	ldr	r2, [pc, #256]	; (8004d4c <_svfiprintf_r+0x1dc>)
 8004c4c:	1a80      	subs	r0, r0, r2
 8004c4e:	fa0b f000 	lsl.w	r0, fp, r0
 8004c52:	4318      	orrs	r0, r3
 8004c54:	9004      	str	r0, [sp, #16]
 8004c56:	463d      	mov	r5, r7
 8004c58:	e7d3      	b.n	8004c02 <_svfiprintf_r+0x92>
 8004c5a:	9a03      	ldr	r2, [sp, #12]
 8004c5c:	1d11      	adds	r1, r2, #4
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	9103      	str	r1, [sp, #12]
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	db01      	blt.n	8004c6a <_svfiprintf_r+0xfa>
 8004c66:	9207      	str	r2, [sp, #28]
 8004c68:	e004      	b.n	8004c74 <_svfiprintf_r+0x104>
 8004c6a:	4252      	negs	r2, r2
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	9207      	str	r2, [sp, #28]
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	783b      	ldrb	r3, [r7, #0]
 8004c76:	2b2e      	cmp	r3, #46	; 0x2e
 8004c78:	d10c      	bne.n	8004c94 <_svfiprintf_r+0x124>
 8004c7a:	787b      	ldrb	r3, [r7, #1]
 8004c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c7e:	d133      	bne.n	8004ce8 <_svfiprintf_r+0x178>
 8004c80:	9b03      	ldr	r3, [sp, #12]
 8004c82:	1d1a      	adds	r2, r3, #4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	9203      	str	r2, [sp, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bfb8      	it	lt
 8004c8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c90:	3702      	adds	r7, #2
 8004c92:	9305      	str	r3, [sp, #20]
 8004c94:	4d2e      	ldr	r5, [pc, #184]	; (8004d50 <_svfiprintf_r+0x1e0>)
 8004c96:	7839      	ldrb	r1, [r7, #0]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f7fb faa8 	bl	80001f0 <memchr>
 8004ca0:	b138      	cbz	r0, 8004cb2 <_svfiprintf_r+0x142>
 8004ca2:	2340      	movs	r3, #64	; 0x40
 8004ca4:	1b40      	subs	r0, r0, r5
 8004ca6:	fa03 f000 	lsl.w	r0, r3, r0
 8004caa:	9b04      	ldr	r3, [sp, #16]
 8004cac:	4303      	orrs	r3, r0
 8004cae:	3701      	adds	r7, #1
 8004cb0:	9304      	str	r3, [sp, #16]
 8004cb2:	7839      	ldrb	r1, [r7, #0]
 8004cb4:	4827      	ldr	r0, [pc, #156]	; (8004d54 <_svfiprintf_r+0x1e4>)
 8004cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cba:	2206      	movs	r2, #6
 8004cbc:	1c7e      	adds	r6, r7, #1
 8004cbe:	f7fb fa97 	bl	80001f0 <memchr>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d038      	beq.n	8004d38 <_svfiprintf_r+0x1c8>
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <_svfiprintf_r+0x1e8>)
 8004cc8:	bb13      	cbnz	r3, 8004d10 <_svfiprintf_r+0x1a0>
 8004cca:	9b03      	ldr	r3, [sp, #12]
 8004ccc:	3307      	adds	r3, #7
 8004cce:	f023 0307 	bic.w	r3, r3, #7
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	9303      	str	r3, [sp, #12]
 8004cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd8:	444b      	add	r3, r9
 8004cda:	9309      	str	r3, [sp, #36]	; 0x24
 8004cdc:	e76d      	b.n	8004bba <_svfiprintf_r+0x4a>
 8004cde:	fb05 3202 	mla	r2, r5, r2, r3
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	460f      	mov	r7, r1
 8004ce6:	e7a6      	b.n	8004c36 <_svfiprintf_r+0xc6>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	3701      	adds	r7, #1
 8004cec:	9305      	str	r3, [sp, #20]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	250a      	movs	r5, #10
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf8:	3a30      	subs	r2, #48	; 0x30
 8004cfa:	2a09      	cmp	r2, #9
 8004cfc:	d903      	bls.n	8004d06 <_svfiprintf_r+0x196>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0c8      	beq.n	8004c94 <_svfiprintf_r+0x124>
 8004d02:	9105      	str	r1, [sp, #20]
 8004d04:	e7c6      	b.n	8004c94 <_svfiprintf_r+0x124>
 8004d06:	fb05 2101 	mla	r1, r5, r1, r2
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4607      	mov	r7, r0
 8004d0e:	e7f0      	b.n	8004cf2 <_svfiprintf_r+0x182>
 8004d10:	ab03      	add	r3, sp, #12
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4622      	mov	r2, r4
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <_svfiprintf_r+0x1ec>)
 8004d18:	a904      	add	r1, sp, #16
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	f3af 8000 	nop.w
 8004d20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d24:	4681      	mov	r9, r0
 8004d26:	d1d6      	bne.n	8004cd6 <_svfiprintf_r+0x166>
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	065b      	lsls	r3, r3, #25
 8004d2c:	f53f af35 	bmi.w	8004b9a <_svfiprintf_r+0x2a>
 8004d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d32:	b01d      	add	sp, #116	; 0x74
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d38:	ab03      	add	r3, sp, #12
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <_svfiprintf_r+0x1ec>)
 8004d40:	a904      	add	r1, sp, #16
 8004d42:	4640      	mov	r0, r8
 8004d44:	f000 f882 	bl	8004e4c <_printf_i>
 8004d48:	e7ea      	b.n	8004d20 <_svfiprintf_r+0x1b0>
 8004d4a:	bf00      	nop
 8004d4c:	08005198 	.word	0x08005198
 8004d50:	0800519e 	.word	0x0800519e
 8004d54:	080051a2 	.word	0x080051a2
 8004d58:	00000000 	.word	0x00000000
 8004d5c:	08004abd 	.word	0x08004abd

08004d60 <_printf_common>:
 8004d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	4691      	mov	r9, r2
 8004d66:	461f      	mov	r7, r3
 8004d68:	688a      	ldr	r2, [r1, #8]
 8004d6a:	690b      	ldr	r3, [r1, #16]
 8004d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d70:	4293      	cmp	r3, r2
 8004d72:	bfb8      	it	lt
 8004d74:	4613      	movlt	r3, r2
 8004d76:	f8c9 3000 	str.w	r3, [r9]
 8004d7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d7e:	4606      	mov	r6, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	b112      	cbz	r2, 8004d8a <_printf_common+0x2a>
 8004d84:	3301      	adds	r3, #1
 8004d86:	f8c9 3000 	str.w	r3, [r9]
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	0699      	lsls	r1, r3, #26
 8004d8e:	bf42      	ittt	mi
 8004d90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d94:	3302      	addmi	r3, #2
 8004d96:	f8c9 3000 	strmi.w	r3, [r9]
 8004d9a:	6825      	ldr	r5, [r4, #0]
 8004d9c:	f015 0506 	ands.w	r5, r5, #6
 8004da0:	d107      	bne.n	8004db2 <_printf_common+0x52>
 8004da2:	f104 0a19 	add.w	sl, r4, #25
 8004da6:	68e3      	ldr	r3, [r4, #12]
 8004da8:	f8d9 2000 	ldr.w	r2, [r9]
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	42ab      	cmp	r3, r5
 8004db0:	dc28      	bgt.n	8004e04 <_printf_common+0xa4>
 8004db2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	3300      	adds	r3, #0
 8004dba:	bf18      	it	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	0692      	lsls	r2, r2, #26
 8004dc0:	d42d      	bmi.n	8004e1e <_printf_common+0xbe>
 8004dc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	4630      	mov	r0, r6
 8004dca:	47c0      	blx	r8
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d020      	beq.n	8004e12 <_printf_common+0xb2>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	68e5      	ldr	r5, [r4, #12]
 8004dd4:	f8d9 2000 	ldr.w	r2, [r9]
 8004dd8:	f003 0306 	and.w	r3, r3, #6
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	bf08      	it	eq
 8004de0:	1aad      	subeq	r5, r5, r2
 8004de2:	68a3      	ldr	r3, [r4, #8]
 8004de4:	6922      	ldr	r2, [r4, #16]
 8004de6:	bf0c      	ite	eq
 8004de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dec:	2500      	movne	r5, #0
 8004dee:	4293      	cmp	r3, r2
 8004df0:	bfc4      	itt	gt
 8004df2:	1a9b      	subgt	r3, r3, r2
 8004df4:	18ed      	addgt	r5, r5, r3
 8004df6:	f04f 0900 	mov.w	r9, #0
 8004dfa:	341a      	adds	r4, #26
 8004dfc:	454d      	cmp	r5, r9
 8004dfe:	d11a      	bne.n	8004e36 <_printf_common+0xd6>
 8004e00:	2000      	movs	r0, #0
 8004e02:	e008      	b.n	8004e16 <_printf_common+0xb6>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4652      	mov	r2, sl
 8004e08:	4639      	mov	r1, r7
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	47c0      	blx	r8
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d103      	bne.n	8004e1a <_printf_common+0xba>
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	e7c3      	b.n	8004da6 <_printf_common+0x46>
 8004e1e:	18e1      	adds	r1, r4, r3
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	2030      	movs	r0, #48	; 0x30
 8004e24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e28:	4422      	add	r2, r4
 8004e2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e32:	3302      	adds	r3, #2
 8004e34:	e7c5      	b.n	8004dc2 <_printf_common+0x62>
 8004e36:	2301      	movs	r3, #1
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	47c0      	blx	r8
 8004e40:	3001      	adds	r0, #1
 8004e42:	d0e6      	beq.n	8004e12 <_printf_common+0xb2>
 8004e44:	f109 0901 	add.w	r9, r9, #1
 8004e48:	e7d8      	b.n	8004dfc <_printf_common+0x9c>
	...

08004e4c <_printf_i>:
 8004e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e54:	460c      	mov	r4, r1
 8004e56:	7e09      	ldrb	r1, [r1, #24]
 8004e58:	b085      	sub	sp, #20
 8004e5a:	296e      	cmp	r1, #110	; 0x6e
 8004e5c:	4617      	mov	r7, r2
 8004e5e:	4606      	mov	r6, r0
 8004e60:	4698      	mov	r8, r3
 8004e62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e64:	f000 80b3 	beq.w	8004fce <_printf_i+0x182>
 8004e68:	d822      	bhi.n	8004eb0 <_printf_i+0x64>
 8004e6a:	2963      	cmp	r1, #99	; 0x63
 8004e6c:	d036      	beq.n	8004edc <_printf_i+0x90>
 8004e6e:	d80a      	bhi.n	8004e86 <_printf_i+0x3a>
 8004e70:	2900      	cmp	r1, #0
 8004e72:	f000 80b9 	beq.w	8004fe8 <_printf_i+0x19c>
 8004e76:	2958      	cmp	r1, #88	; 0x58
 8004e78:	f000 8083 	beq.w	8004f82 <_printf_i+0x136>
 8004e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e84:	e032      	b.n	8004eec <_printf_i+0xa0>
 8004e86:	2964      	cmp	r1, #100	; 0x64
 8004e88:	d001      	beq.n	8004e8e <_printf_i+0x42>
 8004e8a:	2969      	cmp	r1, #105	; 0x69
 8004e8c:	d1f6      	bne.n	8004e7c <_printf_i+0x30>
 8004e8e:	6820      	ldr	r0, [r4, #0]
 8004e90:	6813      	ldr	r3, [r2, #0]
 8004e92:	0605      	lsls	r5, r0, #24
 8004e94:	f103 0104 	add.w	r1, r3, #4
 8004e98:	d52a      	bpl.n	8004ef0 <_printf_i+0xa4>
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6011      	str	r1, [r2, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da03      	bge.n	8004eaa <_printf_i+0x5e>
 8004ea2:	222d      	movs	r2, #45	; 0x2d
 8004ea4:	425b      	negs	r3, r3
 8004ea6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004eaa:	486f      	ldr	r0, [pc, #444]	; (8005068 <_printf_i+0x21c>)
 8004eac:	220a      	movs	r2, #10
 8004eae:	e039      	b.n	8004f24 <_printf_i+0xd8>
 8004eb0:	2973      	cmp	r1, #115	; 0x73
 8004eb2:	f000 809d 	beq.w	8004ff0 <_printf_i+0x1a4>
 8004eb6:	d808      	bhi.n	8004eca <_printf_i+0x7e>
 8004eb8:	296f      	cmp	r1, #111	; 0x6f
 8004eba:	d020      	beq.n	8004efe <_printf_i+0xb2>
 8004ebc:	2970      	cmp	r1, #112	; 0x70
 8004ebe:	d1dd      	bne.n	8004e7c <_printf_i+0x30>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	f043 0320 	orr.w	r3, r3, #32
 8004ec6:	6023      	str	r3, [r4, #0]
 8004ec8:	e003      	b.n	8004ed2 <_printf_i+0x86>
 8004eca:	2975      	cmp	r1, #117	; 0x75
 8004ecc:	d017      	beq.n	8004efe <_printf_i+0xb2>
 8004ece:	2978      	cmp	r1, #120	; 0x78
 8004ed0:	d1d4      	bne.n	8004e7c <_printf_i+0x30>
 8004ed2:	2378      	movs	r3, #120	; 0x78
 8004ed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ed8:	4864      	ldr	r0, [pc, #400]	; (800506c <_printf_i+0x220>)
 8004eda:	e055      	b.n	8004f88 <_printf_i+0x13c>
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	1d19      	adds	r1, r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6011      	str	r1, [r2, #0]
 8004ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eec:	2301      	movs	r3, #1
 8004eee:	e08c      	b.n	800500a <_printf_i+0x1be>
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6011      	str	r1, [r2, #0]
 8004ef4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ef8:	bf18      	it	ne
 8004efa:	b21b      	sxthne	r3, r3
 8004efc:	e7cf      	b.n	8004e9e <_printf_i+0x52>
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	6825      	ldr	r5, [r4, #0]
 8004f02:	1d18      	adds	r0, r3, #4
 8004f04:	6010      	str	r0, [r2, #0]
 8004f06:	0628      	lsls	r0, r5, #24
 8004f08:	d501      	bpl.n	8004f0e <_printf_i+0xc2>
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	e002      	b.n	8004f14 <_printf_i+0xc8>
 8004f0e:	0668      	lsls	r0, r5, #25
 8004f10:	d5fb      	bpl.n	8004f0a <_printf_i+0xbe>
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	4854      	ldr	r0, [pc, #336]	; (8005068 <_printf_i+0x21c>)
 8004f16:	296f      	cmp	r1, #111	; 0x6f
 8004f18:	bf14      	ite	ne
 8004f1a:	220a      	movne	r2, #10
 8004f1c:	2208      	moveq	r2, #8
 8004f1e:	2100      	movs	r1, #0
 8004f20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f24:	6865      	ldr	r5, [r4, #4]
 8004f26:	60a5      	str	r5, [r4, #8]
 8004f28:	2d00      	cmp	r5, #0
 8004f2a:	f2c0 8095 	blt.w	8005058 <_printf_i+0x20c>
 8004f2e:	6821      	ldr	r1, [r4, #0]
 8004f30:	f021 0104 	bic.w	r1, r1, #4
 8004f34:	6021      	str	r1, [r4, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d13d      	bne.n	8004fb6 <_printf_i+0x16a>
 8004f3a:	2d00      	cmp	r5, #0
 8004f3c:	f040 808e 	bne.w	800505c <_printf_i+0x210>
 8004f40:	4665      	mov	r5, ip
 8004f42:	2a08      	cmp	r2, #8
 8004f44:	d10b      	bne.n	8004f5e <_printf_i+0x112>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	07db      	lsls	r3, r3, #31
 8004f4a:	d508      	bpl.n	8004f5e <_printf_i+0x112>
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	bfde      	ittt	le
 8004f54:	2330      	movle	r3, #48	; 0x30
 8004f56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f5e:	ebac 0305 	sub.w	r3, ip, r5
 8004f62:	6123      	str	r3, [r4, #16]
 8004f64:	f8cd 8000 	str.w	r8, [sp]
 8004f68:	463b      	mov	r3, r7
 8004f6a:	aa03      	add	r2, sp, #12
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f7ff fef6 	bl	8004d60 <_printf_common>
 8004f74:	3001      	adds	r0, #1
 8004f76:	d14d      	bne.n	8005014 <_printf_i+0x1c8>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	b005      	add	sp, #20
 8004f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f82:	4839      	ldr	r0, [pc, #228]	; (8005068 <_printf_i+0x21c>)
 8004f84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f88:	6813      	ldr	r3, [r2, #0]
 8004f8a:	6821      	ldr	r1, [r4, #0]
 8004f8c:	1d1d      	adds	r5, r3, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6015      	str	r5, [r2, #0]
 8004f92:	060a      	lsls	r2, r1, #24
 8004f94:	d50b      	bpl.n	8004fae <_printf_i+0x162>
 8004f96:	07ca      	lsls	r2, r1, #31
 8004f98:	bf44      	itt	mi
 8004f9a:	f041 0120 	orrmi.w	r1, r1, #32
 8004f9e:	6021      	strmi	r1, [r4, #0]
 8004fa0:	b91b      	cbnz	r3, 8004faa <_printf_i+0x15e>
 8004fa2:	6822      	ldr	r2, [r4, #0]
 8004fa4:	f022 0220 	bic.w	r2, r2, #32
 8004fa8:	6022      	str	r2, [r4, #0]
 8004faa:	2210      	movs	r2, #16
 8004fac:	e7b7      	b.n	8004f1e <_printf_i+0xd2>
 8004fae:	064d      	lsls	r5, r1, #25
 8004fb0:	bf48      	it	mi
 8004fb2:	b29b      	uxthmi	r3, r3
 8004fb4:	e7ef      	b.n	8004f96 <_printf_i+0x14a>
 8004fb6:	4665      	mov	r5, ip
 8004fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fbc:	fb02 3311 	mls	r3, r2, r1, r3
 8004fc0:	5cc3      	ldrb	r3, [r0, r3]
 8004fc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	d1f5      	bne.n	8004fb8 <_printf_i+0x16c>
 8004fcc:	e7b9      	b.n	8004f42 <_printf_i+0xf6>
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	6825      	ldr	r5, [r4, #0]
 8004fd2:	6961      	ldr	r1, [r4, #20]
 8004fd4:	1d18      	adds	r0, r3, #4
 8004fd6:	6010      	str	r0, [r2, #0]
 8004fd8:	0628      	lsls	r0, r5, #24
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	d501      	bpl.n	8004fe2 <_printf_i+0x196>
 8004fde:	6019      	str	r1, [r3, #0]
 8004fe0:	e002      	b.n	8004fe8 <_printf_i+0x19c>
 8004fe2:	066a      	lsls	r2, r5, #25
 8004fe4:	d5fb      	bpl.n	8004fde <_printf_i+0x192>
 8004fe6:	8019      	strh	r1, [r3, #0]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6123      	str	r3, [r4, #16]
 8004fec:	4665      	mov	r5, ip
 8004fee:	e7b9      	b.n	8004f64 <_printf_i+0x118>
 8004ff0:	6813      	ldr	r3, [r2, #0]
 8004ff2:	1d19      	adds	r1, r3, #4
 8004ff4:	6011      	str	r1, [r2, #0]
 8004ff6:	681d      	ldr	r5, [r3, #0]
 8004ff8:	6862      	ldr	r2, [r4, #4]
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f7fb f8f7 	bl	80001f0 <memchr>
 8005002:	b108      	cbz	r0, 8005008 <_printf_i+0x1bc>
 8005004:	1b40      	subs	r0, r0, r5
 8005006:	6060      	str	r0, [r4, #4]
 8005008:	6863      	ldr	r3, [r4, #4]
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	2300      	movs	r3, #0
 800500e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005012:	e7a7      	b.n	8004f64 <_printf_i+0x118>
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	462a      	mov	r2, r5
 8005018:	4639      	mov	r1, r7
 800501a:	4630      	mov	r0, r6
 800501c:	47c0      	blx	r8
 800501e:	3001      	adds	r0, #1
 8005020:	d0aa      	beq.n	8004f78 <_printf_i+0x12c>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	079b      	lsls	r3, r3, #30
 8005026:	d413      	bmi.n	8005050 <_printf_i+0x204>
 8005028:	68e0      	ldr	r0, [r4, #12]
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	4298      	cmp	r0, r3
 800502e:	bfb8      	it	lt
 8005030:	4618      	movlt	r0, r3
 8005032:	e7a3      	b.n	8004f7c <_printf_i+0x130>
 8005034:	2301      	movs	r3, #1
 8005036:	464a      	mov	r2, r9
 8005038:	4639      	mov	r1, r7
 800503a:	4630      	mov	r0, r6
 800503c:	47c0      	blx	r8
 800503e:	3001      	adds	r0, #1
 8005040:	d09a      	beq.n	8004f78 <_printf_i+0x12c>
 8005042:	3501      	adds	r5, #1
 8005044:	68e3      	ldr	r3, [r4, #12]
 8005046:	9a03      	ldr	r2, [sp, #12]
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	42ab      	cmp	r3, r5
 800504c:	dcf2      	bgt.n	8005034 <_printf_i+0x1e8>
 800504e:	e7eb      	b.n	8005028 <_printf_i+0x1dc>
 8005050:	2500      	movs	r5, #0
 8005052:	f104 0919 	add.w	r9, r4, #25
 8005056:	e7f5      	b.n	8005044 <_printf_i+0x1f8>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ac      	bne.n	8004fb6 <_printf_i+0x16a>
 800505c:	7803      	ldrb	r3, [r0, #0]
 800505e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005066:	e76c      	b.n	8004f42 <_printf_i+0xf6>
 8005068:	080051a9 	.word	0x080051a9
 800506c:	080051ba 	.word	0x080051ba

08005070 <memcpy>:
 8005070:	b510      	push	{r4, lr}
 8005072:	1e43      	subs	r3, r0, #1
 8005074:	440a      	add	r2, r1
 8005076:	4291      	cmp	r1, r2
 8005078:	d100      	bne.n	800507c <memcpy+0xc>
 800507a:	bd10      	pop	{r4, pc}
 800507c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005084:	e7f7      	b.n	8005076 <memcpy+0x6>

08005086 <memmove>:
 8005086:	4288      	cmp	r0, r1
 8005088:	b510      	push	{r4, lr}
 800508a:	eb01 0302 	add.w	r3, r1, r2
 800508e:	d807      	bhi.n	80050a0 <memmove+0x1a>
 8005090:	1e42      	subs	r2, r0, #1
 8005092:	4299      	cmp	r1, r3
 8005094:	d00a      	beq.n	80050ac <memmove+0x26>
 8005096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800509e:	e7f8      	b.n	8005092 <memmove+0xc>
 80050a0:	4283      	cmp	r3, r0
 80050a2:	d9f5      	bls.n	8005090 <memmove+0xa>
 80050a4:	1881      	adds	r1, r0, r2
 80050a6:	1ad2      	subs	r2, r2, r3
 80050a8:	42d3      	cmn	r3, r2
 80050aa:	d100      	bne.n	80050ae <memmove+0x28>
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80050b6:	e7f7      	b.n	80050a8 <memmove+0x22>

080050b8 <_realloc_r>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	4607      	mov	r7, r0
 80050bc:	4614      	mov	r4, r2
 80050be:	460e      	mov	r6, r1
 80050c0:	b921      	cbnz	r1, 80050cc <_realloc_r+0x14>
 80050c2:	4611      	mov	r1, r2
 80050c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050c8:	f7ff bc52 	b.w	8004970 <_malloc_r>
 80050cc:	b922      	cbnz	r2, 80050d8 <_realloc_r+0x20>
 80050ce:	f7ff fc01 	bl	80048d4 <_free_r>
 80050d2:	4625      	mov	r5, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d8:	f000 f814 	bl	8005104 <_malloc_usable_size_r>
 80050dc:	42a0      	cmp	r0, r4
 80050de:	d20f      	bcs.n	8005100 <_realloc_r+0x48>
 80050e0:	4621      	mov	r1, r4
 80050e2:	4638      	mov	r0, r7
 80050e4:	f7ff fc44 	bl	8004970 <_malloc_r>
 80050e8:	4605      	mov	r5, r0
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d0f2      	beq.n	80050d4 <_realloc_r+0x1c>
 80050ee:	4631      	mov	r1, r6
 80050f0:	4622      	mov	r2, r4
 80050f2:	f7ff ffbd 	bl	8005070 <memcpy>
 80050f6:	4631      	mov	r1, r6
 80050f8:	4638      	mov	r0, r7
 80050fa:	f7ff fbeb 	bl	80048d4 <_free_r>
 80050fe:	e7e9      	b.n	80050d4 <_realloc_r+0x1c>
 8005100:	4635      	mov	r5, r6
 8005102:	e7e7      	b.n	80050d4 <_realloc_r+0x1c>

08005104 <_malloc_usable_size_r>:
 8005104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005108:	1f18      	subs	r0, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	bfbc      	itt	lt
 800510e:	580b      	ldrlt	r3, [r1, r0]
 8005110:	18c0      	addlt	r0, r0, r3
 8005112:	4770      	bx	lr

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr
